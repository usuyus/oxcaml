source_filename = "int_ops.ml"

@camlInt_ops__data_begin = global {  } {  }, align 8
define void @camlInt_ops__code_begin() { ret void }

@camlInt_ops__gc_roots = global { i64 } { i64 0 }, align 8
@.header.camlInt_ops = global { i64 } { i64 25344 }, align 8
@camlInt_ops = global { i64, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr } { i64 9, ptr @camlInt_ops__add_23, ptr @camlInt_ops__sub_24, ptr @camlInt_ops__mul_25, ptr @camlInt_ops__div_26, ptr @camlInt_ops__mod__27, ptr @camlInt_ops__land__28, ptr @camlInt_ops__lor__29, ptr @camlInt_ops__lxor__30, ptr @camlInt_ops__lnot__31, ptr @camlInt_ops__lsl__32, ptr @camlInt_ops__lsr__33, ptr @camlInt_ops__asr__34, ptr @camlInt_ops__add_imm_35, ptr @camlInt_ops__sub_imm_36, ptr @camlInt_ops__mul_imm_37, ptr @camlInt_ops__div_imm_38, ptr @camlInt_ops__mod_imm_39, ptr @camlInt_ops__land_imm_40, ptr @camlInt_ops__lor_imm_41, ptr @camlInt_ops__lxor_imm_42, ptr @camlInt_ops__lsl_imm_43, ptr @camlInt_ops__lsr_imm_44, ptr @camlInt_ops__asr_imm_45 }, align 8
@.header.camlInt_ops__asr_imm_45 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__asr_imm_45 = global { ptr, i64 } { ptr @camlInt_ops__asr_imm_HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__lsr_imm_44 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__lsr_imm_44 = global { ptr, i64 } { ptr @camlInt_ops__lsr_imm_HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__lsl_imm_43 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__lsl_imm_43 = global { ptr, i64 } { ptr @camlInt_ops__lsl_imm_HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__lxor_imm_42 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__lxor_imm_42 = global { ptr, i64 } { ptr @camlInt_ops__lxor_imm_HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__lor_imm_41 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__lor_imm_41 = global { ptr, i64 } { ptr @camlInt_ops__lor_imm_HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__land_imm_40 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__land_imm_40 = global { ptr, i64 } { ptr @camlInt_ops__land_imm_HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__mod_imm_39 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__mod_imm_39 = global { ptr, i64 } { ptr @camlInt_ops__mod_imm_HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__div_imm_38 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__div_imm_38 = global { ptr, i64 } { ptr @camlInt_ops__div_imm_HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__mul_imm_37 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__mul_imm_37 = global { ptr, i64 } { ptr @camlInt_ops__mul_imm_HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__sub_imm_36 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__sub_imm_36 = global { ptr, i64 } { ptr @camlInt_ops__sub_imm_HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__add_imm_35 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__add_imm_35 = global { ptr, i64 } { ptr @camlInt_ops__add_imm_HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__asr__34 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__asr__34 = global { ptr, i64 } { ptr @camlInt_ops__asr__HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__lsr__33 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__lsr__33 = global { ptr, i64 } { ptr @camlInt_ops__lsr__HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__lsl__32 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__lsl__32 = global { ptr, i64 } { ptr @camlInt_ops__lsl__HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__lnot__31 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__lnot__31 = global { ptr, i64 } { ptr @camlInt_ops__lnot__HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__lxor__30 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__lxor__30 = global { ptr, i64 } { ptr @camlInt_ops__lxor__HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__lor__29 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__lor__29 = global { ptr, i64 } { ptr @camlInt_ops__lor__HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__land__28 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__land__28 = global { ptr, i64 } { ptr @camlInt_ops__land__HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__mod__27 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__mod__27 = global { ptr, i64 } { ptr @camlInt_ops__mod__HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__div_26 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__div_26 = global { ptr, i64 } { ptr @camlInt_ops__div_HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__mul_25 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__mul_25 = global { ptr, i64 } { ptr @camlInt_ops__mul_HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__sub_24 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__sub_24 = global { ptr, i64 } { ptr @camlInt_ops__sub_HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__add_23 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__add_23 = global { ptr, i64 } { ptr @camlInt_ops__add_HIDE_STAMP, i64 108086391056891909 }, align 8
define cc 104 { { ptr, ptr }, { i64 } } @camlInt_ops__add_HIDE_STAMP(ptr %0, ptr %1, i64 %2)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  br label %L1
L1:
  br label %L101
L101:                                                ; preds = %L1
  %13 = load i64, ptr %4
  store i64 %13, ptr %5
  store ptr @camlInt_ops_data, ptr %6
  %14 = load i64, ptr %6
  store i64 %14, ptr %7
  %15 = load i64, ptr %7
  %16 = add i64 %15, 8
  store i64 %16, ptr %7
  %17 = load i64, ptr %7
  %18 = add i64 %17, 0
  %19 = inttoptr i64 %18 to ptr
  %20 = load i64, ptr %19
  store i64 %20, ptr %8
  store ptr @camlInt_ops_data, ptr %9
  %21 = load i64, ptr %9
  %22 = add i64 %21, 0
  %23 = inttoptr i64 %22 to ptr
  %24 = load i64, ptr %23
  store i64 %24, ptr %10
  %25 = load i64, ptr %10
  store i64 %25, ptr %11
  %26 = load i64, ptr %11
  %27 = load i64, ptr %8
  %28 = add i64 %26, %27
  store i64 %28, ptr %11
  %29 = load i64, ptr %11
  store i64 %29, ptr %12
  %30 = load i64, ptr %12
  %31 = add i64 %30, -1
  store i64 %31, ptr %12
  %32 = load i64, ptr %12
  store i64 %32, ptr %4
  %33 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %34 = load ptr, ptr %ds
  %35 = insertvalue { { ptr, ptr }, { i64 } } %33, ptr %34, 0, 0
  %36 = load ptr, ptr %alloc
  %37 = insertvalue { { ptr, ptr }, { i64 } } %35, ptr %36, 0, 1
  %38 = load i64, ptr %4
  %39 = insertvalue { { ptr, ptr }, { i64 } } %37, i64 %38, 1, 0
  ret { { ptr, ptr }, { i64 } } %39
}

define cc 104 { { ptr, ptr }, { i64 } } @camlInt_ops__sub_HIDE_STAMP(ptr %0, ptr %1, i64 %2)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  br label %L1
L1:
  br label %L109
L109:                                                ; preds = %L1
  %13 = load i64, ptr %4
  store i64 %13, ptr %5
  store ptr @camlInt_ops_data, ptr %6
  %14 = load i64, ptr %6
  store i64 %14, ptr %7
  %15 = load i64, ptr %7
  %16 = add i64 %15, 8
  store i64 %16, ptr %7
  %17 = load i64, ptr %7
  %18 = add i64 %17, 0
  %19 = inttoptr i64 %18 to ptr
  %20 = load i64, ptr %19
  store i64 %20, ptr %8
  store ptr @camlInt_ops_data, ptr %9
  %21 = load i64, ptr %9
  %22 = add i64 %21, 0
  %23 = inttoptr i64 %22 to ptr
  %24 = load i64, ptr %23
  store i64 %24, ptr %10
  %25 = load i64, ptr %10
  store i64 %25, ptr %11
  %26 = load i64, ptr %11
  %27 = load i64, ptr %8
  %28 = sub i64 %26, %27
  store i64 %28, ptr %11
  %29 = load i64, ptr %11
  store i64 %29, ptr %12
  %30 = load i64, ptr %12
  %31 = add i64 %30, 1
  store i64 %31, ptr %12
  %32 = load i64, ptr %12
  store i64 %32, ptr %4
  %33 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %34 = load ptr, ptr %ds
  %35 = insertvalue { { ptr, ptr }, { i64 } } %33, ptr %34, 0, 0
  %36 = load ptr, ptr %alloc
  %37 = insertvalue { { ptr, ptr }, { i64 } } %35, ptr %36, 0, 1
  %38 = load i64, ptr %4
  %39 = insertvalue { { ptr, ptr }, { i64 } } %37, i64 %38, 1, 0
  ret { { ptr, ptr }, { i64 } } %39
}

define cc 104 { { ptr, ptr }, { i64 } } @camlInt_ops__mul_HIDE_STAMP(ptr %0, ptr %1, i64 %2)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  br label %L1
L1:
  br label %L117
L117:                                                ; preds = %L1
  %15 = load i64, ptr %4
  store i64 %15, ptr %5
  store ptr @camlInt_ops_data, ptr %6
  %16 = load i64, ptr %6
  store i64 %16, ptr %7
  %17 = load i64, ptr %7
  %18 = add i64 %17, 8
  store i64 %18, ptr %7
  %19 = load i64, ptr %7
  %20 = add i64 %19, 0
  %21 = inttoptr i64 %20 to ptr
  %22 = load i64, ptr %21
  store i64 %22, ptr %8
  %23 = load i64, ptr %8
  store i64 %23, ptr %9
  %24 = load i64, ptr %9
  %25 = ashr i64 %24, 1
  store i64 %25, ptr %9
  store ptr @camlInt_ops_data, ptr %10
  %26 = load i64, ptr %10
  %27 = add i64 %26, 0
  %28 = inttoptr i64 %27 to ptr
  %29 = load i64, ptr %28
  store i64 %29, ptr %11
  %30 = load i64, ptr %11
  store i64 %30, ptr %12
  %31 = load i64, ptr %12
  %32 = add i64 %31, -1
  store i64 %32, ptr %12
  %33 = load i64, ptr %12
  store i64 %33, ptr %13
  %34 = load i64, ptr %13
  %35 = load i64, ptr %9
  %36 = mul i64 %34, %35
  store i64 %36, ptr %13
  %37 = load i64, ptr %13
  store i64 %37, ptr %14
  %38 = load i64, ptr %14
  %39 = add i64 %38, 1
  store i64 %39, ptr %14
  %40 = load i64, ptr %14
  store i64 %40, ptr %4
  %41 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %42 = load ptr, ptr %ds
  %43 = insertvalue { { ptr, ptr }, { i64 } } %41, ptr %42, 0, 0
  %44 = load ptr, ptr %alloc
  %45 = insertvalue { { ptr, ptr }, { i64 } } %43, ptr %44, 0, 1
  %46 = load i64, ptr %4
  %47 = insertvalue { { ptr, ptr }, { i64 } } %45, i64 %46, 1, 0
  ret { { ptr, ptr }, { i64 } } %47
}

define cc 104 { { ptr, ptr }, { i64 } } @camlInt_ops__div_HIDE_STAMP(ptr %0, ptr %1, i64 %2)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  br label %L1
L1:
  br label %L127
L127:                                                ; preds = %L1
  %20 = load i64, ptr %4
  store i64 %20, ptr %6
  store ptr @camlInt_ops_data, ptr %7
  %21 = load i64, ptr %7
  store i64 %21, ptr %8
  %22 = load i64, ptr %8
  %23 = add i64 %22, 8
  store i64 %23, ptr %8
  %24 = load i64, ptr %8
  %25 = add i64 %24, 0
  %26 = inttoptr i64 %25 to ptr
  %27 = load i64, ptr %26
  store i64 %27, ptr %9
  %28 = load i64, ptr %9
  store i64 %28, ptr %10
  %29 = load i64, ptr %10
  %30 = icmp slt i64 %29, 1
  br i1 %30, label %L136, label %31
31:
  %32 = load i64, ptr %10
  %33 = icmp sgt i64 %32, 1
  br i1 %33, label %L136, label %L131
L131:                                                ; preds = %L127
  store i64 1, ptr %11
  %34 = load i64, ptr %11
  store i64 %34, ptr %4
  %35 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %36 = load ptr, ptr %ds
  %37 = insertvalue { { ptr, ptr }, { i64 } } %35, ptr %36, 0, 0
  %38 = load ptr, ptr %alloc
  %39 = insertvalue { { ptr, ptr }, { i64 } } %37, ptr %38, 0, 1
  %40 = load i64, ptr %4
  %41 = insertvalue { { ptr, ptr }, { i64 } } %39, i64 %40, 1, 0
  ret { { ptr, ptr }, { i64 } } %41
L136:                                                ; preds = %L127
  %42 = load i64, ptr %10
  %43 = icmp slt i64 %42, 1
  br i1 %43, label %L138, label %44
44:
  %45 = load i64, ptr %10
  %46 = icmp sgt i64 %45, 1
  br i1 %46, label %L138, label %L149
L138:                                                ; preds = %L136
  %47 = load i64, ptr %10
  store i64 %47, ptr %12
  %48 = load i64, ptr %12
  %49 = ashr i64 %48, 1
  store i64 %49, ptr %12
  store ptr @camlInt_ops_data, ptr %13
  %50 = load i64, ptr %13
  %51 = add i64 %50, 0
  %52 = inttoptr i64 %51 to ptr
  %53 = load i64, ptr %52
  store i64 %53, ptr %14
  %54 = load i64, ptr %14
  store i64 %54, ptr %15
  %55 = load i64, ptr %15
  %56 = ashr i64 %55, 1
  store i64 %56, ptr %15
  %57 = load i64, ptr %15
  store i64 %57, ptr %4
  %58 = load i64, ptr %12
  store i64 %58, ptr %5
  %59 = load i64, ptr %4
  %60 = load i64, ptr %5
  %61 = sdiv i64 %59, %60
  store i64 %61, ptr %4
  %62 = load i64, ptr %4
  store i64 %62, ptr %16
  %63 = load i64, ptr %16
  store i64 %63, ptr %17
  %64 = load i64, ptr %17
  %65 = shl i64 %64, 1
  store i64 %65, ptr %17
  %66 = load i64, ptr %17
  store i64 %66, ptr %18
  %67 = load i64, ptr %18
  %68 = add i64 %67, 1
  store i64 %68, ptr %18
  %69 = load i64, ptr %18
  store i64 %69, ptr %4
  %70 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %71 = load ptr, ptr %ds
  %72 = insertvalue { { ptr, ptr }, { i64 } } %70, ptr %71, 0, 0
  %73 = load ptr, ptr %alloc
  %74 = insertvalue { { ptr, ptr }, { i64 } } %72, ptr %73, 0, 1
  %75 = load i64, ptr %4
  %76 = insertvalue { { ptr, ptr }, { i64 } } %74, i64 %75, 1, 0
  ret { { ptr, ptr }, { i64 } } %76
L149:                                                ; preds = %L136
  store ptr @caml_exn_Division_by_zero, ptr %19
  %77 = load i64, ptr %19
  store i64 %77, ptr %4
  %78 = load i64, ptr %ds
  %79 = add i64 %78, 48
  %80 = inttoptr i64 %79 to ptr
  %81 = load i64, ptr %80
  %82 = inttoptr i64 %81 to ptr
  %83 = load i64, ptr %82
  %84 = add i64 %81, 8
  %85 = inttoptr i64 %84 to ptr
  %86 = load ptr, ptr %85
  %87 = load i64, ptr %4
  %88 = add i64 %81, 16
  store i64 %83, ptr %80
  call void @llvm.write_register.i64(metadata !{!"rsp\00"}, i64 %88)
  call void asm sideeffect "movq $0, %rax; jmpq *$1", "r,r,~{rax}"(i64 %87, ptr %86)
  unreachable
}

define cc 104 { { ptr, ptr }, { i64 } } @camlInt_ops__mod__HIDE_STAMP(ptr %0, ptr %1, i64 %2)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  br label %L1
L1:
  br label %L154
L154:                                                ; preds = %L1
  %20 = load i64, ptr %4
  store i64 %20, ptr %7
  store ptr @camlInt_ops_data, ptr %8
  %21 = load i64, ptr %8
  store i64 %21, ptr %9
  %22 = load i64, ptr %9
  %23 = add i64 %22, 8
  store i64 %23, ptr %9
  %24 = load i64, ptr %9
  %25 = add i64 %24, 0
  %26 = inttoptr i64 %25 to ptr
  %27 = load i64, ptr %26
  store i64 %27, ptr %10
  %28 = load i64, ptr %10
  store i64 %28, ptr %11
  %29 = load i64, ptr %11
  %30 = icmp slt i64 %29, 1
  br i1 %30, label %L161, label %31
31:
  %32 = load i64, ptr %11
  %33 = icmp sgt i64 %32, 1
  br i1 %33, label %L161, label %L172
L161:                                                ; preds = %L154
  %34 = load i64, ptr %11
  store i64 %34, ptr %12
  %35 = load i64, ptr %12
  %36 = ashr i64 %35, 1
  store i64 %36, ptr %12
  store ptr @camlInt_ops_data, ptr %13
  %37 = load i64, ptr %13
  %38 = add i64 %37, 0
  %39 = inttoptr i64 %38 to ptr
  %40 = load i64, ptr %39
  store i64 %40, ptr %14
  %41 = load i64, ptr %14
  store i64 %41, ptr %15
  %42 = load i64, ptr %15
  %43 = ashr i64 %42, 1
  store i64 %43, ptr %15
  %44 = load i64, ptr %15
  store i64 %44, ptr %4
  %45 = load i64, ptr %12
  store i64 %45, ptr %6
  %46 = load i64, ptr %4
  %47 = load i64, ptr %6
  %48 = srem i64 %46, %47
  store i64 %48, ptr %5
  %49 = load i64, ptr %5
  store i64 %49, ptr %16
  %50 = load i64, ptr %16
  store i64 %50, ptr %17
  %51 = load i64, ptr %17
  %52 = shl i64 %51, 1
  store i64 %52, ptr %17
  %53 = load i64, ptr %17
  store i64 %53, ptr %18
  %54 = load i64, ptr %18
  %55 = add i64 %54, 1
  store i64 %55, ptr %18
  %56 = load i64, ptr %18
  store i64 %56, ptr %4
  %57 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %58 = load ptr, ptr %ds
  %59 = insertvalue { { ptr, ptr }, { i64 } } %57, ptr %58, 0, 0
  %60 = load ptr, ptr %alloc
  %61 = insertvalue { { ptr, ptr }, { i64 } } %59, ptr %60, 0, 1
  %62 = load i64, ptr %4
  %63 = insertvalue { { ptr, ptr }, { i64 } } %61, i64 %62, 1, 0
  ret { { ptr, ptr }, { i64 } } %63
L172:                                                ; preds = %L154
  store ptr @caml_exn_Division_by_zero, ptr %19
  %64 = load i64, ptr %19
  store i64 %64, ptr %4
  %65 = load i64, ptr %ds
  %66 = add i64 %65, 48
  %67 = inttoptr i64 %66 to ptr
  %68 = load i64, ptr %67
  %69 = inttoptr i64 %68 to ptr
  %70 = load i64, ptr %69
  %71 = add i64 %68, 8
  %72 = inttoptr i64 %71 to ptr
  %73 = load ptr, ptr %72
  %74 = load i64, ptr %4
  %75 = add i64 %68, 16
  store i64 %70, ptr %67
  call void @llvm.write_register.i64(metadata !{!"rsp\00"}, i64 %75)
  call void asm sideeffect "movq $0, %rax; jmpq *$1", "r,r,~{rax}"(i64 %74, ptr %73)
  unreachable
}

define cc 104 { { ptr, ptr }, { i64 } } @camlInt_ops__land__HIDE_STAMP(ptr %0, ptr %1, i64 %2)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  br label %L1
L1:
  br label %L176
L176:                                                ; preds = %L1
  %12 = load i64, ptr %4
  store i64 %12, ptr %5
  store ptr @camlInt_ops_data, ptr %6
  %13 = load i64, ptr %6
  store i64 %13, ptr %7
  %14 = load i64, ptr %7
  %15 = add i64 %14, 8
  store i64 %15, ptr %7
  %16 = load i64, ptr %7
  %17 = add i64 %16, 0
  %18 = inttoptr i64 %17 to ptr
  %19 = load i64, ptr %18
  store i64 %19, ptr %8
  store ptr @camlInt_ops_data, ptr %9
  %20 = load i64, ptr %9
  %21 = add i64 %20, 0
  %22 = inttoptr i64 %21 to ptr
  %23 = load i64, ptr %22
  store i64 %23, ptr %10
  %24 = load i64, ptr %10
  store i64 %24, ptr %11
  %25 = load i64, ptr %11
  %26 = load i64, ptr %8
  %27 = and i64 %25, %26
  store i64 %27, ptr %11
  %28 = load i64, ptr %11
  store i64 %28, ptr %4
  %29 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %30 = load ptr, ptr %ds
  %31 = insertvalue { { ptr, ptr }, { i64 } } %29, ptr %30, 0, 0
  %32 = load ptr, ptr %alloc
  %33 = insertvalue { { ptr, ptr }, { i64 } } %31, ptr %32, 0, 1
  %34 = load i64, ptr %4
  %35 = insertvalue { { ptr, ptr }, { i64 } } %33, i64 %34, 1, 0
  ret { { ptr, ptr }, { i64 } } %35
}

define cc 104 { { ptr, ptr }, { i64 } } @camlInt_ops__lor__HIDE_STAMP(ptr %0, ptr %1, i64 %2)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  br label %L1
L1:
  br label %L183
L183:                                                ; preds = %L1
  %12 = load i64, ptr %4
  store i64 %12, ptr %5
  store ptr @camlInt_ops_data, ptr %6
  %13 = load i64, ptr %6
  store i64 %13, ptr %7
  %14 = load i64, ptr %7
  %15 = add i64 %14, 8
  store i64 %15, ptr %7
  %16 = load i64, ptr %7
  %17 = add i64 %16, 0
  %18 = inttoptr i64 %17 to ptr
  %19 = load i64, ptr %18
  store i64 %19, ptr %8
  store ptr @camlInt_ops_data, ptr %9
  %20 = load i64, ptr %9
  %21 = add i64 %20, 0
  %22 = inttoptr i64 %21 to ptr
  %23 = load i64, ptr %22
  store i64 %23, ptr %10
  %24 = load i64, ptr %10
  store i64 %24, ptr %11
  %25 = load i64, ptr %11
  %26 = load i64, ptr %8
  %27 = or i64 %25, %26
  store i64 %27, ptr %11
  %28 = load i64, ptr %11
  store i64 %28, ptr %4
  %29 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %30 = load ptr, ptr %ds
  %31 = insertvalue { { ptr, ptr }, { i64 } } %29, ptr %30, 0, 0
  %32 = load ptr, ptr %alloc
  %33 = insertvalue { { ptr, ptr }, { i64 } } %31, ptr %32, 0, 1
  %34 = load i64, ptr %4
  %35 = insertvalue { { ptr, ptr }, { i64 } } %33, i64 %34, 1, 0
  ret { { ptr, ptr }, { i64 } } %35
}

define cc 104 { { ptr, ptr }, { i64 } } @camlInt_ops__lxor__HIDE_STAMP(ptr %0, ptr %1, i64 %2)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  br label %L1
L1:
  br label %L190
L190:                                                ; preds = %L1
  %13 = load i64, ptr %4
  store i64 %13, ptr %5
  store ptr @camlInt_ops_data, ptr %6
  %14 = load i64, ptr %6
  store i64 %14, ptr %7
  %15 = load i64, ptr %7
  %16 = add i64 %15, 8
  store i64 %16, ptr %7
  %17 = load i64, ptr %7
  %18 = add i64 %17, 0
  %19 = inttoptr i64 %18 to ptr
  %20 = load i64, ptr %19
  store i64 %20, ptr %8
  store ptr @camlInt_ops_data, ptr %9
  %21 = load i64, ptr %9
  %22 = add i64 %21, 0
  %23 = inttoptr i64 %22 to ptr
  %24 = load i64, ptr %23
  store i64 %24, ptr %10
  %25 = load i64, ptr %10
  store i64 %25, ptr %11
  %26 = load i64, ptr %11
  %27 = load i64, ptr %8
  %28 = xor i64 %26, %27
  store i64 %28, ptr %11
  %29 = load i64, ptr %11
  store i64 %29, ptr %12
  %30 = load i64, ptr %12
  %31 = or i64 %30, 1
  store i64 %31, ptr %12
  %32 = load i64, ptr %12
  store i64 %32, ptr %4
  %33 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %34 = load ptr, ptr %ds
  %35 = insertvalue { { ptr, ptr }, { i64 } } %33, ptr %34, 0, 0
  %36 = load ptr, ptr %alloc
  %37 = insertvalue { { ptr, ptr }, { i64 } } %35, ptr %36, 0, 1
  %38 = load i64, ptr %4
  %39 = insertvalue { { ptr, ptr }, { i64 } } %37, i64 %38, 1, 0
  ret { { ptr, ptr }, { i64 } } %39
}

define cc 104 { { ptr, ptr }, { i64 } } @camlInt_ops__lnot__HIDE_STAMP(ptr %0, ptr %1, i64 %2)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  br label %L1
L1:
  br label %L198
L198:                                                ; preds = %L1
  %10 = load i64, ptr %4
  store i64 %10, ptr %5
  store ptr @camlInt_ops_data, ptr %6
  %11 = load i64, ptr %6
  %12 = add i64 %11, 0
  %13 = inttoptr i64 %12 to ptr
  %14 = load i64, ptr %13
  store i64 %14, ptr %7
  %15 = load i64, ptr %7
  store i64 %15, ptr %8
  %16 = load i64, ptr %8
  %17 = xor i64 %16, -1
  store i64 %17, ptr %8
  %18 = load i64, ptr %8
  store i64 %18, ptr %9
  %19 = load i64, ptr %9
  %20 = or i64 %19, 1
  store i64 %20, ptr %9
  %21 = load i64, ptr %9
  store i64 %21, ptr %4
  %22 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %23 = load ptr, ptr %ds
  %24 = insertvalue { { ptr, ptr }, { i64 } } %22, ptr %23, 0, 0
  %25 = load ptr, ptr %alloc
  %26 = insertvalue { { ptr, ptr }, { i64 } } %24, ptr %25, 0, 1
  %27 = load i64, ptr %4
  %28 = insertvalue { { ptr, ptr }, { i64 } } %26, i64 %27, 1, 0
  ret { { ptr, ptr }, { i64 } } %28
}

define cc 104 { { ptr, ptr }, { i64 } } @camlInt_ops__lsl__HIDE_STAMP(ptr %0, ptr %1, i64 %2)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  br label %L1
L1:
  br label %L204
L204:                                                ; preds = %L1
  %16 = load i64, ptr %4
  store i64 %16, ptr %6
  store ptr @camlInt_ops_data, ptr %7
  %17 = load i64, ptr %7
  store i64 %17, ptr %8
  %18 = load i64, ptr %8
  %19 = add i64 %18, 8
  store i64 %19, ptr %8
  %20 = load i64, ptr %8
  %21 = add i64 %20, 0
  %22 = inttoptr i64 %21 to ptr
  %23 = load i64, ptr %22
  store i64 %23, ptr %9
  %24 = load i64, ptr %9
  store i64 %24, ptr %10
  %25 = load i64, ptr %10
  %26 = ashr i64 %25, 1
  store i64 %26, ptr %10
  store ptr @camlInt_ops_data, ptr %11
  %27 = load i64, ptr %11
  %28 = add i64 %27, 0
  %29 = inttoptr i64 %28 to ptr
  %30 = load i64, ptr %29
  store i64 %30, ptr %12
  %31 = load i64, ptr %12
  store i64 %31, ptr %13
  %32 = load i64, ptr %13
  %33 = add i64 %32, -1
  store i64 %33, ptr %13
  %34 = load i64, ptr %13
  store i64 %34, ptr %14
  %35 = load i64, ptr %10
  store i64 %35, ptr %5
  %36 = load i64, ptr %14
  %37 = load i64, ptr %5
  %38 = shl i64 %36, %37
  store i64 %38, ptr %14
  %39 = load i64, ptr %14
  store i64 %39, ptr %15
  %40 = load i64, ptr %15
  %41 = add i64 %40, 1
  store i64 %41, ptr %15
  %42 = load i64, ptr %15
  store i64 %42, ptr %4
  %43 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %44 = load ptr, ptr %ds
  %45 = insertvalue { { ptr, ptr }, { i64 } } %43, ptr %44, 0, 0
  %46 = load ptr, ptr %alloc
  %47 = insertvalue { { ptr, ptr }, { i64 } } %45, ptr %46, 0, 1
  %48 = load i64, ptr %4
  %49 = insertvalue { { ptr, ptr }, { i64 } } %47, i64 %48, 1, 0
  ret { { ptr, ptr }, { i64 } } %49
}

define cc 104 { { ptr, ptr }, { i64 } } @camlInt_ops__lsr__HIDE_STAMP(ptr %0, ptr %1, i64 %2)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  br label %L1
L1:
  br label %L214
L214:                                                ; preds = %L1
  %15 = load i64, ptr %4
  store i64 %15, ptr %6
  store ptr @camlInt_ops_data, ptr %7
  %16 = load i64, ptr %7
  store i64 %16, ptr %8
  %17 = load i64, ptr %8
  %18 = add i64 %17, 8
  store i64 %18, ptr %8
  %19 = load i64, ptr %8
  %20 = add i64 %19, 0
  %21 = inttoptr i64 %20 to ptr
  %22 = load i64, ptr %21
  store i64 %22, ptr %9
  %23 = load i64, ptr %9
  store i64 %23, ptr %10
  %24 = load i64, ptr %10
  %25 = ashr i64 %24, 1
  store i64 %25, ptr %10
  store ptr @camlInt_ops_data, ptr %11
  %26 = load i64, ptr %11
  %27 = add i64 %26, 0
  %28 = inttoptr i64 %27 to ptr
  %29 = load i64, ptr %28
  store i64 %29, ptr %12
  %30 = load i64, ptr %12
  store i64 %30, ptr %13
  %31 = load i64, ptr %10
  store i64 %31, ptr %5
  %32 = load i64, ptr %13
  %33 = load i64, ptr %5
  %34 = lshr i64 %32, %33
  store i64 %34, ptr %13
  %35 = load i64, ptr %13
  store i64 %35, ptr %14
  %36 = load i64, ptr %14
  %37 = or i64 %36, 1
  store i64 %37, ptr %14
  %38 = load i64, ptr %14
  store i64 %38, ptr %4
  %39 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %40 = load ptr, ptr %ds
  %41 = insertvalue { { ptr, ptr }, { i64 } } %39, ptr %40, 0, 0
  %42 = load ptr, ptr %alloc
  %43 = insertvalue { { ptr, ptr }, { i64 } } %41, ptr %42, 0, 1
  %44 = load i64, ptr %4
  %45 = insertvalue { { ptr, ptr }, { i64 } } %43, i64 %44, 1, 0
  ret { { ptr, ptr }, { i64 } } %45
}

define cc 104 { { ptr, ptr }, { i64 } } @camlInt_ops__asr__HIDE_STAMP(ptr %0, ptr %1, i64 %2)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  br label %L1
L1:
  br label %L223
L223:                                                ; preds = %L1
  %15 = load i64, ptr %4
  store i64 %15, ptr %6
  store ptr @camlInt_ops_data, ptr %7
  %16 = load i64, ptr %7
  store i64 %16, ptr %8
  %17 = load i64, ptr %8
  %18 = add i64 %17, 8
  store i64 %18, ptr %8
  %19 = load i64, ptr %8
  %20 = add i64 %19, 0
  %21 = inttoptr i64 %20 to ptr
  %22 = load i64, ptr %21
  store i64 %22, ptr %9
  %23 = load i64, ptr %9
  store i64 %23, ptr %10
  %24 = load i64, ptr %10
  %25 = ashr i64 %24, 1
  store i64 %25, ptr %10
  store ptr @camlInt_ops_data, ptr %11
  %26 = load i64, ptr %11
  %27 = add i64 %26, 0
  %28 = inttoptr i64 %27 to ptr
  %29 = load i64, ptr %28
  store i64 %29, ptr %12
  %30 = load i64, ptr %12
  store i64 %30, ptr %13
  %31 = load i64, ptr %10
  store i64 %31, ptr %5
  %32 = load i64, ptr %13
  %33 = load i64, ptr %5
  %34 = ashr i64 %32, %33
  store i64 %34, ptr %13
  %35 = load i64, ptr %13
  store i64 %35, ptr %14
  %36 = load i64, ptr %14
  %37 = or i64 %36, 1
  store i64 %37, ptr %14
  %38 = load i64, ptr %14
  store i64 %38, ptr %4
  %39 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %40 = load ptr, ptr %ds
  %41 = insertvalue { { ptr, ptr }, { i64 } } %39, ptr %40, 0, 0
  %42 = load ptr, ptr %alloc
  %43 = insertvalue { { ptr, ptr }, { i64 } } %41, ptr %42, 0, 1
  %44 = load i64, ptr %4
  %45 = insertvalue { { ptr, ptr }, { i64 } } %43, i64 %44, 1, 0
  ret { { ptr, ptr }, { i64 } } %45
}

define cc 104 { { ptr, ptr }, { i64 } } @camlInt_ops__add_imm_HIDE_STAMP(ptr %0, ptr %1, i64 %2)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  br label %L1
L1:
  br label %L232
L232:                                                ; preds = %L1
  %9 = load i64, ptr %4
  store i64 %9, ptr %5
  store ptr @camlInt_ops_data, ptr %6
  %10 = load i64, ptr %6
  %11 = add i64 %10, 0
  %12 = inttoptr i64 %11 to ptr
  %13 = load i64, ptr %12
  store i64 %13, ptr %7
  %14 = load i64, ptr %7
  store i64 %14, ptr %8
  %15 = load i64, ptr %8
  %16 = add i64 %15, 8
  store i64 %16, ptr %8
  %17 = load i64, ptr %8
  store i64 %17, ptr %4
  %18 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %19 = load ptr, ptr %ds
  %20 = insertvalue { { ptr, ptr }, { i64 } } %18, ptr %19, 0, 0
  %21 = load ptr, ptr %alloc
  %22 = insertvalue { { ptr, ptr }, { i64 } } %20, ptr %21, 0, 1
  %23 = load i64, ptr %4
  %24 = insertvalue { { ptr, ptr }, { i64 } } %22, i64 %23, 1, 0
  ret { { ptr, ptr }, { i64 } } %24
}

define cc 104 { { ptr, ptr }, { i64 } } @camlInt_ops__sub_imm_HIDE_STAMP(ptr %0, ptr %1, i64 %2)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  br label %L1
L1:
  br label %L237
L237:                                                ; preds = %L1
  %9 = load i64, ptr %4
  store i64 %9, ptr %5
  store ptr @camlInt_ops_data, ptr %6
  %10 = load i64, ptr %6
  %11 = add i64 %10, 0
  %12 = inttoptr i64 %11 to ptr
  %13 = load i64, ptr %12
  store i64 %13, ptr %7
  %14 = load i64, ptr %7
  store i64 %14, ptr %8
  %15 = load i64, ptr %8
  %16 = add i64 %15, -8
  store i64 %16, ptr %8
  %17 = load i64, ptr %8
  store i64 %17, ptr %4
  %18 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %19 = load ptr, ptr %ds
  %20 = insertvalue { { ptr, ptr }, { i64 } } %18, ptr %19, 0, 0
  %21 = load ptr, ptr %alloc
  %22 = insertvalue { { ptr, ptr }, { i64 } } %20, ptr %21, 0, 1
  %23 = load i64, ptr %4
  %24 = insertvalue { { ptr, ptr }, { i64 } } %22, i64 %23, 1, 0
  ret { { ptr, ptr }, { i64 } } %24
}

define cc 104 { { ptr, ptr }, { i64 } } @camlInt_ops__mul_imm_HIDE_STAMP(ptr %0, ptr %1, i64 %2)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  br label %L1
L1:
  br label %L242
L242:                                                ; preds = %L1
  %10 = load i64, ptr %4
  store i64 %10, ptr %5
  store ptr @camlInt_ops_data, ptr %6
  %11 = load i64, ptr %6
  %12 = add i64 %11, 0
  %13 = inttoptr i64 %12 to ptr
  %14 = load i64, ptr %13
  store i64 %14, ptr %7
  %15 = load i64, ptr %7
  store i64 %15, ptr %8
  %16 = load i64, ptr %8
  %17 = shl i64 %16, 2
  store i64 %17, ptr %8
  %18 = load i64, ptr %8
  store i64 %18, ptr %9
  %19 = load i64, ptr %9
  %20 = add i64 %19, -3
  store i64 %20, ptr %9
  %21 = load i64, ptr %9
  store i64 %21, ptr %4
  %22 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %23 = load ptr, ptr %ds
  %24 = insertvalue { { ptr, ptr }, { i64 } } %22, ptr %23, 0, 0
  %25 = load ptr, ptr %alloc
  %26 = insertvalue { { ptr, ptr }, { i64 } } %24, ptr %25, 0, 1
  %27 = load i64, ptr %4
  %28 = insertvalue { { ptr, ptr }, { i64 } } %26, i64 %27, 1, 0
  ret { { ptr, ptr }, { i64 } } %28
}

define cc 104 { { ptr, ptr }, { i64 } } @camlInt_ops__div_imm_HIDE_STAMP(ptr %0, ptr %1, i64 %2)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  br label %L1
L1:
  br label %L248
L248:                                                ; preds = %L1
  %16 = load i64, ptr %4
  store i64 %16, ptr %5
  store ptr @camlInt_ops_data, ptr %6
  %17 = load i64, ptr %6
  %18 = add i64 %17, 0
  %19 = inttoptr i64 %18 to ptr
  %20 = load i64, ptr %19
  store i64 %20, ptr %7
  %21 = load i64, ptr %7
  store i64 %21, ptr %8
  %22 = load i64, ptr %8
  %23 = ashr i64 %22, 1
  store i64 %23, ptr %8
  %24 = load i64, ptr %8
  store i64 %24, ptr %9
  %25 = load i64, ptr %9
  store i64 %25, ptr %10
  %26 = load i64, ptr %10
  %27 = ashr i64 %26, 1
  store i64 %27, ptr %10
  %28 = load i64, ptr %10
  store i64 %28, ptr %11
  %29 = load i64, ptr %11
  %30 = lshr i64 %29, 62
  store i64 %30, ptr %11
  %31 = load i64, ptr %9
  store i64 %31, ptr %12
  %32 = load i64, ptr %12
  %33 = load i64, ptr %11
  %34 = add i64 %32, %33
  store i64 %34, ptr %12
  %35 = load i64, ptr %12
  store i64 %35, ptr %13
  %36 = load i64, ptr %13
  %37 = ashr i64 %36, 2
  store i64 %37, ptr %13
  %38 = load i64, ptr %13
  store i64 %38, ptr %14
  %39 = load i64, ptr %14
  %40 = shl i64 %39, 1
  store i64 %40, ptr %14
  %41 = load i64, ptr %14
  store i64 %41, ptr %15
  %42 = load i64, ptr %15
  %43 = add i64 %42, 1
  store i64 %43, ptr %15
  %44 = load i64, ptr %15
  store i64 %44, ptr %4
  %45 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %46 = load ptr, ptr %ds
  %47 = insertvalue { { ptr, ptr }, { i64 } } %45, ptr %46, 0, 0
  %48 = load ptr, ptr %alloc
  %49 = insertvalue { { ptr, ptr }, { i64 } } %47, ptr %48, 0, 1
  %50 = load i64, ptr %4
  %51 = insertvalue { { ptr, ptr }, { i64 } } %49, i64 %50, 1, 0
  ret { { ptr, ptr }, { i64 } } %51
}

define cc 104 { { ptr, ptr }, { i64 } } @camlInt_ops__mod_imm_HIDE_STAMP(ptr %0, ptr %1, i64 %2)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  br label %L1
L1:
  br label %L259
L259:                                                ; preds = %L1
  %18 = load i64, ptr %4
  store i64 %18, ptr %5
  store ptr @camlInt_ops_data, ptr %6
  %19 = load i64, ptr %6
  %20 = add i64 %19, 0
  %21 = inttoptr i64 %20 to ptr
  %22 = load i64, ptr %21
  store i64 %22, ptr %7
  %23 = load i64, ptr %7
  store i64 %23, ptr %8
  %24 = load i64, ptr %8
  %25 = ashr i64 %24, 1
  store i64 %25, ptr %8
  %26 = load i64, ptr %8
  store i64 %26, ptr %9
  store i64 -4, ptr %10
  %27 = load i64, ptr %9
  store i64 %27, ptr %11
  %28 = load i64, ptr %11
  %29 = ashr i64 %28, 1
  store i64 %29, ptr %11
  %30 = load i64, ptr %11
  store i64 %30, ptr %12
  %31 = load i64, ptr %12
  %32 = lshr i64 %31, 62
  store i64 %32, ptr %12
  %33 = load i64, ptr %9
  store i64 %33, ptr %13
  %34 = load i64, ptr %13
  %35 = load i64, ptr %12
  %36 = add i64 %34, %35
  store i64 %36, ptr %13
  %37 = load i64, ptr %13
  store i64 %37, ptr %14
  %38 = load i64, ptr %14
  %39 = load i64, ptr %10
  %40 = and i64 %38, %39
  store i64 %40, ptr %14
  %41 = load i64, ptr %9
  store i64 %41, ptr %15
  %42 = load i64, ptr %15
  %43 = load i64, ptr %14
  %44 = sub i64 %42, %43
  store i64 %44, ptr %15
  %45 = load i64, ptr %15
  store i64 %45, ptr %16
  %46 = load i64, ptr %16
  %47 = shl i64 %46, 1
  store i64 %47, ptr %16
  %48 = load i64, ptr %16
  store i64 %48, ptr %17
  %49 = load i64, ptr %17
  %50 = add i64 %49, 1
  store i64 %50, ptr %17
  %51 = load i64, ptr %17
  store i64 %51, ptr %4
  %52 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %53 = load ptr, ptr %ds
  %54 = insertvalue { { ptr, ptr }, { i64 } } %52, ptr %53, 0, 0
  %55 = load ptr, ptr %alloc
  %56 = insertvalue { { ptr, ptr }, { i64 } } %54, ptr %55, 0, 1
  %57 = load i64, ptr %4
  %58 = insertvalue { { ptr, ptr }, { i64 } } %56, i64 %57, 1, 0
  ret { { ptr, ptr }, { i64 } } %58
}

define cc 104 { { ptr, ptr }, { i64 } } @camlInt_ops__land_imm_HIDE_STAMP(ptr %0, ptr %1, i64 %2)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  br label %L1
L1:
  br label %L271
L271:                                                ; preds = %L1
  %9 = load i64, ptr %4
  store i64 %9, ptr %5
  store ptr @camlInt_ops_data, ptr %6
  %10 = load i64, ptr %6
  %11 = add i64 %10, 0
  %12 = inttoptr i64 %11 to ptr
  %13 = load i64, ptr %12
  store i64 %13, ptr %7
  %14 = load i64, ptr %7
  store i64 %14, ptr %8
  %15 = load i64, ptr %8
  %16 = and i64 %15, 9
  store i64 %16, ptr %8
  %17 = load i64, ptr %8
  store i64 %17, ptr %4
  %18 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %19 = load ptr, ptr %ds
  %20 = insertvalue { { ptr, ptr }, { i64 } } %18, ptr %19, 0, 0
  %21 = load ptr, ptr %alloc
  %22 = insertvalue { { ptr, ptr }, { i64 } } %20, ptr %21, 0, 1
  %23 = load i64, ptr %4
  %24 = insertvalue { { ptr, ptr }, { i64 } } %22, i64 %23, 1, 0
  ret { { ptr, ptr }, { i64 } } %24
}

define cc 104 { { ptr, ptr }, { i64 } } @camlInt_ops__lor_imm_HIDE_STAMP(ptr %0, ptr %1, i64 %2)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  br label %L1
L1:
  br label %L276
L276:                                                ; preds = %L1
  %9 = load i64, ptr %4
  store i64 %9, ptr %5
  store ptr @camlInt_ops_data, ptr %6
  %10 = load i64, ptr %6
  %11 = add i64 %10, 0
  %12 = inttoptr i64 %11 to ptr
  %13 = load i64, ptr %12
  store i64 %13, ptr %7
  %14 = load i64, ptr %7
  store i64 %14, ptr %8
  %15 = load i64, ptr %8
  %16 = or i64 %15, 9
  store i64 %16, ptr %8
  %17 = load i64, ptr %8
  store i64 %17, ptr %4
  %18 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %19 = load ptr, ptr %ds
  %20 = insertvalue { { ptr, ptr }, { i64 } } %18, ptr %19, 0, 0
  %21 = load ptr, ptr %alloc
  %22 = insertvalue { { ptr, ptr }, { i64 } } %20, ptr %21, 0, 1
  %23 = load i64, ptr %4
  %24 = insertvalue { { ptr, ptr }, { i64 } } %22, i64 %23, 1, 0
  ret { { ptr, ptr }, { i64 } } %24
}

define cc 104 { { ptr, ptr }, { i64 } } @camlInt_ops__lxor_imm_HIDE_STAMP(ptr %0, ptr %1, i64 %2)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  br label %L1
L1:
  br label %L281
L281:                                                ; preds = %L1
  %10 = load i64, ptr %4
  store i64 %10, ptr %5
  store ptr @camlInt_ops_data, ptr %6
  %11 = load i64, ptr %6
  %12 = add i64 %11, 0
  %13 = inttoptr i64 %12 to ptr
  %14 = load i64, ptr %13
  store i64 %14, ptr %7
  %15 = load i64, ptr %7
  store i64 %15, ptr %8
  %16 = load i64, ptr %8
  %17 = xor i64 %16, 9
  store i64 %17, ptr %8
  %18 = load i64, ptr %8
  store i64 %18, ptr %9
  %19 = load i64, ptr %9
  %20 = or i64 %19, 1
  store i64 %20, ptr %9
  %21 = load i64, ptr %9
  store i64 %21, ptr %4
  %22 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %23 = load ptr, ptr %ds
  %24 = insertvalue { { ptr, ptr }, { i64 } } %22, ptr %23, 0, 0
  %25 = load ptr, ptr %alloc
  %26 = insertvalue { { ptr, ptr }, { i64 } } %24, ptr %25, 0, 1
  %27 = load i64, ptr %4
  %28 = insertvalue { { ptr, ptr }, { i64 } } %26, i64 %27, 1, 0
  ret { { ptr, ptr }, { i64 } } %28
}

define cc 104 { { ptr, ptr }, { i64 } } @camlInt_ops__lsl_imm_HIDE_STAMP(ptr %0, ptr %1, i64 %2)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  br label %L1
L1:
  br label %L287
L287:                                                ; preds = %L1
  %10 = load i64, ptr %4
  store i64 %10, ptr %5
  store ptr @camlInt_ops_data, ptr %6
  %11 = load i64, ptr %6
  %12 = add i64 %11, 0
  %13 = inttoptr i64 %12 to ptr
  %14 = load i64, ptr %13
  store i64 %14, ptr %7
  %15 = load i64, ptr %7
  store i64 %15, ptr %8
  %16 = load i64, ptr %8
  %17 = shl i64 %16, 4
  store i64 %17, ptr %8
  %18 = load i64, ptr %8
  store i64 %18, ptr %9
  %19 = load i64, ptr %9
  %20 = add i64 %19, -15
  store i64 %20, ptr %9
  %21 = load i64, ptr %9
  store i64 %21, ptr %4
  %22 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %23 = load ptr, ptr %ds
  %24 = insertvalue { { ptr, ptr }, { i64 } } %22, ptr %23, 0, 0
  %25 = load ptr, ptr %alloc
  %26 = insertvalue { { ptr, ptr }, { i64 } } %24, ptr %25, 0, 1
  %27 = load i64, ptr %4
  %28 = insertvalue { { ptr, ptr }, { i64 } } %26, i64 %27, 1, 0
  ret { { ptr, ptr }, { i64 } } %28
}

define cc 104 { { ptr, ptr }, { i64 } } @camlInt_ops__lsr_imm_HIDE_STAMP(ptr %0, ptr %1, i64 %2)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  br label %L1
L1:
  br label %L293
L293:                                                ; preds = %L1
  %10 = load i64, ptr %4
  store i64 %10, ptr %5
  store ptr @camlInt_ops_data, ptr %6
  %11 = load i64, ptr %6
  %12 = add i64 %11, 0
  %13 = inttoptr i64 %12 to ptr
  %14 = load i64, ptr %13
  store i64 %14, ptr %7
  %15 = load i64, ptr %7
  store i64 %15, ptr %8
  %16 = load i64, ptr %8
  %17 = lshr i64 %16, 4
  store i64 %17, ptr %8
  %18 = load i64, ptr %8
  store i64 %18, ptr %9
  %19 = load i64, ptr %9
  %20 = or i64 %19, 1
  store i64 %20, ptr %9
  %21 = load i64, ptr %9
  store i64 %21, ptr %4
  %22 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %23 = load ptr, ptr %ds
  %24 = insertvalue { { ptr, ptr }, { i64 } } %22, ptr %23, 0, 0
  %25 = load ptr, ptr %alloc
  %26 = insertvalue { { ptr, ptr }, { i64 } } %24, ptr %25, 0, 1
  %27 = load i64, ptr %4
  %28 = insertvalue { { ptr, ptr }, { i64 } } %26, i64 %27, 1, 0
  ret { { ptr, ptr }, { i64 } } %28
}

define cc 104 { { ptr, ptr }, { i64 } } @camlInt_ops__asr_imm_HIDE_STAMP(ptr %0, ptr %1, i64 %2)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  br label %L1
L1:
  br label %L299
L299:                                                ; preds = %L1
  %10 = load i64, ptr %4
  store i64 %10, ptr %5
  store ptr @camlInt_ops_data, ptr %6
  %11 = load i64, ptr %6
  %12 = add i64 %11, 0
  %13 = inttoptr i64 %12 to ptr
  %14 = load i64, ptr %13
  store i64 %14, ptr %7
  %15 = load i64, ptr %7
  store i64 %15, ptr %8
  %16 = load i64, ptr %8
  %17 = ashr i64 %16, 4
  store i64 %17, ptr %8
  %18 = load i64, ptr %8
  store i64 %18, ptr %9
  %19 = load i64, ptr %9
  %20 = or i64 %19, 1
  store i64 %20, ptr %9
  %21 = load i64, ptr %9
  store i64 %21, ptr %4
  %22 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %23 = load ptr, ptr %ds
  %24 = insertvalue { { ptr, ptr }, { i64 } } %22, ptr %23, 0, 0
  %25 = load ptr, ptr %alloc
  %26 = insertvalue { { ptr, ptr }, { i64 } } %24, ptr %25, 0, 1
  %27 = load i64, ptr %4
  %28 = insertvalue { { ptr, ptr }, { i64 } } %26, i64 %27, 1, 0
  ret { { ptr, ptr }, { i64 } } %28
}

define cc 104 { { ptr, ptr }, { i64 } } @camlInt_ops__entry(ptr %0, ptr %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %3 = alloca i64
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  br label %L1
L1:
  br label %L308
L308:                                                ; preds = %L1
  store ptr @camlInt_ops, ptr %5
  %8 = load i64, ptr %5
  store i64 %8, ptr %6
  %9 = load i64, ptr %6
  store i64 %9, ptr %4
  store i64 1, ptr %7
  %10 = load i64, ptr %7
  store i64 %10, ptr %3
  %11 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %12 = load ptr, ptr %ds
  %13 = insertvalue { { ptr, ptr }, { i64 } } %11, ptr %12, 0, 0
  %14 = load ptr, ptr %alloc
  %15 = insertvalue { { ptr, ptr }, { i64 } } %13, ptr %14, 0, 1
  %16 = load i64, ptr %3
  %17 = insertvalue { { ptr, ptr }, { i64 } } %15, i64 %16, 1, 0
  ret { { ptr, ptr }, { i64 } } %17
}

declare i64 @llvm.read_register.i64(metadata)
declare void @llvm.write_register.i64(metadata, i64)

@camlInt_ops_data = external global ptr
@caml_exn_Division_by_zero = external global ptr

@camlInt_ops__data_end = global {  } {  }, align 8
define void @camlInt_ops__code_end() { ret void }
@camlInt_ops__frametable = global {  } {  }, align 8
