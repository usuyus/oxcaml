source_filename = "int_ops.ml"

@camlInt_ops__data_begin = global {  } {  }, align 8
define void @camlInt_ops__code_begin() { ret void }

@camlInt_ops__gc_roots = global { i64 } { i64 0 }, align 8
@.header.camlInt_ops = global { i64 } { i64 25344 }, align 8
@camlInt_ops = global { i64, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr } { i64 9, ptr @camlInt_ops__add_23, ptr @camlInt_ops__sub_24, ptr @camlInt_ops__mul_25, ptr @camlInt_ops__div_26, ptr @camlInt_ops__mod__27, ptr @camlInt_ops__land__28, ptr @camlInt_ops__lor__29, ptr @camlInt_ops__lxor__30, ptr @camlInt_ops__lnot__31, ptr @camlInt_ops__lsl__32, ptr @camlInt_ops__lsr__33, ptr @camlInt_ops__asr__34, ptr @camlInt_ops__add_imm_35, ptr @camlInt_ops__sub_imm_36, ptr @camlInt_ops__mul_imm_37, ptr @camlInt_ops__div_imm_38, ptr @camlInt_ops__mod_imm_39, ptr @camlInt_ops__land_imm_40, ptr @camlInt_ops__lor_imm_41, ptr @camlInt_ops__lxor_imm_42, ptr @camlInt_ops__lsl_imm_43, ptr @camlInt_ops__lsr_imm_44, ptr @camlInt_ops__asr_imm_45 }, align 8
@.header.camlInt_ops__asr_imm_45 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__asr_imm_45 = global { ptr, i64 } { ptr @camlInt_ops__asr_imm_HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__lsr_imm_44 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__lsr_imm_44 = global { ptr, i64 } { ptr @camlInt_ops__lsr_imm_HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__lsl_imm_43 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__lsl_imm_43 = global { ptr, i64 } { ptr @camlInt_ops__lsl_imm_HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__lxor_imm_42 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__lxor_imm_42 = global { ptr, i64 } { ptr @camlInt_ops__lxor_imm_HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__lor_imm_41 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__lor_imm_41 = global { ptr, i64 } { ptr @camlInt_ops__lor_imm_HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__land_imm_40 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__land_imm_40 = global { ptr, i64 } { ptr @camlInt_ops__land_imm_HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__mod_imm_39 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__mod_imm_39 = global { ptr, i64 } { ptr @camlInt_ops__mod_imm_HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__div_imm_38 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__div_imm_38 = global { ptr, i64 } { ptr @camlInt_ops__div_imm_HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__mul_imm_37 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__mul_imm_37 = global { ptr, i64 } { ptr @camlInt_ops__mul_imm_HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__sub_imm_36 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__sub_imm_36 = global { ptr, i64 } { ptr @camlInt_ops__sub_imm_HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__add_imm_35 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__add_imm_35 = global { ptr, i64 } { ptr @camlInt_ops__add_imm_HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__asr__34 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__asr__34 = global { ptr, i64 } { ptr @camlInt_ops__asr__HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__lsr__33 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__lsr__33 = global { ptr, i64 } { ptr @camlInt_ops__lsr__HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__lsl__32 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__lsl__32 = global { ptr, i64 } { ptr @camlInt_ops__lsl__HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__lnot__31 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__lnot__31 = global { ptr, i64 } { ptr @camlInt_ops__lnot__HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__lxor__30 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__lxor__30 = global { ptr, i64 } { ptr @camlInt_ops__lxor__HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__lor__29 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__lor__29 = global { ptr, i64 } { ptr @camlInt_ops__lor__HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__land__28 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__land__28 = global { ptr, i64 } { ptr @camlInt_ops__land__HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__mod__27 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__mod__27 = global { ptr, i64 } { ptr @camlInt_ops__mod__HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__div_26 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__div_26 = global { ptr, i64 } { ptr @camlInt_ops__div_HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__mul_25 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__mul_25 = global { ptr, i64 } { ptr @camlInt_ops__mul_HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__sub_24 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__sub_24 = global { ptr, i64 } { ptr @camlInt_ops__sub_HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlInt_ops__add_23 = global { i64 } { i64 3063 }, align 8
@camlInt_ops__add_23 = global { ptr, i64 } { ptr @camlInt_ops__add_HIDE_STAMP, i64 108086391056891909 }, align 8
define cc 104 { { ptr }, { i64 } } @camlInt_ops__add_HIDE_STAMP(ptr %0, i64 %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %3 = alloca i64
  store i64 %1, ptr %3
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  br label %L1
L1:
  br label %L101
L101:                                                ; preds = %L1
  %12 = load i64, ptr %3
  store i64 %12, ptr %4
  store ptr @camlInt_ops_data, ptr %5
  %13 = load i64, ptr %5
  store i64 %13, ptr %6
  %14 = load i64, ptr %6
  %15 = add i64 %14, 8
  store i64 %15, ptr %6
  %16 = load i64, ptr %6
  %17 = add i64 %16, 0
  %18 = inttoptr i64 %17 to ptr
  %19 = load i64, ptr %18
  store i64 %19, ptr %7
  store ptr @camlInt_ops_data, ptr %8
  %20 = load i64, ptr %8
  %21 = add i64 %20, 0
  %22 = inttoptr i64 %21 to ptr
  %23 = load i64, ptr %22
  store i64 %23, ptr %9
  %24 = load i64, ptr %9
  store i64 %24, ptr %10
  %25 = load i64, ptr %10
  %26 = load i64, ptr %7
  %27 = add i64 %25, %26
  store i64 %27, ptr %10
  %28 = load i64, ptr %10
  store i64 %28, ptr %11
  %29 = load i64, ptr %11
  %30 = add i64 %29, -1
  store i64 %30, ptr %11
  %31 = load i64, ptr %11
  store i64 %31, ptr %3
  %32 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %33 = load ptr, ptr %ds
  %34 = insertvalue { { ptr }, { i64 } } %32, ptr %33, 0, 0
  %35 = load i64, ptr %3
  %36 = insertvalue { { ptr }, { i64 } } %34, i64 %35, 1, 0
  ret { { ptr }, { i64 } } %36
}

define cc 104 { { ptr }, { i64 } } @camlInt_ops__sub_HIDE_STAMP(ptr %0, i64 %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %3 = alloca i64
  store i64 %1, ptr %3
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  br label %L1
L1:
  br label %L109
L109:                                                ; preds = %L1
  %12 = load i64, ptr %3
  store i64 %12, ptr %4
  store ptr @camlInt_ops_data, ptr %5
  %13 = load i64, ptr %5
  store i64 %13, ptr %6
  %14 = load i64, ptr %6
  %15 = add i64 %14, 8
  store i64 %15, ptr %6
  %16 = load i64, ptr %6
  %17 = add i64 %16, 0
  %18 = inttoptr i64 %17 to ptr
  %19 = load i64, ptr %18
  store i64 %19, ptr %7
  store ptr @camlInt_ops_data, ptr %8
  %20 = load i64, ptr %8
  %21 = add i64 %20, 0
  %22 = inttoptr i64 %21 to ptr
  %23 = load i64, ptr %22
  store i64 %23, ptr %9
  %24 = load i64, ptr %9
  store i64 %24, ptr %10
  %25 = load i64, ptr %10
  %26 = load i64, ptr %7
  %27 = sub i64 %25, %26
  store i64 %27, ptr %10
  %28 = load i64, ptr %10
  store i64 %28, ptr %11
  %29 = load i64, ptr %11
  %30 = add i64 %29, 1
  store i64 %30, ptr %11
  %31 = load i64, ptr %11
  store i64 %31, ptr %3
  %32 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %33 = load ptr, ptr %ds
  %34 = insertvalue { { ptr }, { i64 } } %32, ptr %33, 0, 0
  %35 = load i64, ptr %3
  %36 = insertvalue { { ptr }, { i64 } } %34, i64 %35, 1, 0
  ret { { ptr }, { i64 } } %36
}

define cc 104 { { ptr }, { i64 } } @camlInt_ops__mul_HIDE_STAMP(ptr %0, i64 %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %3 = alloca i64
  store i64 %1, ptr %3
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  br label %L1
L1:
  br label %L117
L117:                                                ; preds = %L1
  %14 = load i64, ptr %3
  store i64 %14, ptr %4
  store ptr @camlInt_ops_data, ptr %5
  %15 = load i64, ptr %5
  store i64 %15, ptr %6
  %16 = load i64, ptr %6
  %17 = add i64 %16, 8
  store i64 %17, ptr %6
  %18 = load i64, ptr %6
  %19 = add i64 %18, 0
  %20 = inttoptr i64 %19 to ptr
  %21 = load i64, ptr %20
  store i64 %21, ptr %7
  %22 = load i64, ptr %7
  store i64 %22, ptr %8
  %23 = load i64, ptr %8
  %24 = ashr i64 %23, 1
  store i64 %24, ptr %8
  store ptr @camlInt_ops_data, ptr %9
  %25 = load i64, ptr %9
  %26 = add i64 %25, 0
  %27 = inttoptr i64 %26 to ptr
  %28 = load i64, ptr %27
  store i64 %28, ptr %10
  %29 = load i64, ptr %10
  store i64 %29, ptr %11
  %30 = load i64, ptr %11
  %31 = add i64 %30, -1
  store i64 %31, ptr %11
  %32 = load i64, ptr %11
  store i64 %32, ptr %12
  %33 = load i64, ptr %12
  %34 = load i64, ptr %8
  %35 = mul i64 %33, %34
  store i64 %35, ptr %12
  %36 = load i64, ptr %12
  store i64 %36, ptr %13
  %37 = load i64, ptr %13
  %38 = add i64 %37, 1
  store i64 %38, ptr %13
  %39 = load i64, ptr %13
  store i64 %39, ptr %3
  %40 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %41 = load ptr, ptr %ds
  %42 = insertvalue { { ptr }, { i64 } } %40, ptr %41, 0, 0
  %43 = load i64, ptr %3
  %44 = insertvalue { { ptr }, { i64 } } %42, i64 %43, 1, 0
  ret { { ptr }, { i64 } } %44
}

define cc 104 { { ptr }, { i64 } } @camlInt_ops__div_HIDE_STAMP(ptr %0, i64 %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %3 = alloca i64
  store i64 %1, ptr %3
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  br label %L1
L1:
  br label %L127
L127:                                                ; preds = %L1
  %19 = load i64, ptr %3
  store i64 %19, ptr %5
  store ptr @camlInt_ops_data, ptr %6
  %20 = load i64, ptr %6
  store i64 %20, ptr %7
  %21 = load i64, ptr %7
  %22 = add i64 %21, 8
  store i64 %22, ptr %7
  %23 = load i64, ptr %7
  %24 = add i64 %23, 0
  %25 = inttoptr i64 %24 to ptr
  %26 = load i64, ptr %25
  store i64 %26, ptr %8
  %27 = load i64, ptr %8
  store i64 %27, ptr %9
  %28 = load i64, ptr %9
  %29 = icmp slt i64 %28, 1
  br i1 %29, label %L136, label %30
30:
  %31 = load i64, ptr %9
  %32 = icmp sgt i64 %31, 1
  br i1 %32, label %L136, label %L131
L131:                                                ; preds = %L127
  store i64 1, ptr %10
  %33 = load i64, ptr %10
  store i64 %33, ptr %3
  %34 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %35 = load ptr, ptr %ds
  %36 = insertvalue { { ptr }, { i64 } } %34, ptr %35, 0, 0
  %37 = load i64, ptr %3
  %38 = insertvalue { { ptr }, { i64 } } %36, i64 %37, 1, 0
  ret { { ptr }, { i64 } } %38
L136:                                                ; preds = %L127
  %39 = load i64, ptr %9
  %40 = icmp slt i64 %39, 1
  br i1 %40, label %L138, label %41
41:
  %42 = load i64, ptr %9
  %43 = icmp sgt i64 %42, 1
  br i1 %43, label %L138, label %L149
L138:                                                ; preds = %L136
  %44 = load i64, ptr %9
  store i64 %44, ptr %11
  %45 = load i64, ptr %11
  %46 = ashr i64 %45, 1
  store i64 %46, ptr %11
  store ptr @camlInt_ops_data, ptr %12
  %47 = load i64, ptr %12
  %48 = add i64 %47, 0
  %49 = inttoptr i64 %48 to ptr
  %50 = load i64, ptr %49
  store i64 %50, ptr %13
  %51 = load i64, ptr %13
  store i64 %51, ptr %14
  %52 = load i64, ptr %14
  %53 = ashr i64 %52, 1
  store i64 %53, ptr %14
  %54 = load i64, ptr %14
  store i64 %54, ptr %3
  %55 = load i64, ptr %11
  store i64 %55, ptr %4
  %56 = load i64, ptr %3
  %57 = load i64, ptr %4
  %58 = sdiv i64 %56, %57
  store i64 %58, ptr %3
  %59 = load i64, ptr %3
  store i64 %59, ptr %15
  %60 = load i64, ptr %15
  store i64 %60, ptr %16
  %61 = load i64, ptr %16
  %62 = shl i64 %61, 1
  store i64 %62, ptr %16
  %63 = load i64, ptr %16
  store i64 %63, ptr %17
  %64 = load i64, ptr %17
  %65 = add i64 %64, 1
  store i64 %65, ptr %17
  %66 = load i64, ptr %17
  store i64 %66, ptr %3
  %67 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %68 = load ptr, ptr %ds
  %69 = insertvalue { { ptr }, { i64 } } %67, ptr %68, 0, 0
  %70 = load i64, ptr %3
  %71 = insertvalue { { ptr }, { i64 } } %69, i64 %70, 1, 0
  ret { { ptr }, { i64 } } %71
L149:                                                ; preds = %L136
  store ptr @caml_exn_Division_by_zero, ptr %18
  %72 = load i64, ptr %18
  store i64 %72, ptr %3
  %73 = load i64, ptr %ds
  %74 = add i64 %73, 48
  %75 = inttoptr i64 %74 to ptr
  %76 = load i64, ptr %75
  %77 = inttoptr i64 %76 to ptr
  %78 = load i64, ptr %77
  %79 = add i64 %76, 8
  %80 = inttoptr i64 %79 to ptr
  %81 = load ptr, ptr %80
  %82 = load i64, ptr %3
  %83 = add i64 %76, 16
  store i64 %78, ptr %75
  call void @llvm.write_register.i64(metadata !{!"rsp\00"}, i64 %83)
  call void asm sideeffect "movq $0, %rax; jmpq *$1", "r,r,~{rax}"(i64 %82, ptr %81)
  unreachable
}

define cc 104 { { ptr }, { i64 } } @camlInt_ops__mod__HIDE_STAMP(ptr %0, i64 %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %3 = alloca i64
  store i64 %1, ptr %3
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  br label %L1
L1:
  br label %L154
L154:                                                ; preds = %L1
  %19 = load i64, ptr %3
  store i64 %19, ptr %6
  store ptr @camlInt_ops_data, ptr %7
  %20 = load i64, ptr %7
  store i64 %20, ptr %8
  %21 = load i64, ptr %8
  %22 = add i64 %21, 8
  store i64 %22, ptr %8
  %23 = load i64, ptr %8
  %24 = add i64 %23, 0
  %25 = inttoptr i64 %24 to ptr
  %26 = load i64, ptr %25
  store i64 %26, ptr %9
  %27 = load i64, ptr %9
  store i64 %27, ptr %10
  %28 = load i64, ptr %10
  %29 = icmp slt i64 %28, 1
  br i1 %29, label %L161, label %30
30:
  %31 = load i64, ptr %10
  %32 = icmp sgt i64 %31, 1
  br i1 %32, label %L161, label %L172
L161:                                                ; preds = %L154
  %33 = load i64, ptr %10
  store i64 %33, ptr %11
  %34 = load i64, ptr %11
  %35 = ashr i64 %34, 1
  store i64 %35, ptr %11
  store ptr @camlInt_ops_data, ptr %12
  %36 = load i64, ptr %12
  %37 = add i64 %36, 0
  %38 = inttoptr i64 %37 to ptr
  %39 = load i64, ptr %38
  store i64 %39, ptr %13
  %40 = load i64, ptr %13
  store i64 %40, ptr %14
  %41 = load i64, ptr %14
  %42 = ashr i64 %41, 1
  store i64 %42, ptr %14
  %43 = load i64, ptr %14
  store i64 %43, ptr %3
  %44 = load i64, ptr %11
  store i64 %44, ptr %5
  %45 = load i64, ptr %3
  %46 = load i64, ptr %5
  %47 = srem i64 %45, %46
  store i64 %47, ptr %4
  %48 = load i64, ptr %4
  store i64 %48, ptr %15
  %49 = load i64, ptr %15
  store i64 %49, ptr %16
  %50 = load i64, ptr %16
  %51 = shl i64 %50, 1
  store i64 %51, ptr %16
  %52 = load i64, ptr %16
  store i64 %52, ptr %17
  %53 = load i64, ptr %17
  %54 = add i64 %53, 1
  store i64 %54, ptr %17
  %55 = load i64, ptr %17
  store i64 %55, ptr %3
  %56 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %57 = load ptr, ptr %ds
  %58 = insertvalue { { ptr }, { i64 } } %56, ptr %57, 0, 0
  %59 = load i64, ptr %3
  %60 = insertvalue { { ptr }, { i64 } } %58, i64 %59, 1, 0
  ret { { ptr }, { i64 } } %60
L172:                                                ; preds = %L154
  store ptr @caml_exn_Division_by_zero, ptr %18
  %61 = load i64, ptr %18
  store i64 %61, ptr %3
  %62 = load i64, ptr %ds
  %63 = add i64 %62, 48
  %64 = inttoptr i64 %63 to ptr
  %65 = load i64, ptr %64
  %66 = inttoptr i64 %65 to ptr
  %67 = load i64, ptr %66
  %68 = add i64 %65, 8
  %69 = inttoptr i64 %68 to ptr
  %70 = load ptr, ptr %69
  %71 = load i64, ptr %3
  %72 = add i64 %65, 16
  store i64 %67, ptr %64
  call void @llvm.write_register.i64(metadata !{!"rsp\00"}, i64 %72)
  call void asm sideeffect "movq $0, %rax; jmpq *$1", "r,r,~{rax}"(i64 %71, ptr %70)
  unreachable
}

define cc 104 { { ptr }, { i64 } } @camlInt_ops__land__HIDE_STAMP(ptr %0, i64 %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %3 = alloca i64
  store i64 %1, ptr %3
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  br label %L1
L1:
  br label %L176
L176:                                                ; preds = %L1
  %11 = load i64, ptr %3
  store i64 %11, ptr %4
  store ptr @camlInt_ops_data, ptr %5
  %12 = load i64, ptr %5
  store i64 %12, ptr %6
  %13 = load i64, ptr %6
  %14 = add i64 %13, 8
  store i64 %14, ptr %6
  %15 = load i64, ptr %6
  %16 = add i64 %15, 0
  %17 = inttoptr i64 %16 to ptr
  %18 = load i64, ptr %17
  store i64 %18, ptr %7
  store ptr @camlInt_ops_data, ptr %8
  %19 = load i64, ptr %8
  %20 = add i64 %19, 0
  %21 = inttoptr i64 %20 to ptr
  %22 = load i64, ptr %21
  store i64 %22, ptr %9
  %23 = load i64, ptr %9
  store i64 %23, ptr %10
  %24 = load i64, ptr %10
  %25 = load i64, ptr %7
  %26 = and i64 %24, %25
  store i64 %26, ptr %10
  %27 = load i64, ptr %10
  store i64 %27, ptr %3
  %28 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %29 = load ptr, ptr %ds
  %30 = insertvalue { { ptr }, { i64 } } %28, ptr %29, 0, 0
  %31 = load i64, ptr %3
  %32 = insertvalue { { ptr }, { i64 } } %30, i64 %31, 1, 0
  ret { { ptr }, { i64 } } %32
}

define cc 104 { { ptr }, { i64 } } @camlInt_ops__lor__HIDE_STAMP(ptr %0, i64 %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %3 = alloca i64
  store i64 %1, ptr %3
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  br label %L1
L1:
  br label %L183
L183:                                                ; preds = %L1
  %11 = load i64, ptr %3
  store i64 %11, ptr %4
  store ptr @camlInt_ops_data, ptr %5
  %12 = load i64, ptr %5
  store i64 %12, ptr %6
  %13 = load i64, ptr %6
  %14 = add i64 %13, 8
  store i64 %14, ptr %6
  %15 = load i64, ptr %6
  %16 = add i64 %15, 0
  %17 = inttoptr i64 %16 to ptr
  %18 = load i64, ptr %17
  store i64 %18, ptr %7
  store ptr @camlInt_ops_data, ptr %8
  %19 = load i64, ptr %8
  %20 = add i64 %19, 0
  %21 = inttoptr i64 %20 to ptr
  %22 = load i64, ptr %21
  store i64 %22, ptr %9
  %23 = load i64, ptr %9
  store i64 %23, ptr %10
  %24 = load i64, ptr %10
  %25 = load i64, ptr %7
  %26 = or i64 %24, %25
  store i64 %26, ptr %10
  %27 = load i64, ptr %10
  store i64 %27, ptr %3
  %28 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %29 = load ptr, ptr %ds
  %30 = insertvalue { { ptr }, { i64 } } %28, ptr %29, 0, 0
  %31 = load i64, ptr %3
  %32 = insertvalue { { ptr }, { i64 } } %30, i64 %31, 1, 0
  ret { { ptr }, { i64 } } %32
}

define cc 104 { { ptr }, { i64 } } @camlInt_ops__lxor__HIDE_STAMP(ptr %0, i64 %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %3 = alloca i64
  store i64 %1, ptr %3
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  br label %L1
L1:
  br label %L190
L190:                                                ; preds = %L1
  %12 = load i64, ptr %3
  store i64 %12, ptr %4
  store ptr @camlInt_ops_data, ptr %5
  %13 = load i64, ptr %5
  store i64 %13, ptr %6
  %14 = load i64, ptr %6
  %15 = add i64 %14, 8
  store i64 %15, ptr %6
  %16 = load i64, ptr %6
  %17 = add i64 %16, 0
  %18 = inttoptr i64 %17 to ptr
  %19 = load i64, ptr %18
  store i64 %19, ptr %7
  store ptr @camlInt_ops_data, ptr %8
  %20 = load i64, ptr %8
  %21 = add i64 %20, 0
  %22 = inttoptr i64 %21 to ptr
  %23 = load i64, ptr %22
  store i64 %23, ptr %9
  %24 = load i64, ptr %9
  store i64 %24, ptr %10
  %25 = load i64, ptr %10
  %26 = load i64, ptr %7
  %27 = xor i64 %25, %26
  store i64 %27, ptr %10
  %28 = load i64, ptr %10
  store i64 %28, ptr %11
  %29 = load i64, ptr %11
  %30 = or i64 %29, 1
  store i64 %30, ptr %11
  %31 = load i64, ptr %11
  store i64 %31, ptr %3
  %32 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %33 = load ptr, ptr %ds
  %34 = insertvalue { { ptr }, { i64 } } %32, ptr %33, 0, 0
  %35 = load i64, ptr %3
  %36 = insertvalue { { ptr }, { i64 } } %34, i64 %35, 1, 0
  ret { { ptr }, { i64 } } %36
}

define cc 104 { { ptr }, { i64 } } @camlInt_ops__lnot__HIDE_STAMP(ptr %0, i64 %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %3 = alloca i64
  store i64 %1, ptr %3
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  br label %L1
L1:
  br label %L198
L198:                                                ; preds = %L1
  %9 = load i64, ptr %3
  store i64 %9, ptr %4
  store ptr @camlInt_ops_data, ptr %5
  %10 = load i64, ptr %5
  %11 = add i64 %10, 0
  %12 = inttoptr i64 %11 to ptr
  %13 = load i64, ptr %12
  store i64 %13, ptr %6
  %14 = load i64, ptr %6
  store i64 %14, ptr %7
  %15 = load i64, ptr %7
  %16 = xor i64 %15, -1
  store i64 %16, ptr %7
  %17 = load i64, ptr %7
  store i64 %17, ptr %8
  %18 = load i64, ptr %8
  %19 = or i64 %18, 1
  store i64 %19, ptr %8
  %20 = load i64, ptr %8
  store i64 %20, ptr %3
  %21 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %22 = load ptr, ptr %ds
  %23 = insertvalue { { ptr }, { i64 } } %21, ptr %22, 0, 0
  %24 = load i64, ptr %3
  %25 = insertvalue { { ptr }, { i64 } } %23, i64 %24, 1, 0
  ret { { ptr }, { i64 } } %25
}

define cc 104 { { ptr }, { i64 } } @camlInt_ops__lsl__HIDE_STAMP(ptr %0, i64 %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %3 = alloca i64
  store i64 %1, ptr %3
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  br label %L1
L1:
  br label %L204
L204:                                                ; preds = %L1
  %15 = load i64, ptr %3
  store i64 %15, ptr %5
  store ptr @camlInt_ops_data, ptr %6
  %16 = load i64, ptr %6
  store i64 %16, ptr %7
  %17 = load i64, ptr %7
  %18 = add i64 %17, 8
  store i64 %18, ptr %7
  %19 = load i64, ptr %7
  %20 = add i64 %19, 0
  %21 = inttoptr i64 %20 to ptr
  %22 = load i64, ptr %21
  store i64 %22, ptr %8
  %23 = load i64, ptr %8
  store i64 %23, ptr %9
  %24 = load i64, ptr %9
  %25 = ashr i64 %24, 1
  store i64 %25, ptr %9
  store ptr @camlInt_ops_data, ptr %10
  %26 = load i64, ptr %10
  %27 = add i64 %26, 0
  %28 = inttoptr i64 %27 to ptr
  %29 = load i64, ptr %28
  store i64 %29, ptr %11
  %30 = load i64, ptr %11
  store i64 %30, ptr %12
  %31 = load i64, ptr %12
  %32 = add i64 %31, -1
  store i64 %32, ptr %12
  %33 = load i64, ptr %12
  store i64 %33, ptr %13
  %34 = load i64, ptr %9
  store i64 %34, ptr %4
  %35 = load i64, ptr %13
  %36 = load i64, ptr %4
  %37 = shl i64 %35, %36
  store i64 %37, ptr %13
  %38 = load i64, ptr %13
  store i64 %38, ptr %14
  %39 = load i64, ptr %14
  %40 = add i64 %39, 1
  store i64 %40, ptr %14
  %41 = load i64, ptr %14
  store i64 %41, ptr %3
  %42 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %43 = load ptr, ptr %ds
  %44 = insertvalue { { ptr }, { i64 } } %42, ptr %43, 0, 0
  %45 = load i64, ptr %3
  %46 = insertvalue { { ptr }, { i64 } } %44, i64 %45, 1, 0
  ret { { ptr }, { i64 } } %46
}

define cc 104 { { ptr }, { i64 } } @camlInt_ops__lsr__HIDE_STAMP(ptr %0, i64 %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %3 = alloca i64
  store i64 %1, ptr %3
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  br label %L1
L1:
  br label %L214
L214:                                                ; preds = %L1
  %14 = load i64, ptr %3
  store i64 %14, ptr %5
  store ptr @camlInt_ops_data, ptr %6
  %15 = load i64, ptr %6
  store i64 %15, ptr %7
  %16 = load i64, ptr %7
  %17 = add i64 %16, 8
  store i64 %17, ptr %7
  %18 = load i64, ptr %7
  %19 = add i64 %18, 0
  %20 = inttoptr i64 %19 to ptr
  %21 = load i64, ptr %20
  store i64 %21, ptr %8
  %22 = load i64, ptr %8
  store i64 %22, ptr %9
  %23 = load i64, ptr %9
  %24 = ashr i64 %23, 1
  store i64 %24, ptr %9
  store ptr @camlInt_ops_data, ptr %10
  %25 = load i64, ptr %10
  %26 = add i64 %25, 0
  %27 = inttoptr i64 %26 to ptr
  %28 = load i64, ptr %27
  store i64 %28, ptr %11
  %29 = load i64, ptr %11
  store i64 %29, ptr %12
  %30 = load i64, ptr %9
  store i64 %30, ptr %4
  %31 = load i64, ptr %12
  %32 = load i64, ptr %4
  %33 = lshr i64 %31, %32
  store i64 %33, ptr %12
  %34 = load i64, ptr %12
  store i64 %34, ptr %13
  %35 = load i64, ptr %13
  %36 = or i64 %35, 1
  store i64 %36, ptr %13
  %37 = load i64, ptr %13
  store i64 %37, ptr %3
  %38 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %39 = load ptr, ptr %ds
  %40 = insertvalue { { ptr }, { i64 } } %38, ptr %39, 0, 0
  %41 = load i64, ptr %3
  %42 = insertvalue { { ptr }, { i64 } } %40, i64 %41, 1, 0
  ret { { ptr }, { i64 } } %42
}

define cc 104 { { ptr }, { i64 } } @camlInt_ops__asr__HIDE_STAMP(ptr %0, i64 %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %3 = alloca i64
  store i64 %1, ptr %3
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  br label %L1
L1:
  br label %L223
L223:                                                ; preds = %L1
  %14 = load i64, ptr %3
  store i64 %14, ptr %5
  store ptr @camlInt_ops_data, ptr %6
  %15 = load i64, ptr %6
  store i64 %15, ptr %7
  %16 = load i64, ptr %7
  %17 = add i64 %16, 8
  store i64 %17, ptr %7
  %18 = load i64, ptr %7
  %19 = add i64 %18, 0
  %20 = inttoptr i64 %19 to ptr
  %21 = load i64, ptr %20
  store i64 %21, ptr %8
  %22 = load i64, ptr %8
  store i64 %22, ptr %9
  %23 = load i64, ptr %9
  %24 = ashr i64 %23, 1
  store i64 %24, ptr %9
  store ptr @camlInt_ops_data, ptr %10
  %25 = load i64, ptr %10
  %26 = add i64 %25, 0
  %27 = inttoptr i64 %26 to ptr
  %28 = load i64, ptr %27
  store i64 %28, ptr %11
  %29 = load i64, ptr %11
  store i64 %29, ptr %12
  %30 = load i64, ptr %9
  store i64 %30, ptr %4
  %31 = load i64, ptr %12
  %32 = load i64, ptr %4
  %33 = ashr i64 %31, %32
  store i64 %33, ptr %12
  %34 = load i64, ptr %12
  store i64 %34, ptr %13
  %35 = load i64, ptr %13
  %36 = or i64 %35, 1
  store i64 %36, ptr %13
  %37 = load i64, ptr %13
  store i64 %37, ptr %3
  %38 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %39 = load ptr, ptr %ds
  %40 = insertvalue { { ptr }, { i64 } } %38, ptr %39, 0, 0
  %41 = load i64, ptr %3
  %42 = insertvalue { { ptr }, { i64 } } %40, i64 %41, 1, 0
  ret { { ptr }, { i64 } } %42
}

define cc 104 { { ptr }, { i64 } } @camlInt_ops__add_imm_HIDE_STAMP(ptr %0, i64 %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %3 = alloca i64
  store i64 %1, ptr %3
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  br label %L1
L1:
  br label %L232
L232:                                                ; preds = %L1
  %8 = load i64, ptr %3
  store i64 %8, ptr %4
  store ptr @camlInt_ops_data, ptr %5
  %9 = load i64, ptr %5
  %10 = add i64 %9, 0
  %11 = inttoptr i64 %10 to ptr
  %12 = load i64, ptr %11
  store i64 %12, ptr %6
  %13 = load i64, ptr %6
  store i64 %13, ptr %7
  %14 = load i64, ptr %7
  %15 = add i64 %14, 8
  store i64 %15, ptr %7
  %16 = load i64, ptr %7
  store i64 %16, ptr %3
  %17 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %18 = load ptr, ptr %ds
  %19 = insertvalue { { ptr }, { i64 } } %17, ptr %18, 0, 0
  %20 = load i64, ptr %3
  %21 = insertvalue { { ptr }, { i64 } } %19, i64 %20, 1, 0
  ret { { ptr }, { i64 } } %21
}

define cc 104 { { ptr }, { i64 } } @camlInt_ops__sub_imm_HIDE_STAMP(ptr %0, i64 %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %3 = alloca i64
  store i64 %1, ptr %3
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  br label %L1
L1:
  br label %L237
L237:                                                ; preds = %L1
  %8 = load i64, ptr %3
  store i64 %8, ptr %4
  store ptr @camlInt_ops_data, ptr %5
  %9 = load i64, ptr %5
  %10 = add i64 %9, 0
  %11 = inttoptr i64 %10 to ptr
  %12 = load i64, ptr %11
  store i64 %12, ptr %6
  %13 = load i64, ptr %6
  store i64 %13, ptr %7
  %14 = load i64, ptr %7
  %15 = add i64 %14, -8
  store i64 %15, ptr %7
  %16 = load i64, ptr %7
  store i64 %16, ptr %3
  %17 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %18 = load ptr, ptr %ds
  %19 = insertvalue { { ptr }, { i64 } } %17, ptr %18, 0, 0
  %20 = load i64, ptr %3
  %21 = insertvalue { { ptr }, { i64 } } %19, i64 %20, 1, 0
  ret { { ptr }, { i64 } } %21
}

define cc 104 { { ptr }, { i64 } } @camlInt_ops__mul_imm_HIDE_STAMP(ptr %0, i64 %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %3 = alloca i64
  store i64 %1, ptr %3
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  br label %L1
L1:
  br label %L242
L242:                                                ; preds = %L1
  %9 = load i64, ptr %3
  store i64 %9, ptr %4
  store ptr @camlInt_ops_data, ptr %5
  %10 = load i64, ptr %5
  %11 = add i64 %10, 0
  %12 = inttoptr i64 %11 to ptr
  %13 = load i64, ptr %12
  store i64 %13, ptr %6
  %14 = load i64, ptr %6
  store i64 %14, ptr %7
  %15 = load i64, ptr %7
  %16 = shl i64 %15, 2
  store i64 %16, ptr %7
  %17 = load i64, ptr %7
  store i64 %17, ptr %8
  %18 = load i64, ptr %8
  %19 = add i64 %18, -3
  store i64 %19, ptr %8
  %20 = load i64, ptr %8
  store i64 %20, ptr %3
  %21 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %22 = load ptr, ptr %ds
  %23 = insertvalue { { ptr }, { i64 } } %21, ptr %22, 0, 0
  %24 = load i64, ptr %3
  %25 = insertvalue { { ptr }, { i64 } } %23, i64 %24, 1, 0
  ret { { ptr }, { i64 } } %25
}

define cc 104 { { ptr }, { i64 } } @camlInt_ops__div_imm_HIDE_STAMP(ptr %0, i64 %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %3 = alloca i64
  store i64 %1, ptr %3
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  br label %L1
L1:
  br label %L248
L248:                                                ; preds = %L1
  %15 = load i64, ptr %3
  store i64 %15, ptr %4
  store ptr @camlInt_ops_data, ptr %5
  %16 = load i64, ptr %5
  %17 = add i64 %16, 0
  %18 = inttoptr i64 %17 to ptr
  %19 = load i64, ptr %18
  store i64 %19, ptr %6
  %20 = load i64, ptr %6
  store i64 %20, ptr %7
  %21 = load i64, ptr %7
  %22 = ashr i64 %21, 1
  store i64 %22, ptr %7
  %23 = load i64, ptr %7
  store i64 %23, ptr %8
  %24 = load i64, ptr %8
  store i64 %24, ptr %9
  %25 = load i64, ptr %9
  %26 = ashr i64 %25, 1
  store i64 %26, ptr %9
  %27 = load i64, ptr %9
  store i64 %27, ptr %10
  %28 = load i64, ptr %10
  %29 = lshr i64 %28, 62
  store i64 %29, ptr %10
  %30 = load i64, ptr %8
  store i64 %30, ptr %11
  %31 = load i64, ptr %11
  %32 = load i64, ptr %10
  %33 = add i64 %31, %32
  store i64 %33, ptr %11
  %34 = load i64, ptr %11
  store i64 %34, ptr %12
  %35 = load i64, ptr %12
  %36 = ashr i64 %35, 2
  store i64 %36, ptr %12
  %37 = load i64, ptr %12
  store i64 %37, ptr %13
  %38 = load i64, ptr %13
  %39 = shl i64 %38, 1
  store i64 %39, ptr %13
  %40 = load i64, ptr %13
  store i64 %40, ptr %14
  %41 = load i64, ptr %14
  %42 = add i64 %41, 1
  store i64 %42, ptr %14
  %43 = load i64, ptr %14
  store i64 %43, ptr %3
  %44 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %45 = load ptr, ptr %ds
  %46 = insertvalue { { ptr }, { i64 } } %44, ptr %45, 0, 0
  %47 = load i64, ptr %3
  %48 = insertvalue { { ptr }, { i64 } } %46, i64 %47, 1, 0
  ret { { ptr }, { i64 } } %48
}

define cc 104 { { ptr }, { i64 } } @camlInt_ops__mod_imm_HIDE_STAMP(ptr %0, i64 %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %3 = alloca i64
  store i64 %1, ptr %3
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  br label %L1
L1:
  br label %L259
L259:                                                ; preds = %L1
  %17 = load i64, ptr %3
  store i64 %17, ptr %4
  store ptr @camlInt_ops_data, ptr %5
  %18 = load i64, ptr %5
  %19 = add i64 %18, 0
  %20 = inttoptr i64 %19 to ptr
  %21 = load i64, ptr %20
  store i64 %21, ptr %6
  %22 = load i64, ptr %6
  store i64 %22, ptr %7
  %23 = load i64, ptr %7
  %24 = ashr i64 %23, 1
  store i64 %24, ptr %7
  %25 = load i64, ptr %7
  store i64 %25, ptr %8
  store i64 -4, ptr %9
  %26 = load i64, ptr %8
  store i64 %26, ptr %10
  %27 = load i64, ptr %10
  %28 = ashr i64 %27, 1
  store i64 %28, ptr %10
  %29 = load i64, ptr %10
  store i64 %29, ptr %11
  %30 = load i64, ptr %11
  %31 = lshr i64 %30, 62
  store i64 %31, ptr %11
  %32 = load i64, ptr %8
  store i64 %32, ptr %12
  %33 = load i64, ptr %12
  %34 = load i64, ptr %11
  %35 = add i64 %33, %34
  store i64 %35, ptr %12
  %36 = load i64, ptr %12
  store i64 %36, ptr %13
  %37 = load i64, ptr %13
  %38 = load i64, ptr %9
  %39 = and i64 %37, %38
  store i64 %39, ptr %13
  %40 = load i64, ptr %8
  store i64 %40, ptr %14
  %41 = load i64, ptr %14
  %42 = load i64, ptr %13
  %43 = sub i64 %41, %42
  store i64 %43, ptr %14
  %44 = load i64, ptr %14
  store i64 %44, ptr %15
  %45 = load i64, ptr %15
  %46 = shl i64 %45, 1
  store i64 %46, ptr %15
  %47 = load i64, ptr %15
  store i64 %47, ptr %16
  %48 = load i64, ptr %16
  %49 = add i64 %48, 1
  store i64 %49, ptr %16
  %50 = load i64, ptr %16
  store i64 %50, ptr %3
  %51 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %52 = load ptr, ptr %ds
  %53 = insertvalue { { ptr }, { i64 } } %51, ptr %52, 0, 0
  %54 = load i64, ptr %3
  %55 = insertvalue { { ptr }, { i64 } } %53, i64 %54, 1, 0
  ret { { ptr }, { i64 } } %55
}

define cc 104 { { ptr }, { i64 } } @camlInt_ops__land_imm_HIDE_STAMP(ptr %0, i64 %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %3 = alloca i64
  store i64 %1, ptr %3
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  br label %L1
L1:
  br label %L271
L271:                                                ; preds = %L1
  %8 = load i64, ptr %3
  store i64 %8, ptr %4
  store ptr @camlInt_ops_data, ptr %5
  %9 = load i64, ptr %5
  %10 = add i64 %9, 0
  %11 = inttoptr i64 %10 to ptr
  %12 = load i64, ptr %11
  store i64 %12, ptr %6
  %13 = load i64, ptr %6
  store i64 %13, ptr %7
  %14 = load i64, ptr %7
  %15 = and i64 %14, 9
  store i64 %15, ptr %7
  %16 = load i64, ptr %7
  store i64 %16, ptr %3
  %17 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %18 = load ptr, ptr %ds
  %19 = insertvalue { { ptr }, { i64 } } %17, ptr %18, 0, 0
  %20 = load i64, ptr %3
  %21 = insertvalue { { ptr }, { i64 } } %19, i64 %20, 1, 0
  ret { { ptr }, { i64 } } %21
}

define cc 104 { { ptr }, { i64 } } @camlInt_ops__lor_imm_HIDE_STAMP(ptr %0, i64 %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %3 = alloca i64
  store i64 %1, ptr %3
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  br label %L1
L1:
  br label %L276
L276:                                                ; preds = %L1
  %8 = load i64, ptr %3
  store i64 %8, ptr %4
  store ptr @camlInt_ops_data, ptr %5
  %9 = load i64, ptr %5
  %10 = add i64 %9, 0
  %11 = inttoptr i64 %10 to ptr
  %12 = load i64, ptr %11
  store i64 %12, ptr %6
  %13 = load i64, ptr %6
  store i64 %13, ptr %7
  %14 = load i64, ptr %7
  %15 = or i64 %14, 9
  store i64 %15, ptr %7
  %16 = load i64, ptr %7
  store i64 %16, ptr %3
  %17 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %18 = load ptr, ptr %ds
  %19 = insertvalue { { ptr }, { i64 } } %17, ptr %18, 0, 0
  %20 = load i64, ptr %3
  %21 = insertvalue { { ptr }, { i64 } } %19, i64 %20, 1, 0
  ret { { ptr }, { i64 } } %21
}

define cc 104 { { ptr }, { i64 } } @camlInt_ops__lxor_imm_HIDE_STAMP(ptr %0, i64 %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %3 = alloca i64
  store i64 %1, ptr %3
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  br label %L1
L1:
  br label %L281
L281:                                                ; preds = %L1
  %9 = load i64, ptr %3
  store i64 %9, ptr %4
  store ptr @camlInt_ops_data, ptr %5
  %10 = load i64, ptr %5
  %11 = add i64 %10, 0
  %12 = inttoptr i64 %11 to ptr
  %13 = load i64, ptr %12
  store i64 %13, ptr %6
  %14 = load i64, ptr %6
  store i64 %14, ptr %7
  %15 = load i64, ptr %7
  %16 = xor i64 %15, 9
  store i64 %16, ptr %7
  %17 = load i64, ptr %7
  store i64 %17, ptr %8
  %18 = load i64, ptr %8
  %19 = or i64 %18, 1
  store i64 %19, ptr %8
  %20 = load i64, ptr %8
  store i64 %20, ptr %3
  %21 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %22 = load ptr, ptr %ds
  %23 = insertvalue { { ptr }, { i64 } } %21, ptr %22, 0, 0
  %24 = load i64, ptr %3
  %25 = insertvalue { { ptr }, { i64 } } %23, i64 %24, 1, 0
  ret { { ptr }, { i64 } } %25
}

define cc 104 { { ptr }, { i64 } } @camlInt_ops__lsl_imm_HIDE_STAMP(ptr %0, i64 %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %3 = alloca i64
  store i64 %1, ptr %3
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  br label %L1
L1:
  br label %L287
L287:                                                ; preds = %L1
  %9 = load i64, ptr %3
  store i64 %9, ptr %4
  store ptr @camlInt_ops_data, ptr %5
  %10 = load i64, ptr %5
  %11 = add i64 %10, 0
  %12 = inttoptr i64 %11 to ptr
  %13 = load i64, ptr %12
  store i64 %13, ptr %6
  %14 = load i64, ptr %6
  store i64 %14, ptr %7
  %15 = load i64, ptr %7
  %16 = shl i64 %15, 4
  store i64 %16, ptr %7
  %17 = load i64, ptr %7
  store i64 %17, ptr %8
  %18 = load i64, ptr %8
  %19 = add i64 %18, -15
  store i64 %19, ptr %8
  %20 = load i64, ptr %8
  store i64 %20, ptr %3
  %21 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %22 = load ptr, ptr %ds
  %23 = insertvalue { { ptr }, { i64 } } %21, ptr %22, 0, 0
  %24 = load i64, ptr %3
  %25 = insertvalue { { ptr }, { i64 } } %23, i64 %24, 1, 0
  ret { { ptr }, { i64 } } %25
}

define cc 104 { { ptr }, { i64 } } @camlInt_ops__lsr_imm_HIDE_STAMP(ptr %0, i64 %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %3 = alloca i64
  store i64 %1, ptr %3
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  br label %L1
L1:
  br label %L293
L293:                                                ; preds = %L1
  %9 = load i64, ptr %3
  store i64 %9, ptr %4
  store ptr @camlInt_ops_data, ptr %5
  %10 = load i64, ptr %5
  %11 = add i64 %10, 0
  %12 = inttoptr i64 %11 to ptr
  %13 = load i64, ptr %12
  store i64 %13, ptr %6
  %14 = load i64, ptr %6
  store i64 %14, ptr %7
  %15 = load i64, ptr %7
  %16 = lshr i64 %15, 4
  store i64 %16, ptr %7
  %17 = load i64, ptr %7
  store i64 %17, ptr %8
  %18 = load i64, ptr %8
  %19 = or i64 %18, 1
  store i64 %19, ptr %8
  %20 = load i64, ptr %8
  store i64 %20, ptr %3
  %21 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %22 = load ptr, ptr %ds
  %23 = insertvalue { { ptr }, { i64 } } %21, ptr %22, 0, 0
  %24 = load i64, ptr %3
  %25 = insertvalue { { ptr }, { i64 } } %23, i64 %24, 1, 0
  ret { { ptr }, { i64 } } %25
}

define cc 104 { { ptr }, { i64 } } @camlInt_ops__asr_imm_HIDE_STAMP(ptr %0, i64 %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %3 = alloca i64
  store i64 %1, ptr %3
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  br label %L1
L1:
  br label %L299
L299:                                                ; preds = %L1
  %9 = load i64, ptr %3
  store i64 %9, ptr %4
  store ptr @camlInt_ops_data, ptr %5
  %10 = load i64, ptr %5
  %11 = add i64 %10, 0
  %12 = inttoptr i64 %11 to ptr
  %13 = load i64, ptr %12
  store i64 %13, ptr %6
  %14 = load i64, ptr %6
  store i64 %14, ptr %7
  %15 = load i64, ptr %7
  %16 = ashr i64 %15, 4
  store i64 %16, ptr %7
  %17 = load i64, ptr %7
  store i64 %17, ptr %8
  %18 = load i64, ptr %8
  %19 = or i64 %18, 1
  store i64 %19, ptr %8
  %20 = load i64, ptr %8
  store i64 %20, ptr %3
  %21 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %22 = load ptr, ptr %ds
  %23 = insertvalue { { ptr }, { i64 } } %21, ptr %22, 0, 0
  %24 = load i64, ptr %3
  %25 = insertvalue { { ptr }, { i64 } } %23, i64 %24, 1, 0
  ret { { ptr }, { i64 } } %25
}

define cc 104 { { ptr }, { i64 } } @camlInt_ops__entry(ptr %0)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %2 = alloca i64
  %3 = alloca i64
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  br label %L1
L1:
  br label %L308
L308:                                                ; preds = %L1
  store ptr @camlInt_ops, ptr %4
  %7 = load i64, ptr %4
  store i64 %7, ptr %5
  %8 = load i64, ptr %5
  store i64 %8, ptr %3
  store i64 1, ptr %6
  %9 = load i64, ptr %6
  store i64 %9, ptr %2
  %10 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %11 = load ptr, ptr %ds
  %12 = insertvalue { { ptr }, { i64 } } %10, ptr %11, 0, 0
  %13 = load i64, ptr %2
  %14 = insertvalue { { ptr }, { i64 } } %12, i64 %13, 1, 0
  ret { { ptr }, { i64 } } %14
}

declare i64 @llvm.read_register.i64(metadata)
declare void @llvm.write_register.i64(metadata, i64)
declare i32 @llvm.eh.ocaml.try() returns_twice
declare void @llvm.eh.ocaml.touch(ptr)

@camlInt_ops_data = external global ptr
@caml_exn_Division_by_zero = external global ptr

@camlInt_ops__data_end = global {  } {  }, align 8
define void @camlInt_ops__code_end() { ret void }
@camlInt_ops__frametable = global {  } {  }, align 8
