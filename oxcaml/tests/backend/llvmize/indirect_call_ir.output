source_filename = "indirect_call.ml"

@camlIndirect_call__data_begin = global {  } {  }, align 8
define void @camlIndirect_call__code_begin() { ret void }

@camlIndirect_call__gc_roots = global { i64 } { i64 0 }, align 8
@.header.camlIndirect_call = global { i64 } { i64 1792 }, align 8
@camlIndirect_call = global { ptr } { ptr @camlIndirect_call__apply_1 }, align 8
@.header.camlIndirect_call__apply_1 = global { i64 } { i64 4087 }, align 8
@camlIndirect_call__apply_1 = global { ptr, i64, ptr } { ptr @caml_curry2, i64 180143985094819847, ptr @camlIndirect_call__apply_HIDE_STAMP }, align 8
define cc 104 { { ptr }, { i64 } } @camlIndirect_call__apply_HIDE_STAMP(ptr %0, i64 %1, i64 %2)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %4 = alloca i64
  store i64 %1, ptr %4
  %5 = alloca i64
  store i64 %2, ptr %5
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  br label %L1
L1:
  br label %L101
L101:                                                ; preds = %L1
  %10 = load i64, ptr %4
  store i64 %10, ptr %6
  %11 = load i64, ptr %5
  store i64 %11, ptr %7
  %12 = load i64, ptr %6
  %13 = add i64 %12, 0
  %14 = inttoptr i64 %13 to ptr
  %15 = load i64, ptr %14
  store i64 %15, ptr %8
  %16 = load i64, ptr %7
  store i64 %16, ptr %4
  %17 = load i64, ptr %6
  store i64 %17, ptr %5
  %18 = load i64, ptr %4
  %19 = load i64, ptr %5
  %20 = load ptr, ptr %ds
  %21 = load i64, ptr %8
  %22 = inttoptr i64 %21 to ptr
  %23 = call cc 104 { { ptr }, { i64 } } %22(ptr %20, i64 %18, i64 %19)
  %24 = extractvalue { { ptr }, { i64 } } %23, 0, 0
  store ptr %24, ptr %ds
  %25 = extractvalue { { ptr }, { i64 } } %23, 1, 0
  store i64 %25, ptr %4
  br label %L103
L103:                                                ; preds = %L101
  %26 = load i64, ptr %4
  store i64 %26, ptr %9
  %27 = load i64, ptr %9
  store i64 %27, ptr %4
  %28 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %29 = load ptr, ptr %ds
  %30 = insertvalue { { ptr }, { i64 } } %28, ptr %29, 0, 0
  %31 = load i64, ptr %4
  %32 = insertvalue { { ptr }, { i64 } } %30, i64 %31, 1, 0
  ret { { ptr }, { i64 } } %32
}

define cc 104 { { ptr }, { i64 } } @camlIndirect_call__entry(ptr %0)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %2 = alloca i64
  %3 = alloca i64
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  br label %L1
L1:
  br label %L109
L109:                                                ; preds = %L1
  store ptr @camlIndirect_call, ptr %4
  %7 = load i64, ptr %4
  store i64 %7, ptr %5
  %8 = load i64, ptr %5
  store i64 %8, ptr %3
  store i64 1, ptr %6
  %9 = load i64, ptr %6
  store i64 %9, ptr %2
  %10 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %11 = load ptr, ptr %ds
  %12 = insertvalue { { ptr }, { i64 } } %10, ptr %11, 0, 0
  %13 = load i64, ptr %2
  %14 = insertvalue { { ptr }, { i64 } } %12, i64 %13, 1, 0
  ret { { ptr }, { i64 } } %14
}

declare i64 @llvm.read_register.i64(metadata)
declare void @llvm.write_register.i64(metadata, i64)

@caml_curry2 = external global ptr

@camlIndirect_call__data_end = global {  } {  }, align 8
define void @camlIndirect_call__code_end() { ret void }
@camlIndirect_call__frametable = global {  } {  }, align 8
