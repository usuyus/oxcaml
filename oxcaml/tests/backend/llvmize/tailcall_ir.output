source_filename = "tailcall.ml"

@camlTailcall__data_begin = global {  } {  }, align 8
define void @camlTailcall__code_begin() { ret void }

@camlTailcall__gc_roots = global { i64 } { i64 0 }, align 8
@.header.camlTailcall = global { i64 } { i64 5888 }, align 8
@camlTailcall = global { ptr, ptr, ptr, ptr, ptr } { ptr @camlTailcall__fib_general_5, ptr @camlTailcall__collatz_odd_6, ptr @camlTailcall__collatz_even_7, ptr @camlTailcall__tail_call_outside_8, ptr @camlTailcall__tail_call_outside_prologue_9 }, align 8
@.header.camlTailcall__tail_call_outside_prologue_9 = global { i64 } { i64 4087 }, align 8
@camlTailcall__tail_call_outside_prologue_9 = global { ptr, i64, ptr } { ptr @caml_curry2, i64 180143985094819847, ptr @camlTailcall__tail_call_outside_prologue_HIDE_STAMP }, align 8
@.header.camlTailcall__tail_call_outside_8 = global { i64 } { i64 4087 }, align 8
@camlTailcall__tail_call_outside_8 = global { ptr, i64, ptr } { ptr @caml_curry2, i64 180143985094819847, ptr @camlTailcall__tail_call_outside_HIDE_STAMP }, align 8
@.header.camlTailcall__collatz_even_7 = global { i64 } { i64 8183 }, align 8
@camlTailcall__collatz_even_7 = global { ptr, i64, ptr } { ptr @caml_curry2, i64 144115188075855887, ptr @camlTailcall__collatz_even_HIDE_STAMP }, align 8
@.header.camlTailcall__collatz_odd_6 = global { i64 } { i64 4345 }, align 8
@camlTailcall__collatz_odd_6 = global { ptr, i64, ptr } { ptr @caml_curry2, i64 180143985094819847, ptr @camlTailcall__collatz_odd_HIDE_STAMP }, align 8
@.header.camlTailcall__fib_general_5 = global { i64 } { i64 4087 }, align 8
@camlTailcall__fib_general_5 = global { ptr, i64, ptr } { ptr @caml_curry3, i64 252201579132747783, ptr @camlTailcall__fib_general_HIDE_STAMP }, align 8
@.header.camlTailcall__float108 = global { i64 } { i64 2045 }, align 8
@camlTailcall__float108 = global { double } { double 41.29999999999999715783 }, align 8
@.header.camlTailcall__const_block101 = global { i64 } { i64 2827 }, align 8
@camlTailcall__const_block101 = global { ptr, ptr } { ptr @camlTailcall__immstring99, ptr @camlTailcall__const_block87 }, align 8
@.header.camlTailcall__immstring99 = global { i64 } { i64 3068 }, align 8
@camlTailcall__immstring99 = global { [ 13 x i8 ], [ 2 x i8 ], i8 } { [ 13 x i8 ] c"\63\6f\6c\6c\61\74\7a\5f\6f\64\64\3a\20", [ 2 x i8 ] zeroinitializer, i8 2 }, align 8
@.header.camlTailcall__const_block89 = global { i64 } { i64 2827 }, align 8
@camlTailcall__const_block89 = global { ptr, ptr } { ptr @camlTailcall__immstring83, ptr @camlTailcall__const_block87 }, align 8
@.header.camlTailcall__const_block87 = global { i64 } { i64 4868 }, align 8
@camlTailcall__const_block87 = global { i64, i64, i64, ptr } { i64 1, i64 1, i64 1, ptr @camlTailcall__const_block85 }, align 8
@.header.camlTailcall__const_block85 = global { i64 } { i64 2828 }, align 8
@camlTailcall__const_block85 = global { i64, i64 } { i64 21, i64 1 }, align 8
@.header.camlTailcall__immstring83 = global { i64 } { i64 3068 }, align 8
@camlTailcall__immstring83 = global { [ 13 x i8 ], [ 2 x i8 ], i8 } { [ 13 x i8 ] c"\66\69\62\5f\67\65\6e\65\72\61\6c\3a\20", [ 2 x i8 ] zeroinitializer, i8 2 }, align 8
define cc 104 { { ptr, ptr }, { i64 } } @camlTailcall__fib_general_HIDE_STAMP(ptr %0, ptr %1, i64 %2, i64 %3, i64 %4)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %6 = alloca i64
  store i64 %2, ptr %6
  %7 = alloca i64
  store i64 %3, ptr %7
  %8 = alloca i64
  store i64 %4, ptr %8
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca i64
  %22 = alloca i64
  %23 = alloca i64
  br label %L1
L1:
  br label %L101
L101:                                                ; preds = %L1
  %24 = load i64, ptr %6
  store i64 %24, ptr %9
  %25 = load i64, ptr %7
  store i64 %25, ptr %10
  %26 = load i64, ptr %8
  store i64 %26, ptr %11
  %27 = load i64, ptr %9
  store i64 %27, ptr %15
  %28 = load i64, ptr %10
  store i64 %28, ptr %16
  %29 = load i64, ptr %11
  store i64 %29, ptr %17
  %30 = load i64, ptr %15
  store i64 %30, ptr %12
  %31 = load i64, ptr %16
  store i64 %31, ptr %13
  %32 = load i64, ptr %17
  store i64 %32, ptr %14
  br label %L106
L106:                                                ; preds = %L101, %L110
  %33 = load i64, ptr %14
  %34 = icmp slt i64 %33, 1
  br i1 %34, label %L108, label %35
35:
  %36 = load i64, ptr %14
  %37 = icmp sgt i64 %36, 1
  br i1 %37, label %L108, label %L118
L108:                                                ; preds = %L106
  %38 = load i64, ptr %14
  %39 = icmp slt i64 %38, 3
  br i1 %39, label %L110, label %40
40:
  %41 = load i64, ptr %14
  %42 = icmp sgt i64 %41, 3
  br i1 %42, label %L110, label %L115
L110:                                                ; preds = %L108
  %43 = load i64, ptr %14
  store i64 %43, ptr %18
  %44 = load i64, ptr %18
  %45 = add i64 %44, -2
  store i64 %45, ptr %18
  %46 = load i64, ptr %12
  store i64 %46, ptr %19
  %47 = load i64, ptr %19
  %48 = load i64, ptr %13
  %49 = add i64 %47, %48
  store i64 %49, ptr %19
  %50 = load i64, ptr %19
  store i64 %50, ptr %20
  %51 = load i64, ptr %20
  %52 = add i64 %51, -1
  store i64 %52, ptr %20
  %53 = load i64, ptr %13
  store i64 %53, ptr %21
  %54 = load i64, ptr %20
  store i64 %54, ptr %22
  %55 = load i64, ptr %18
  store i64 %55, ptr %23
  %56 = load i64, ptr %21
  store i64 %56, ptr %12
  %57 = load i64, ptr %22
  store i64 %57, ptr %13
  %58 = load i64, ptr %23
  store i64 %58, ptr %14
  br label %L106
L115:                                                ; preds = %L108
  %59 = load i64, ptr %13
  store i64 %59, ptr %6
  %60 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %61 = load ptr, ptr %ds
  %62 = insertvalue { { ptr, ptr }, { i64 } } %60, ptr %61, 0, 0
  %63 = load ptr, ptr %alloc
  %64 = insertvalue { { ptr, ptr }, { i64 } } %62, ptr %63, 0, 1
  %65 = load i64, ptr %6
  %66 = insertvalue { { ptr, ptr }, { i64 } } %64, i64 %65, 1, 0
  ret { { ptr, ptr }, { i64 } } %66
L118:                                                ; preds = %L106
  %67 = load i64, ptr %12
  store i64 %67, ptr %6
  %68 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %69 = load ptr, ptr %ds
  %70 = insertvalue { { ptr, ptr }, { i64 } } %68, ptr %69, 0, 0
  %71 = load ptr, ptr %alloc
  %72 = insertvalue { { ptr, ptr }, { i64 } } %70, ptr %71, 0, 1
  %73 = load i64, ptr %6
  %74 = insertvalue { { ptr, ptr }, { i64 } } %72, i64 %73, 1, 0
  ret { { ptr, ptr }, { i64 } } %74
}

define cc 104 { { ptr, ptr }, { i64 } } @camlTailcall__collatz_odd_HIDE_STAMP(ptr %0, ptr %1, i64 %2, i64 %3)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %5 = alloca i64
  store i64 %2, ptr %5
  %6 = alloca i64
  store i64 %3, ptr %6
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  br label %L1
L1:
  br label %L123
L123:                                                ; preds = %L1, %L136
  %20 = load i64, ptr %5
  store i64 %20, ptr %7
  %21 = load i64, ptr %6
  store i64 %21, ptr %8
  %22 = load i64, ptr %7
  %23 = icmp slt i64 %22, 3
  br i1 %23, label %L127, label %24
24:
  %25 = load i64, ptr %7
  %26 = icmp sgt i64 %25, 3
  br i1 %26, label %L127, label %L125
L125:                                                ; preds = %L123
  %27 = load i64, ptr %8
  store i64 %27, ptr %5
  %28 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %29 = load ptr, ptr %ds
  %30 = insertvalue { { ptr, ptr }, { i64 } } %28, ptr %29, 0, 0
  %31 = load ptr, ptr %alloc
  %32 = insertvalue { { ptr, ptr }, { i64 } } %30, ptr %31, 0, 1
  %33 = load i64, ptr %5
  %34 = insertvalue { { ptr, ptr }, { i64 } } %32, i64 %33, 1, 0
  ret { { ptr, ptr }, { i64 } } %34
L127:                                                ; preds = %L123
  %35 = load i64, ptr %7
  store i64 %35, ptr %9
  %36 = load i64, ptr %9
  %37 = ashr i64 %36, 1
  store i64 %37, ptr %9
  %38 = load i64, ptr %9
  store i64 %38, ptr %10
  store i64 -2, ptr %11
  %39 = load i64, ptr %10
  store i64 %39, ptr %12
  %40 = load i64, ptr %12
  %41 = lshr i64 %40, 63
  store i64 %41, ptr %12
  %42 = load i64, ptr %10
  store i64 %42, ptr %13
  %43 = load i64, ptr %13
  %44 = load i64, ptr %12
  %45 = add i64 %43, %44
  store i64 %45, ptr %13
  %46 = load i64, ptr %13
  store i64 %46, ptr %14
  %47 = load i64, ptr %14
  %48 = load i64, ptr %11
  %49 = and i64 %47, %48
  store i64 %49, ptr %14
  %50 = load i64, ptr %10
  store i64 %50, ptr %15
  %51 = load i64, ptr %15
  %52 = load i64, ptr %14
  %53 = sub i64 %51, %52
  store i64 %53, ptr %15
  %54 = load i64, ptr %15
  store i64 %54, ptr %16
  %55 = load i64, ptr %16
  %56 = shl i64 %55, 1
  store i64 %56, ptr %16
  %57 = load i64, ptr %16
  store i64 %57, ptr %17
  %58 = load i64, ptr %17
  %59 = add i64 %58, 1
  store i64 %59, ptr %17
  %60 = load i64, ptr %17
  %61 = icmp slt i64 %60, 3
  br i1 %61, label %L141, label %62
62:
  %63 = load i64, ptr %17
  %64 = icmp sgt i64 %63, 3
  br i1 %64, label %L141, label %L136
L136:                                                ; preds = %L127
  %65 = load i64, ptr %8
  store i64 %65, ptr %18
  %66 = load i64, ptr %18
  %67 = add i64 %66, 2
  store i64 %67, ptr %18
  %68 = load i64, ptr %7
  store i64 %68, ptr %19
  %69 = load i64, ptr %19
  %70 = mul i64 %69, 3
  store i64 %70, ptr %19
  %71 = load i64, ptr %19
  store i64 %71, ptr %5
  %72 = load i64, ptr %18
  store i64 %72, ptr %6
  br label %L123
L141:                                                ; preds = %L127
  %73 = load i64, ptr %7
  store i64 %73, ptr %5
  %74 = load i64, ptr %8
  store i64 %74, ptr %6
  %75 = load i64, ptr %5
  %76 = load i64, ptr %6
  %77 = load ptr, ptr %ds
  %78 = load ptr, ptr %alloc
  %79 = musttail call cc 104 { { ptr, ptr }, { i64 } } @camlTailcall__collatz_even_HIDE_STAMP(ptr %77, ptr %78, i64 %75, i64 %76)
  ret { { ptr, ptr }, { i64 } } %79
}

define cc 104 { { ptr, ptr }, { i64 } } @camlTailcall__collatz_even_HIDE_STAMP(ptr %0, ptr %1, i64 %2, i64 %3)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %5 = alloca i64
  store i64 %2, ptr %5
  %6 = alloca i64
  store i64 %3, ptr %6
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca i64
  %22 = alloca i64
  %23 = alloca i64
  %24 = alloca i64
  %25 = alloca i64
  br label %L1
L1:
  br label %L147
L147:                                                ; preds = %L1, %L160
  %26 = load i64, ptr %5
  store i64 %26, ptr %7
  %27 = load i64, ptr %6
  store i64 %27, ptr %8
  %28 = load i64, ptr %7
  %29 = icmp slt i64 %28, 3
  br i1 %29, label %L151, label %30
30:
  %31 = load i64, ptr %7
  %32 = icmp sgt i64 %31, 3
  br i1 %32, label %L151, label %L149
L149:                                                ; preds = %L147
  %33 = load i64, ptr %8
  store i64 %33, ptr %5
  %34 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %35 = load ptr, ptr %ds
  %36 = insertvalue { { ptr, ptr }, { i64 } } %34, ptr %35, 0, 0
  %37 = load ptr, ptr %alloc
  %38 = insertvalue { { ptr, ptr }, { i64 } } %36, ptr %37, 0, 1
  %39 = load i64, ptr %5
  %40 = insertvalue { { ptr, ptr }, { i64 } } %38, i64 %39, 1, 0
  ret { { ptr, ptr }, { i64 } } %40
L151:                                                ; preds = %L147
  %41 = load i64, ptr %7
  store i64 %41, ptr %9
  %42 = load i64, ptr %9
  %43 = ashr i64 %42, 1
  store i64 %43, ptr %9
  %44 = load i64, ptr %9
  store i64 %44, ptr %10
  store i64 -2, ptr %11
  %45 = load i64, ptr %10
  store i64 %45, ptr %12
  %46 = load i64, ptr %12
  %47 = lshr i64 %46, 63
  store i64 %47, ptr %12
  %48 = load i64, ptr %10
  store i64 %48, ptr %13
  %49 = load i64, ptr %13
  %50 = load i64, ptr %12
  %51 = add i64 %49, %50
  store i64 %51, ptr %13
  %52 = load i64, ptr %13
  store i64 %52, ptr %14
  %53 = load i64, ptr %14
  %54 = load i64, ptr %11
  %55 = and i64 %53, %54
  store i64 %55, ptr %14
  %56 = load i64, ptr %10
  store i64 %56, ptr %15
  %57 = load i64, ptr %15
  %58 = load i64, ptr %14
  %59 = sub i64 %57, %58
  store i64 %59, ptr %15
  %60 = load i64, ptr %15
  store i64 %60, ptr %16
  %61 = load i64, ptr %16
  %62 = shl i64 %61, 1
  store i64 %62, ptr %16
  %63 = load i64, ptr %16
  store i64 %63, ptr %17
  %64 = load i64, ptr %17
  %65 = add i64 %64, 1
  store i64 %65, ptr %17
  %66 = load i64, ptr %17
  %67 = icmp slt i64 %66, 1
  br i1 %67, label %L170, label %68
68:
  %69 = load i64, ptr %17
  %70 = icmp sgt i64 %69, 1
  br i1 %70, label %L170, label %L160
L160:                                                ; preds = %L151
  %71 = load i64, ptr %8
  store i64 %71, ptr %18
  %72 = load i64, ptr %18
  %73 = add i64 %72, 2
  store i64 %73, ptr %18
  %74 = load i64, ptr %7
  store i64 %74, ptr %19
  %75 = load i64, ptr %19
  %76 = ashr i64 %75, 1
  store i64 %76, ptr %19
  %77 = load i64, ptr %19
  store i64 %77, ptr %20
  %78 = load i64, ptr %20
  store i64 %78, ptr %21
  %79 = load i64, ptr %21
  %80 = lshr i64 %79, 63
  store i64 %80, ptr %21
  %81 = load i64, ptr %20
  store i64 %81, ptr %22
  %82 = load i64, ptr %22
  %83 = load i64, ptr %21
  %84 = add i64 %82, %83
  store i64 %84, ptr %22
  %85 = load i64, ptr %22
  store i64 %85, ptr %23
  %86 = load i64, ptr %23
  %87 = ashr i64 %86, 1
  store i64 %87, ptr %23
  %88 = load i64, ptr %23
  store i64 %88, ptr %24
  %89 = load i64, ptr %24
  %90 = shl i64 %89, 1
  store i64 %90, ptr %24
  %91 = load i64, ptr %24
  store i64 %91, ptr %25
  %92 = load i64, ptr %25
  %93 = add i64 %92, 1
  store i64 %93, ptr %25
  %94 = load i64, ptr %25
  store i64 %94, ptr %5
  %95 = load i64, ptr %18
  store i64 %95, ptr %6
  br label %L147
L170:                                                ; preds = %L151
  %96 = load i64, ptr %7
  store i64 %96, ptr %5
  %97 = load i64, ptr %8
  store i64 %97, ptr %6
  %98 = load i64, ptr %5
  %99 = load i64, ptr %6
  %100 = load ptr, ptr %ds
  %101 = load ptr, ptr %alloc
  %102 = musttail call cc 104 { { ptr, ptr }, { i64 } } @camlTailcall__collatz_odd_HIDE_STAMP(ptr %100, ptr %101, i64 %98, i64 %99)
  ret { { ptr, ptr }, { i64 } } %102
}

define cc 104 { { ptr, ptr }, { i64 } } @camlTailcall__tail_call_outside_HIDE_STAMP(ptr %0, ptr %1, i64 %2, i64 %3)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %5 = alloca i64
  store i64 %2, ptr %5
  %6 = alloca i64
  store i64 %3, ptr %6
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  br label %L1
L1:
  br label %L176
L176:                                                ; preds = %L1
  %16 = load i64, ptr %5
  store i64 %16, ptr %9
  %17 = load i64, ptr %6
  store i64 %17, ptr %10
  store ptr @camlTailcall2, ptr %11
  %18 = load i64, ptr %11
  %19 = add i64 %18, 0
  %20 = inttoptr i64 %19 to ptr
  %21 = load i64, ptr %20
  store i64 %21, ptr %12
  %22 = load i64, ptr %9
  store i64 %22, ptr %13
  %23 = load i64, ptr %13
  %24 = shl i64 %23, 1
  store i64 %24, ptr %13
  %25 = load i64, ptr %13
  store i64 %25, ptr %14
  %26 = load i64, ptr %14
  %27 = add i64 %26, -1
  store i64 %27, ptr %14
  %28 = load i64, ptr %9
  store i64 %28, ptr %15
  %29 = load i64, ptr %15
  %30 = add i64 %29, 2
  store i64 %30, ptr %15
  %31 = load i64, ptr %15
  store i64 %31, ptr %5
  %32 = load i64, ptr %14
  store i64 %32, ptr %6
  %33 = load i64, ptr %10
  store i64 %33, ptr %7
  %34 = load i64, ptr %12
  store i64 %34, ptr %8
  %35 = load i64, ptr %5
  %36 = load i64, ptr %6
  %37 = load i64, ptr %7
  %38 = load i64, ptr %8
  %39 = load ptr, ptr %ds
  %40 = load ptr, ptr %alloc
  %41 = musttail call cc 104 { { ptr, ptr }, { i64 } } @caml_apply3(ptr %39, ptr %40, i64 %35, i64 %36, i64 %37, i64 %38)
  ret { { ptr, ptr }, { i64 } } %41
}

define cc 104 { { ptr, ptr }, { i64 } } @camlTailcall__tail_call_outside_prologue_HIDE_STAMP(ptr %0, ptr %1, i64 %2, i64 %3)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %5 = alloca i64
  store i64 %2, ptr %5
  %6 = alloca i64
  store i64 %3, ptr %6
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca i64
  %22 = alloca i64
  %23 = alloca i64
  br label %L1
L1:
  br label %L184
L184:                                                ; preds = %L1
  %24 = load i64, ptr %5
  store i64 %24, ptr %9
  %25 = load i64, ptr %6
  store i64 %25, ptr %10
  store ptr @camlTailcall2, ptr %11
  %26 = load i64, ptr %11
  store i64 %26, ptr %12
  %27 = load i64, ptr %12
  %28 = add i64 %27, 8
  store i64 %28, ptr %12
  %29 = load i64, ptr %12
  %30 = add i64 %29, 0
  %31 = inttoptr i64 %30 to ptr
  %32 = load i64, ptr %31
  store i64 %32, ptr %13
  %33 = load i64, ptr %13
  store i64 %33, ptr %14
  store i64 1, ptr %15
  %34 = load i64, ptr %14
  %35 = add i64 %34, 0
  %36 = inttoptr i64 %35 to ptr
  %37 = load i64, ptr %36
  store i64 %37, ptr %16
  %38 = load i64, ptr %15
  store i64 %38, ptr %5
  %39 = load i64, ptr %14
  store i64 %39, ptr %6
  %40 = load i64, ptr %5
  %41 = load i64, ptr %6
  %42 = load ptr, ptr %ds
  %43 = load ptr, ptr %alloc
  %44 = load i64, ptr %16
  %45 = inttoptr i64 %44 to ptr
  %46 =  call cc 104 { { ptr, ptr }, { i64 } } %45(ptr %42, ptr %43, i64 %40, i64 %41)
  %47 = extractvalue { { ptr, ptr }, { i64 } } %46, 0, 0
  store ptr %47, ptr %ds
  %48 = extractvalue { { ptr, ptr }, { i64 } } %46, 0, 1
  store ptr %48, ptr %alloc
  %49 = extractvalue { { ptr, ptr }, { i64 } } %46, 1, 0
  store i64 %49, ptr %5
  br label %L188
L188:                                                ; preds = %L184
  %50 = load i64, ptr %5
  store i64 %50, ptr %17
  %51 = load i64, ptr %17
  store i64 %51, ptr %18
  store ptr @camlTailcall2, ptr %19
  %52 = load i64, ptr %19
  %53 = add i64 %52, 0
  %54 = inttoptr i64 %53 to ptr
  %55 = load i64, ptr %54
  store i64 %55, ptr %20
  %56 = load i64, ptr %9
  store i64 %56, ptr %21
  %57 = load i64, ptr %21
  %58 = shl i64 %57, 1
  store i64 %58, ptr %21
  %59 = load i64, ptr %21
  store i64 %59, ptr %22
  %60 = load i64, ptr %22
  %61 = add i64 %60, -1
  store i64 %61, ptr %22
  %62 = load i64, ptr %9
  store i64 %62, ptr %23
  %63 = load i64, ptr %23
  %64 = add i64 %63, 2
  store i64 %64, ptr %23
  %65 = load i64, ptr %23
  store i64 %65, ptr %5
  %66 = load i64, ptr %22
  store i64 %66, ptr %6
  %67 = load i64, ptr %10
  store i64 %67, ptr %7
  %68 = load i64, ptr %20
  store i64 %68, ptr %8
  %69 = load i64, ptr %5
  %70 = load i64, ptr %6
  %71 = load i64, ptr %7
  %72 = load i64, ptr %8
  %73 = load ptr, ptr %ds
  %74 = load ptr, ptr %alloc
  %75 = musttail call cc 104 { { ptr, ptr }, { i64 } } @caml_apply3(ptr %73, ptr %74, i64 %69, i64 %70, i64 %71, i64 %72)
  ret { { ptr, ptr }, { i64 } } %75
}

define cc 104 { { ptr, ptr }, { i64 } } @camlTailcall__entry(ptr %0, ptr %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %3 = alloca i64
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca i64
  %22 = alloca i64
  %23 = alloca i64
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca i64
  %29 = alloca i64
  %30 = alloca i64
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca i64
  %36 = alloca i64
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca i64
  %42 = alloca i64
  %43 = alloca i64
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca i64
  %47 = alloca i64
  %48 = alloca i64
  %49 = alloca i64
  %50 = alloca i64
  %51 = alloca i64
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca i64
  %57 = alloca i64
  %58 = alloca i64
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca i64
  %62 = alloca i64
  %63 = alloca i64
  %64 = alloca i64
  %65 = alloca i64
  %66 = alloca i64
  %67 = alloca i64
  %68 = alloca i64
  %69 = alloca i64
  %70 = alloca i64
  br label %L1
L1:
  br label %L205
L205:                                                ; preds = %L1
  store i64 11, ptr %12
  store i64 15, ptr %13
  store i64 7, ptr %14
  %71 = load i64, ptr %14
  store i64 %71, ptr %15
  %72 = load i64, ptr %13
  store i64 %72, ptr %16
  %73 = load i64, ptr %12
  store i64 %73, ptr %17
  %74 = load i64, ptr %15
  store i64 %74, ptr %9
  %75 = load i64, ptr %16
  store i64 %75, ptr %10
  %76 = load i64, ptr %17
  store i64 %76, ptr %11
  br label %L207
L207:                                                ; preds = %L205, %L211
  %77 = load i64, ptr %11
  %78 = icmp slt i64 %77, 1
  br i1 %78, label %L209, label %79
79:
  %80 = load i64, ptr %11
  %81 = icmp sgt i64 %80, 1
  br i1 %81, label %L209, label %L219
L209:                                                ; preds = %L207
  %82 = load i64, ptr %11
  %83 = icmp slt i64 %82, 3
  br i1 %83, label %L211, label %84
84:
  %85 = load i64, ptr %11
  %86 = icmp sgt i64 %85, 3
  br i1 %86, label %L211, label %L216
L211:                                                ; preds = %L209
  %87 = load i64, ptr %11
  store i64 %87, ptr %18
  %88 = load i64, ptr %18
  %89 = add i64 %88, -2
  store i64 %89, ptr %18
  %90 = load i64, ptr %9
  store i64 %90, ptr %19
  %91 = load i64, ptr %19
  %92 = load i64, ptr %10
  %93 = add i64 %91, %92
  store i64 %93, ptr %19
  %94 = load i64, ptr %19
  store i64 %94, ptr %20
  %95 = load i64, ptr %20
  %96 = add i64 %95, -1
  store i64 %96, ptr %20
  %97 = load i64, ptr %10
  store i64 %97, ptr %21
  %98 = load i64, ptr %20
  store i64 %98, ptr %22
  %99 = load i64, ptr %18
  store i64 %99, ptr %23
  %100 = load i64, ptr %21
  store i64 %100, ptr %9
  %101 = load i64, ptr %22
  store i64 %101, ptr %10
  %102 = load i64, ptr %23
  store i64 %102, ptr %11
  br label %L207
L216:                                                ; preds = %L209
  %103 = load i64, ptr %10
  store i64 %103, ptr %24
  %104 = load i64, ptr %24
  store i64 %104, ptr %8
  br label %L223
L219:                                                ; preds = %L207
  %105 = load i64, ptr %9
  store i64 %105, ptr %25
  %106 = load i64, ptr %25
  store i64 %106, ptr %8
  br label %L223
L223:                                                ; preds = %L216, %L219
  store ptr @camlTailcall__const_block89, ptr %26
  store i64 1, ptr %27
  store ptr @camlStdlib__Format__fn$5b$2fworkspace_root$2fformat.ml$3a1458$2c4$2d$2d66$5d_550, ptr %28
  %107 = load i64, ptr %28
  store i64 %107, ptr %3
  %108 = load i64, ptr %27
  store i64 %108, ptr %4
  %109 = load i64, ptr %26
  store i64 %109, ptr %5
  %110 = load i64, ptr %3
  %111 = load i64, ptr %4
  %112 = load i64, ptr %5
  %113 = load ptr, ptr %ds
  %114 = load ptr, ptr %alloc
  %115 =  call cc 104 { { ptr, ptr }, { i64 } } @camlCamlinternalFormat__make_printf_HIDE_STAMP(ptr %113, ptr %114, i64 %110, i64 %111, i64 %112)
  %116 = extractvalue { { ptr, ptr }, { i64 } } %115, 0, 0
  store ptr %116, ptr %ds
  %117 = extractvalue { { ptr, ptr }, { i64 } } %115, 0, 1
  store ptr %117, ptr %alloc
  %118 = extractvalue { { ptr, ptr }, { i64 } } %115, 1, 0
  store i64 %118, ptr %3
  br label %L225
L225:                                                ; preds = %L223
  %119 = load i64, ptr %3
  store i64 %119, ptr %29
  %120 = load i64, ptr %29
  store i64 %120, ptr %30
  %121 = load i64, ptr %30
  %122 = add i64 %121, 0
  %123 = inttoptr i64 %122 to ptr
  %124 = load i64, ptr %123
  store i64 %124, ptr %31
  %125 = load i64, ptr %8
  store i64 %125, ptr %3
  %126 = load i64, ptr %30
  store i64 %126, ptr %4
  %127 = load i64, ptr %3
  %128 = load i64, ptr %4
  %129 = load ptr, ptr %ds
  %130 = load ptr, ptr %alloc
  %131 = load i64, ptr %31
  %132 = inttoptr i64 %131 to ptr
  %133 =  call cc 104 { { ptr, ptr }, { i64 } } %132(ptr %129, ptr %130, i64 %127, i64 %128)
  %134 = extractvalue { { ptr, ptr }, { i64 } } %133, 0, 0
  store ptr %134, ptr %ds
  %135 = extractvalue { { ptr, ptr }, { i64 } } %133, 0, 1
  store ptr %135, ptr %alloc
  %136 = extractvalue { { ptr, ptr }, { i64 } } %133, 1, 0
  store i64 %136, ptr %3
  br label %L226
L226:                                                ; preds = %L225
  %137 = load i64, ptr %3
  store i64 %137, ptr %32
  %138 = load i64, ptr %32
  store i64 %138, ptr %33
  store i64 1, ptr %34
  store i64 55, ptr %35
  %139 = load i64, ptr %35
  store i64 %139, ptr %3
  %140 = load i64, ptr %34
  store i64 %140, ptr %4
  %141 = load i64, ptr %3
  %142 = load i64, ptr %4
  %143 = load ptr, ptr %ds
  %144 = load ptr, ptr %alloc
  %145 =  call cc 104 { { ptr, ptr }, { i64 } } @camlTailcall__collatz_odd_HIDE_STAMP(ptr %143, ptr %144, i64 %141, i64 %142)
  %146 = extractvalue { { ptr, ptr }, { i64 } } %145, 0, 0
  store ptr %146, ptr %ds
  %147 = extractvalue { { ptr, ptr }, { i64 } } %145, 0, 1
  store ptr %147, ptr %alloc
  %148 = extractvalue { { ptr, ptr }, { i64 } } %145, 1, 0
  store i64 %148, ptr %3
  br label %L228
L228:                                                ; preds = %L226
  %149 = load i64, ptr %3
  store i64 %149, ptr %36
  %150 = load i64, ptr %36
  store i64 %150, ptr %37
  store ptr @camlTailcall__const_block101, ptr %38
  store i64 1, ptr %39
  store ptr @camlStdlib__Format__fn$5b$2fworkspace_root$2fformat.ml$3a1458$2c4$2d$2d66$5d_550, ptr %40
  %151 = load i64, ptr %40
  store i64 %151, ptr %3
  %152 = load i64, ptr %39
  store i64 %152, ptr %4
  %153 = load i64, ptr %38
  store i64 %153, ptr %5
  %154 = load i64, ptr %3
  %155 = load i64, ptr %4
  %156 = load i64, ptr %5
  %157 = load ptr, ptr %ds
  %158 = load ptr, ptr %alloc
  %159 =  call cc 104 { { ptr, ptr }, { i64 } } @camlCamlinternalFormat__make_printf_HIDE_STAMP(ptr %157, ptr %158, i64 %154, i64 %155, i64 %156)
  %160 = extractvalue { { ptr, ptr }, { i64 } } %159, 0, 0
  store ptr %160, ptr %ds
  %161 = extractvalue { { ptr, ptr }, { i64 } } %159, 0, 1
  store ptr %161, ptr %alloc
  %162 = extractvalue { { ptr, ptr }, { i64 } } %159, 1, 0
  store i64 %162, ptr %3
  br label %L229
L229:                                                ; preds = %L228
  %163 = load i64, ptr %3
  store i64 %163, ptr %41
  %164 = load i64, ptr %41
  store i64 %164, ptr %42
  %165 = load i64, ptr %42
  %166 = add i64 %165, 0
  %167 = inttoptr i64 %166 to ptr
  %168 = load i64, ptr %167
  store i64 %168, ptr %43
  %169 = load i64, ptr %37
  store i64 %169, ptr %3
  %170 = load i64, ptr %42
  store i64 %170, ptr %4
  %171 = load i64, ptr %3
  %172 = load i64, ptr %4
  %173 = load ptr, ptr %ds
  %174 = load ptr, ptr %alloc
  %175 = load i64, ptr %43
  %176 = inttoptr i64 %175 to ptr
  %177 =  call cc 104 { { ptr, ptr }, { i64 } } %176(ptr %173, ptr %174, i64 %171, i64 %172)
  %178 = extractvalue { { ptr, ptr }, { i64 } } %177, 0, 0
  store ptr %178, ptr %ds
  %179 = extractvalue { { ptr, ptr }, { i64 } } %177, 0, 1
  store ptr %179, ptr %alloc
  %180 = extractvalue { { ptr, ptr }, { i64 } } %177, 1, 0
  store i64 %180, ptr %3
  br label %L230
L230:                                                ; preds = %L229
  %181 = load i64, ptr %3
  store i64 %181, ptr %44
  %182 = load i64, ptr %44
  store i64 %182, ptr %45
  store ptr @camlTailcall2, ptr %46
  %183 = load i64, ptr %46
  %184 = add i64 %183, 0
  %185 = inttoptr i64 %184 to ptr
  %186 = load i64, ptr %185
  store i64 %186, ptr %47
  store ptr @camlTailcall__float108, ptr %48
  store i64 149, ptr %49
  store i64 77, ptr %50
  %187 = load i64, ptr %50
  store i64 %187, ptr %3
  %188 = load i64, ptr %49
  store i64 %188, ptr %4
  %189 = load i64, ptr %48
  store i64 %189, ptr %5
  %190 = load i64, ptr %47
  store i64 %190, ptr %6
  %191 = load i64, ptr %3
  %192 = load i64, ptr %4
  %193 = load i64, ptr %5
  %194 = load i64, ptr %6
  %195 = load ptr, ptr %ds
  %196 = load ptr, ptr %alloc
  %197 =  call cc 104 { { ptr, ptr }, { i64 } } @caml_apply3(ptr %195, ptr %196, i64 %191, i64 %192, i64 %193, i64 %194)
  %198 = extractvalue { { ptr, ptr }, { i64 } } %197, 0, 0
  store ptr %198, ptr %ds
  %199 = extractvalue { { ptr, ptr }, { i64 } } %197, 0, 1
  store ptr %199, ptr %alloc
  %200 = extractvalue { { ptr, ptr }, { i64 } } %197, 1, 0
  store i64 %200, ptr %3
  br label %L232
L232:                                                ; preds = %L230
  %201 = load i64, ptr %3
  store i64 %201, ptr %51
  %202 = load i64, ptr %51
  store i64 %202, ptr %52
  store ptr @camlTailcall2, ptr %53
  %203 = load i64, ptr %53
  store i64 %203, ptr %54
  %204 = load i64, ptr %54
  %205 = add i64 %204, 8
  store i64 %205, ptr %54
  %206 = load i64, ptr %54
  %207 = add i64 %206, 0
  %208 = inttoptr i64 %207 to ptr
  %209 = load i64, ptr %208
  store i64 %209, ptr %55
  %210 = load i64, ptr %55
  store i64 %210, ptr %56
  store i64 1, ptr %57
  %211 = load i64, ptr %56
  %212 = add i64 %211, 0
  %213 = inttoptr i64 %212 to ptr
  %214 = load i64, ptr %213
  store i64 %214, ptr %58
  %215 = load i64, ptr %57
  store i64 %215, ptr %3
  %216 = load i64, ptr %56
  store i64 %216, ptr %4
  %217 = load i64, ptr %3
  %218 = load i64, ptr %4
  %219 = load ptr, ptr %ds
  %220 = load ptr, ptr %alloc
  %221 = load i64, ptr %58
  %222 = inttoptr i64 %221 to ptr
  %223 =  call cc 104 { { ptr, ptr }, { i64 } } %222(ptr %219, ptr %220, i64 %217, i64 %218)
  %224 = extractvalue { { ptr, ptr }, { i64 } } %223, 0, 0
  store ptr %224, ptr %ds
  %225 = extractvalue { { ptr, ptr }, { i64 } } %223, 0, 1
  store ptr %225, ptr %alloc
  %226 = extractvalue { { ptr, ptr }, { i64 } } %223, 1, 0
  store i64 %226, ptr %3
  br label %L236
L236:                                                ; preds = %L232
  %227 = load i64, ptr %3
  store i64 %227, ptr %59
  %228 = load i64, ptr %59
  store i64 %228, ptr %60
  store ptr @camlTailcall2, ptr %61
  %229 = load i64, ptr %61
  %230 = add i64 %229, 0
  %231 = inttoptr i64 %230 to ptr
  %232 = load i64, ptr %231
  store i64 %232, ptr %62
  store ptr @camlTailcall__float108, ptr %63
  store i64 149, ptr %64
  store i64 77, ptr %65
  %233 = load i64, ptr %65
  store i64 %233, ptr %3
  %234 = load i64, ptr %64
  store i64 %234, ptr %4
  %235 = load i64, ptr %63
  store i64 %235, ptr %5
  %236 = load i64, ptr %62
  store i64 %236, ptr %6
  %237 = load i64, ptr %3
  %238 = load i64, ptr %4
  %239 = load i64, ptr %5
  %240 = load i64, ptr %6
  %241 = load ptr, ptr %ds
  %242 = load ptr, ptr %alloc
  %243 =  call cc 104 { { ptr, ptr }, { i64 } } @caml_apply3(ptr %241, ptr %242, i64 %237, i64 %238, i64 %239, i64 %240)
  %244 = extractvalue { { ptr, ptr }, { i64 } } %243, 0, 0
  store ptr %244, ptr %ds
  %245 = extractvalue { { ptr, ptr }, { i64 } } %243, 0, 1
  store ptr %245, ptr %alloc
  %246 = extractvalue { { ptr, ptr }, { i64 } } %243, 1, 0
  store i64 %246, ptr %3
  br label %L238
L238:                                                ; preds = %L236
  %247 = load i64, ptr %3
  store i64 %247, ptr %66
  %248 = load i64, ptr %66
  store i64 %248, ptr %67
  store ptr @camlTailcall, ptr %68
  %249 = load i64, ptr %68
  store i64 %249, ptr %69
  %250 = load i64, ptr %69
  store i64 %250, ptr %7
  store i64 1, ptr %70
  %251 = load i64, ptr %70
  store i64 %251, ptr %3
  %252 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %253 = load ptr, ptr %ds
  %254 = insertvalue { { ptr, ptr }, { i64 } } %252, ptr %253, 0, 0
  %255 = load ptr, ptr %alloc
  %256 = insertvalue { { ptr, ptr }, { i64 } } %254, ptr %255, 0, 1
  %257 = load i64, ptr %3
  %258 = insertvalue { { ptr, ptr }, { i64 } } %256, i64 %257, 1, 0
  ret { { ptr, ptr }, { i64 } } %258
}

declare cc 104 { { ptr, ptr }, { i64 } } @camlCamlinternalFormat__make_printf_HIDE_STAMP(ptr, ptr, i64, i64, i64)
declare cc 104 { { ptr, ptr }, { i64 } } @caml_apply3(ptr, ptr, i64, i64, i64, i64)
declare i64 @llvm.read_register.i64(metadata)
declare void @llvm.write_register.i64(metadata, i64)

@camlStdlib__Format__fn$5b$2fworkspace_root$2fformat.ml$3a1458$2c4$2d$2d66$5d_550 = external global ptr
@camlTailcall2 = external global ptr
@caml_curry2 = external global ptr
@caml_curry3 = external global ptr

@camlTailcall__data_end = global {  } {  }, align 8
define void @camlTailcall__code_end() { ret void }
@camlTailcall__frametable = global {  } {  }, align 8
