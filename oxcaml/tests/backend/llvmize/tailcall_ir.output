source_filename = "tailcall.ml"

@camlTailcall__data_begin = global {  } {  }, align 8
define void @camlTailcall__code_begin() { ret void }

@camlTailcall__gc_roots = global { i64 } { i64 0 }, align 8
@.header.camlTailcall = global { i64 } { i64 4864 }, align 8
@camlTailcall = global { ptr, ptr, ptr, ptr } { ptr @camlTailcall__fib_general_4, ptr @camlTailcall__collatz_odd_5, ptr @camlTailcall__collatz_even_6, ptr @camlTailcall__tail_call_outside_7 }, align 8
@.header.camlTailcall__tail_call_outside_7 = global { i64 } { i64 4087 }, align 8
@camlTailcall__tail_call_outside_7 = global { ptr, i64, ptr } { ptr @caml_curry2, i64 180143985094819847, ptr @camlTailcall__tail_call_outside_HIDE_STAMP }, align 8
@.header.camlTailcall__collatz_even_6 = global { i64 } { i64 8183 }, align 8
@camlTailcall__collatz_even_6 = global { ptr, i64, ptr } { ptr @caml_curry2, i64 144115188075855887, ptr @camlTailcall__collatz_even_HIDE_STAMP }, align 8
@.header.camlTailcall__collatz_odd_5 = global { i64 } { i64 4345 }, align 8
@camlTailcall__collatz_odd_5 = global { ptr, i64, ptr } { ptr @caml_curry2, i64 180143985094819847, ptr @camlTailcall__collatz_odd_HIDE_STAMP }, align 8
@.header.camlTailcall__fib_general_4 = global { i64 } { i64 4087 }, align 8
@camlTailcall__fib_general_4 = global { ptr, i64, ptr } { ptr @caml_curry3, i64 252201579132747783, ptr @camlTailcall__fib_general_HIDE_STAMP }, align 8
@.header.camlTailcall__float94 = global { i64 } { i64 2045 }, align 8
@camlTailcall__float94 = global { double } { double 41.29999999999999715783 }, align 8
@.header.camlTailcall__const_block88 = global { i64 } { i64 2827 }, align 8
@camlTailcall__const_block88 = global { ptr, ptr } { ptr @camlTailcall__immstring86, ptr @camlTailcall__const_block74 }, align 8
@.header.camlTailcall__immstring86 = global { i64 } { i64 3068 }, align 8
@camlTailcall__immstring86 = global { [ 13 x i8 ], [ 2 x i8 ], i8 } { [ 13 x i8 ] c"\63\6f\6c\6c\61\74\7a\5f\6f\64\64\3a\20", [ 2 x i8 ] zeroinitializer, i8 2 }, align 8
@.header.camlTailcall__const_block76 = global { i64 } { i64 2827 }, align 8
@camlTailcall__const_block76 = global { ptr, ptr } { ptr @camlTailcall__immstring70, ptr @camlTailcall__const_block74 }, align 8
@.header.camlTailcall__const_block74 = global { i64 } { i64 4868 }, align 8
@camlTailcall__const_block74 = global { i64, i64, i64, ptr } { i64 1, i64 1, i64 1, ptr @camlTailcall__const_block72 }, align 8
@.header.camlTailcall__const_block72 = global { i64 } { i64 2828 }, align 8
@camlTailcall__const_block72 = global { i64, i64 } { i64 21, i64 1 }, align 8
@.header.camlTailcall__immstring70 = global { i64 } { i64 3068 }, align 8
@camlTailcall__immstring70 = global { [ 13 x i8 ], [ 2 x i8 ], i8 } { [ 13 x i8 ] c"\66\69\62\5f\67\65\6e\65\72\61\6c\3a\20", [ 2 x i8 ] zeroinitializer, i8 2 }, align 8
define cc 104 { { ptr, ptr }, { i64 } } @camlTailcall__fib_general_HIDE_STAMP(ptr %0, ptr %1, i64 %2, i64 %3, i64 %4)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %6 = alloca i64
  store i64 %2, ptr %6
  %7 = alloca i64
  store i64 %3, ptr %7
  %8 = alloca i64
  store i64 %4, ptr %8
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca i64
  %22 = alloca i64
  %23 = alloca i64
  br label %L1
L1:
  br label %L101
L101:                                                ; preds = %L1
  %24 = load i64, ptr %6
  store i64 %24, ptr %9
  %25 = load i64, ptr %7
  store i64 %25, ptr %10
  %26 = load i64, ptr %8
  store i64 %26, ptr %11
  %27 = load i64, ptr %9
  store i64 %27, ptr %15
  %28 = load i64, ptr %10
  store i64 %28, ptr %16
  %29 = load i64, ptr %11
  store i64 %29, ptr %17
  %30 = load i64, ptr %15
  store i64 %30, ptr %12
  %31 = load i64, ptr %16
  store i64 %31, ptr %13
  %32 = load i64, ptr %17
  store i64 %32, ptr %14
  br label %L106
L106:                                                ; preds = %L101, %L110
  %33 = load i64, ptr %14
  %34 = icmp slt i64 %33, 1
  br i1 %34, label %L108, label %35
35:
  %36 = load i64, ptr %14
  %37 = icmp sgt i64 %36, 1
  br i1 %37, label %L108, label %L118
L108:                                                ; preds = %L106
  %38 = load i64, ptr %14
  %39 = icmp slt i64 %38, 3
  br i1 %39, label %L110, label %40
40:
  %41 = load i64, ptr %14
  %42 = icmp sgt i64 %41, 3
  br i1 %42, label %L110, label %L115
L110:                                                ; preds = %L108
  %43 = load i64, ptr %14
  store i64 %43, ptr %18
  %44 = load i64, ptr %18
  %45 = add i64 %44, -2
  store i64 %45, ptr %18
  %46 = load i64, ptr %12
  store i64 %46, ptr %19
  %47 = load i64, ptr %19
  %48 = load i64, ptr %13
  %49 = add i64 %47, %48
  store i64 %49, ptr %19
  %50 = load i64, ptr %19
  store i64 %50, ptr %20
  %51 = load i64, ptr %20
  %52 = add i64 %51, -1
  store i64 %52, ptr %20
  %53 = load i64, ptr %13
  store i64 %53, ptr %21
  %54 = load i64, ptr %20
  store i64 %54, ptr %22
  %55 = load i64, ptr %18
  store i64 %55, ptr %23
  %56 = load i64, ptr %21
  store i64 %56, ptr %12
  %57 = load i64, ptr %22
  store i64 %57, ptr %13
  %58 = load i64, ptr %23
  store i64 %58, ptr %14
  br label %L106
L115:                                                ; preds = %L108
  %59 = load i64, ptr %13
  store i64 %59, ptr %6
  %60 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %61 = load ptr, ptr %ds
  %62 = insertvalue { { ptr, ptr }, { i64 } } %60, ptr %61, 0, 0
  %63 = load ptr, ptr %alloc
  %64 = insertvalue { { ptr, ptr }, { i64 } } %62, ptr %63, 0, 1
  %65 = load i64, ptr %6
  %66 = insertvalue { { ptr, ptr }, { i64 } } %64, i64 %65, 1, 0
  ret { { ptr, ptr }, { i64 } } %66
L118:                                                ; preds = %L106
  %67 = load i64, ptr %12
  store i64 %67, ptr %6
  %68 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %69 = load ptr, ptr %ds
  %70 = insertvalue { { ptr, ptr }, { i64 } } %68, ptr %69, 0, 0
  %71 = load ptr, ptr %alloc
  %72 = insertvalue { { ptr, ptr }, { i64 } } %70, ptr %71, 0, 1
  %73 = load i64, ptr %6
  %74 = insertvalue { { ptr, ptr }, { i64 } } %72, i64 %73, 1, 0
  ret { { ptr, ptr }, { i64 } } %74
}

define cc 104 { { ptr, ptr }, { i64 } } @camlTailcall__collatz_odd_HIDE_STAMP(ptr %0, ptr %1, i64 %2, i64 %3)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %5 = alloca i64
  store i64 %2, ptr %5
  %6 = alloca i64
  store i64 %3, ptr %6
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  br label %L1
L1:
  br label %L123
L123:                                                ; preds = %L1, %L136
  %20 = load i64, ptr %5
  store i64 %20, ptr %7
  %21 = load i64, ptr %6
  store i64 %21, ptr %8
  %22 = load i64, ptr %7
  %23 = icmp slt i64 %22, 3
  br i1 %23, label %L127, label %24
24:
  %25 = load i64, ptr %7
  %26 = icmp sgt i64 %25, 3
  br i1 %26, label %L127, label %L125
L125:                                                ; preds = %L123
  %27 = load i64, ptr %8
  store i64 %27, ptr %5
  %28 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %29 = load ptr, ptr %ds
  %30 = insertvalue { { ptr, ptr }, { i64 } } %28, ptr %29, 0, 0
  %31 = load ptr, ptr %alloc
  %32 = insertvalue { { ptr, ptr }, { i64 } } %30, ptr %31, 0, 1
  %33 = load i64, ptr %5
  %34 = insertvalue { { ptr, ptr }, { i64 } } %32, i64 %33, 1, 0
  ret { { ptr, ptr }, { i64 } } %34
L127:                                                ; preds = %L123
  %35 = load i64, ptr %7
  store i64 %35, ptr %9
  %36 = load i64, ptr %9
  %37 = ashr i64 %36, 1
  store i64 %37, ptr %9
  %38 = load i64, ptr %9
  store i64 %38, ptr %10
  store i64 -2, ptr %11
  %39 = load i64, ptr %10
  store i64 %39, ptr %12
  %40 = load i64, ptr %12
  %41 = lshr i64 %40, 63
  store i64 %41, ptr %12
  %42 = load i64, ptr %10
  store i64 %42, ptr %13
  %43 = load i64, ptr %13
  %44 = load i64, ptr %12
  %45 = add i64 %43, %44
  store i64 %45, ptr %13
  %46 = load i64, ptr %13
  store i64 %46, ptr %14
  %47 = load i64, ptr %14
  %48 = load i64, ptr %11
  %49 = and i64 %47, %48
  store i64 %49, ptr %14
  %50 = load i64, ptr %10
  store i64 %50, ptr %15
  %51 = load i64, ptr %15
  %52 = load i64, ptr %14
  %53 = sub i64 %51, %52
  store i64 %53, ptr %15
  %54 = load i64, ptr %15
  store i64 %54, ptr %16
  %55 = load i64, ptr %16
  %56 = shl i64 %55, 1
  store i64 %56, ptr %16
  %57 = load i64, ptr %16
  store i64 %57, ptr %17
  %58 = load i64, ptr %17
  %59 = add i64 %58, 1
  store i64 %59, ptr %17
  %60 = load i64, ptr %17
  %61 = icmp slt i64 %60, 3
  br i1 %61, label %L141, label %62
62:
  %63 = load i64, ptr %17
  %64 = icmp sgt i64 %63, 3
  br i1 %64, label %L141, label %L136
L136:                                                ; preds = %L127
  %65 = load i64, ptr %8
  store i64 %65, ptr %18
  %66 = load i64, ptr %18
  %67 = add i64 %66, 2
  store i64 %67, ptr %18
  %68 = load i64, ptr %7
  store i64 %68, ptr %19
  %69 = load i64, ptr %19
  %70 = mul i64 %69, 3
  store i64 %70, ptr %19
  %71 = load i64, ptr %19
  store i64 %71, ptr %5
  %72 = load i64, ptr %18
  store i64 %72, ptr %6
  br label %L123
L141:                                                ; preds = %L127
  %73 = load i64, ptr %7
  store i64 %73, ptr %5
  %74 = load i64, ptr %8
  store i64 %74, ptr %6
  %75 = load i64, ptr %5
  %76 = load i64, ptr %6
  %77 = load ptr, ptr %ds
  %78 = load ptr, ptr %alloc
  %79 = musttail call cc 104 { { ptr, ptr }, { i64 } } @camlTailcall__collatz_even_HIDE_STAMP(ptr %77, ptr %78, i64 %75, i64 %76)
  ret { { ptr, ptr }, { i64 } } %79
}

define cc 104 { { ptr, ptr }, { i64 } } @camlTailcall__collatz_even_HIDE_STAMP(ptr %0, ptr %1, i64 %2, i64 %3)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %5 = alloca i64
  store i64 %2, ptr %5
  %6 = alloca i64
  store i64 %3, ptr %6
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca i64
  %22 = alloca i64
  %23 = alloca i64
  %24 = alloca i64
  %25 = alloca i64
  br label %L1
L1:
  br label %L147
L147:                                                ; preds = %L1, %L160
  %26 = load i64, ptr %5
  store i64 %26, ptr %7
  %27 = load i64, ptr %6
  store i64 %27, ptr %8
  %28 = load i64, ptr %7
  %29 = icmp slt i64 %28, 3
  br i1 %29, label %L151, label %30
30:
  %31 = load i64, ptr %7
  %32 = icmp sgt i64 %31, 3
  br i1 %32, label %L151, label %L149
L149:                                                ; preds = %L147
  %33 = load i64, ptr %8
  store i64 %33, ptr %5
  %34 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %35 = load ptr, ptr %ds
  %36 = insertvalue { { ptr, ptr }, { i64 } } %34, ptr %35, 0, 0
  %37 = load ptr, ptr %alloc
  %38 = insertvalue { { ptr, ptr }, { i64 } } %36, ptr %37, 0, 1
  %39 = load i64, ptr %5
  %40 = insertvalue { { ptr, ptr }, { i64 } } %38, i64 %39, 1, 0
  ret { { ptr, ptr }, { i64 } } %40
L151:                                                ; preds = %L147
  %41 = load i64, ptr %7
  store i64 %41, ptr %9
  %42 = load i64, ptr %9
  %43 = ashr i64 %42, 1
  store i64 %43, ptr %9
  %44 = load i64, ptr %9
  store i64 %44, ptr %10
  store i64 -2, ptr %11
  %45 = load i64, ptr %10
  store i64 %45, ptr %12
  %46 = load i64, ptr %12
  %47 = lshr i64 %46, 63
  store i64 %47, ptr %12
  %48 = load i64, ptr %10
  store i64 %48, ptr %13
  %49 = load i64, ptr %13
  %50 = load i64, ptr %12
  %51 = add i64 %49, %50
  store i64 %51, ptr %13
  %52 = load i64, ptr %13
  store i64 %52, ptr %14
  %53 = load i64, ptr %14
  %54 = load i64, ptr %11
  %55 = and i64 %53, %54
  store i64 %55, ptr %14
  %56 = load i64, ptr %10
  store i64 %56, ptr %15
  %57 = load i64, ptr %15
  %58 = load i64, ptr %14
  %59 = sub i64 %57, %58
  store i64 %59, ptr %15
  %60 = load i64, ptr %15
  store i64 %60, ptr %16
  %61 = load i64, ptr %16
  %62 = shl i64 %61, 1
  store i64 %62, ptr %16
  %63 = load i64, ptr %16
  store i64 %63, ptr %17
  %64 = load i64, ptr %17
  %65 = add i64 %64, 1
  store i64 %65, ptr %17
  %66 = load i64, ptr %17
  %67 = icmp slt i64 %66, 1
  br i1 %67, label %L170, label %68
68:
  %69 = load i64, ptr %17
  %70 = icmp sgt i64 %69, 1
  br i1 %70, label %L170, label %L160
L160:                                                ; preds = %L151
  %71 = load i64, ptr %8
  store i64 %71, ptr %18
  %72 = load i64, ptr %18
  %73 = add i64 %72, 2
  store i64 %73, ptr %18
  %74 = load i64, ptr %7
  store i64 %74, ptr %19
  %75 = load i64, ptr %19
  %76 = ashr i64 %75, 1
  store i64 %76, ptr %19
  %77 = load i64, ptr %19
  store i64 %77, ptr %20
  %78 = load i64, ptr %20
  store i64 %78, ptr %21
  %79 = load i64, ptr %21
  %80 = lshr i64 %79, 63
  store i64 %80, ptr %21
  %81 = load i64, ptr %20
  store i64 %81, ptr %22
  %82 = load i64, ptr %22
  %83 = load i64, ptr %21
  %84 = add i64 %82, %83
  store i64 %84, ptr %22
  %85 = load i64, ptr %22
  store i64 %85, ptr %23
  %86 = load i64, ptr %23
  %87 = ashr i64 %86, 1
  store i64 %87, ptr %23
  %88 = load i64, ptr %23
  store i64 %88, ptr %24
  %89 = load i64, ptr %24
  %90 = shl i64 %89, 1
  store i64 %90, ptr %24
  %91 = load i64, ptr %24
  store i64 %91, ptr %25
  %92 = load i64, ptr %25
  %93 = add i64 %92, 1
  store i64 %93, ptr %25
  %94 = load i64, ptr %25
  store i64 %94, ptr %5
  %95 = load i64, ptr %18
  store i64 %95, ptr %6
  br label %L147
L170:                                                ; preds = %L151
  %96 = load i64, ptr %7
  store i64 %96, ptr %5
  %97 = load i64, ptr %8
  store i64 %97, ptr %6
  %98 = load i64, ptr %5
  %99 = load i64, ptr %6
  %100 = load ptr, ptr %ds
  %101 = load ptr, ptr %alloc
  %102 = musttail call cc 104 { { ptr, ptr }, { i64 } } @camlTailcall__collatz_odd_HIDE_STAMP(ptr %100, ptr %101, i64 %98, i64 %99)
  ret { { ptr, ptr }, { i64 } } %102
}

define cc 104 { { ptr, ptr }, { i64 } } @camlTailcall__tail_call_outside_HIDE_STAMP(ptr %0, ptr %1, i64 %2, i64 %3)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %5 = alloca i64
  store i64 %2, ptr %5
  %6 = alloca i64
  store i64 %3, ptr %6
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  br label %L1
L1:
  br label %L176
L176:                                                ; preds = %L1
  %16 = load i64, ptr %5
  store i64 %16, ptr %9
  %17 = load i64, ptr %6
  store i64 %17, ptr %10
  store ptr @camlTailcall2, ptr %11
  %18 = load i64, ptr %11
  %19 = add i64 %18, 0
  %20 = inttoptr i64 %19 to ptr
  %21 = load i64, ptr %20
  store i64 %21, ptr %12
  %22 = load i64, ptr %9
  store i64 %22, ptr %13
  %23 = load i64, ptr %13
  %24 = shl i64 %23, 1
  store i64 %24, ptr %13
  %25 = load i64, ptr %13
  store i64 %25, ptr %14
  %26 = load i64, ptr %14
  %27 = add i64 %26, -1
  store i64 %27, ptr %14
  %28 = load i64, ptr %9
  store i64 %28, ptr %15
  %29 = load i64, ptr %15
  %30 = add i64 %29, 2
  store i64 %30, ptr %15
  %31 = load i64, ptr %15
  store i64 %31, ptr %5
  %32 = load i64, ptr %14
  store i64 %32, ptr %6
  %33 = load i64, ptr %10
  store i64 %33, ptr %7
  %34 = load i64, ptr %12
  store i64 %34, ptr %8
  %35 = load i64, ptr %5
  %36 = load i64, ptr %6
  %37 = load i64, ptr %7
  %38 = load i64, ptr %8
  %39 = load ptr, ptr %ds
  %40 = load ptr, ptr %alloc
  %41 = musttail call cc 104 { { ptr, ptr }, { i64 } } @caml_apply3(ptr %39, ptr %40, i64 %35, i64 %36, i64 %37, i64 %38)
  ret { { ptr, ptr }, { i64 } } %41
}

define cc 104 { { ptr, ptr }, { i64 } } @camlTailcall__entry(ptr %0, ptr %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %3 = alloca i64
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca i64
  %22 = alloca i64
  %23 = alloca i64
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca i64
  %29 = alloca i64
  %30 = alloca i64
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca i64
  %36 = alloca i64
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca i64
  %42 = alloca i64
  %43 = alloca i64
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca i64
  %47 = alloca i64
  %48 = alloca i64
  %49 = alloca i64
  %50 = alloca i64
  %51 = alloca i64
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  br label %L1
L1:
  br label %L193
L193:                                                ; preds = %L1
  store i64 11, ptr %12
  store i64 15, ptr %13
  store i64 7, ptr %14
  %56 = load i64, ptr %14
  store i64 %56, ptr %15
  %57 = load i64, ptr %13
  store i64 %57, ptr %16
  %58 = load i64, ptr %12
  store i64 %58, ptr %17
  %59 = load i64, ptr %15
  store i64 %59, ptr %9
  %60 = load i64, ptr %16
  store i64 %60, ptr %10
  %61 = load i64, ptr %17
  store i64 %61, ptr %11
  br label %L195
L195:                                                ; preds = %L193, %L199
  %62 = load i64, ptr %11
  %63 = icmp slt i64 %62, 1
  br i1 %63, label %L197, label %64
64:
  %65 = load i64, ptr %11
  %66 = icmp sgt i64 %65, 1
  br i1 %66, label %L197, label %L207
L197:                                                ; preds = %L195
  %67 = load i64, ptr %11
  %68 = icmp slt i64 %67, 3
  br i1 %68, label %L199, label %69
69:
  %70 = load i64, ptr %11
  %71 = icmp sgt i64 %70, 3
  br i1 %71, label %L199, label %L204
L199:                                                ; preds = %L197
  %72 = load i64, ptr %11
  store i64 %72, ptr %18
  %73 = load i64, ptr %18
  %74 = add i64 %73, -2
  store i64 %74, ptr %18
  %75 = load i64, ptr %9
  store i64 %75, ptr %19
  %76 = load i64, ptr %19
  %77 = load i64, ptr %10
  %78 = add i64 %76, %77
  store i64 %78, ptr %19
  %79 = load i64, ptr %19
  store i64 %79, ptr %20
  %80 = load i64, ptr %20
  %81 = add i64 %80, -1
  store i64 %81, ptr %20
  %82 = load i64, ptr %10
  store i64 %82, ptr %21
  %83 = load i64, ptr %20
  store i64 %83, ptr %22
  %84 = load i64, ptr %18
  store i64 %84, ptr %23
  %85 = load i64, ptr %21
  store i64 %85, ptr %9
  %86 = load i64, ptr %22
  store i64 %86, ptr %10
  %87 = load i64, ptr %23
  store i64 %87, ptr %11
  br label %L195
L204:                                                ; preds = %L197
  %88 = load i64, ptr %10
  store i64 %88, ptr %24
  %89 = load i64, ptr %24
  store i64 %89, ptr %8
  br label %L211
L207:                                                ; preds = %L195
  %90 = load i64, ptr %9
  store i64 %90, ptr %25
  %91 = load i64, ptr %25
  store i64 %91, ptr %8
  br label %L211
L211:                                                ; preds = %L204, %L207
  store ptr @camlTailcall__const_block76, ptr %26
  store i64 1, ptr %27
  store ptr @camlStdlib__Format__fn$5b$2fworkspace_root$2fformat.ml$3a1458$2c4$2d$2d66$5d_550, ptr %28
  %92 = load i64, ptr %28
  store i64 %92, ptr %3
  %93 = load i64, ptr %27
  store i64 %93, ptr %4
  %94 = load i64, ptr %26
  store i64 %94, ptr %5
  %95 = load i64, ptr %3
  %96 = load i64, ptr %4
  %97 = load i64, ptr %5
  %98 = load ptr, ptr %ds
  %99 = load ptr, ptr %alloc
  %100 =  call cc 104 { { ptr, ptr }, { i64 } } @camlCamlinternalFormat__make_printf_HIDE_STAMP(ptr %98, ptr %99, i64 %95, i64 %96, i64 %97)
  %101 = extractvalue { { ptr, ptr }, { i64 } } %100, 0, 0
  store ptr %101, ptr %ds
  %102 = extractvalue { { ptr, ptr }, { i64 } } %100, 0, 1
  store ptr %102, ptr %alloc
  %103 = extractvalue { { ptr, ptr }, { i64 } } %100, 1, 0
  store i64 %103, ptr %3
  br label %L213
L213:                                                ; preds = %L211
  %104 = load i64, ptr %3
  store i64 %104, ptr %29
  %105 = load i64, ptr %29
  store i64 %105, ptr %30
  %106 = load i64, ptr %30
  %107 = add i64 %106, 0
  %108 = inttoptr i64 %107 to ptr
  %109 = load i64, ptr %108
  store i64 %109, ptr %31
  %110 = load i64, ptr %8
  store i64 %110, ptr %3
  %111 = load i64, ptr %30
  store i64 %111, ptr %4
  %112 = load i64, ptr %3
  %113 = load i64, ptr %4
  %114 = load ptr, ptr %ds
  %115 = load ptr, ptr %alloc
  %116 = load i64, ptr %31
  %117 = inttoptr i64 %116 to ptr
  %118 =  call cc 104 { { ptr, ptr }, { i64 } } %117(ptr %114, ptr %115, i64 %112, i64 %113)
  %119 = extractvalue { { ptr, ptr }, { i64 } } %118, 0, 0
  store ptr %119, ptr %ds
  %120 = extractvalue { { ptr, ptr }, { i64 } } %118, 0, 1
  store ptr %120, ptr %alloc
  %121 = extractvalue { { ptr, ptr }, { i64 } } %118, 1, 0
  store i64 %121, ptr %3
  br label %L214
L214:                                                ; preds = %L213
  %122 = load i64, ptr %3
  store i64 %122, ptr %32
  %123 = load i64, ptr %32
  store i64 %123, ptr %33
  store i64 1, ptr %34
  store i64 55, ptr %35
  %124 = load i64, ptr %35
  store i64 %124, ptr %3
  %125 = load i64, ptr %34
  store i64 %125, ptr %4
  %126 = load i64, ptr %3
  %127 = load i64, ptr %4
  %128 = load ptr, ptr %ds
  %129 = load ptr, ptr %alloc
  %130 =  call cc 104 { { ptr, ptr }, { i64 } } @camlTailcall__collatz_odd_HIDE_STAMP(ptr %128, ptr %129, i64 %126, i64 %127)
  %131 = extractvalue { { ptr, ptr }, { i64 } } %130, 0, 0
  store ptr %131, ptr %ds
  %132 = extractvalue { { ptr, ptr }, { i64 } } %130, 0, 1
  store ptr %132, ptr %alloc
  %133 = extractvalue { { ptr, ptr }, { i64 } } %130, 1, 0
  store i64 %133, ptr %3
  br label %L216
L216:                                                ; preds = %L214
  %134 = load i64, ptr %3
  store i64 %134, ptr %36
  %135 = load i64, ptr %36
  store i64 %135, ptr %37
  store ptr @camlTailcall__const_block88, ptr %38
  store i64 1, ptr %39
  store ptr @camlStdlib__Format__fn$5b$2fworkspace_root$2fformat.ml$3a1458$2c4$2d$2d66$5d_550, ptr %40
  %136 = load i64, ptr %40
  store i64 %136, ptr %3
  %137 = load i64, ptr %39
  store i64 %137, ptr %4
  %138 = load i64, ptr %38
  store i64 %138, ptr %5
  %139 = load i64, ptr %3
  %140 = load i64, ptr %4
  %141 = load i64, ptr %5
  %142 = load ptr, ptr %ds
  %143 = load ptr, ptr %alloc
  %144 =  call cc 104 { { ptr, ptr }, { i64 } } @camlCamlinternalFormat__make_printf_HIDE_STAMP(ptr %142, ptr %143, i64 %139, i64 %140, i64 %141)
  %145 = extractvalue { { ptr, ptr }, { i64 } } %144, 0, 0
  store ptr %145, ptr %ds
  %146 = extractvalue { { ptr, ptr }, { i64 } } %144, 0, 1
  store ptr %146, ptr %alloc
  %147 = extractvalue { { ptr, ptr }, { i64 } } %144, 1, 0
  store i64 %147, ptr %3
  br label %L217
L217:                                                ; preds = %L216
  %148 = load i64, ptr %3
  store i64 %148, ptr %41
  %149 = load i64, ptr %41
  store i64 %149, ptr %42
  %150 = load i64, ptr %42
  %151 = add i64 %150, 0
  %152 = inttoptr i64 %151 to ptr
  %153 = load i64, ptr %152
  store i64 %153, ptr %43
  %154 = load i64, ptr %37
  store i64 %154, ptr %3
  %155 = load i64, ptr %42
  store i64 %155, ptr %4
  %156 = load i64, ptr %3
  %157 = load i64, ptr %4
  %158 = load ptr, ptr %ds
  %159 = load ptr, ptr %alloc
  %160 = load i64, ptr %43
  %161 = inttoptr i64 %160 to ptr
  %162 =  call cc 104 { { ptr, ptr }, { i64 } } %161(ptr %158, ptr %159, i64 %156, i64 %157)
  %163 = extractvalue { { ptr, ptr }, { i64 } } %162, 0, 0
  store ptr %163, ptr %ds
  %164 = extractvalue { { ptr, ptr }, { i64 } } %162, 0, 1
  store ptr %164, ptr %alloc
  %165 = extractvalue { { ptr, ptr }, { i64 } } %162, 1, 0
  store i64 %165, ptr %3
  br label %L218
L218:                                                ; preds = %L217
  %166 = load i64, ptr %3
  store i64 %166, ptr %44
  %167 = load i64, ptr %44
  store i64 %167, ptr %45
  store ptr @camlTailcall2, ptr %46
  %168 = load i64, ptr %46
  %169 = add i64 %168, 0
  %170 = inttoptr i64 %169 to ptr
  %171 = load i64, ptr %170
  store i64 %171, ptr %47
  store ptr @camlTailcall__float94, ptr %48
  store i64 149, ptr %49
  store i64 77, ptr %50
  %172 = load i64, ptr %50
  store i64 %172, ptr %3
  %173 = load i64, ptr %49
  store i64 %173, ptr %4
  %174 = load i64, ptr %48
  store i64 %174, ptr %5
  %175 = load i64, ptr %47
  store i64 %175, ptr %6
  %176 = load i64, ptr %3
  %177 = load i64, ptr %4
  %178 = load i64, ptr %5
  %179 = load i64, ptr %6
  %180 = load ptr, ptr %ds
  %181 = load ptr, ptr %alloc
  %182 =  call cc 104 { { ptr, ptr }, { i64 } } @caml_apply3(ptr %180, ptr %181, i64 %176, i64 %177, i64 %178, i64 %179)
  %183 = extractvalue { { ptr, ptr }, { i64 } } %182, 0, 0
  store ptr %183, ptr %ds
  %184 = extractvalue { { ptr, ptr }, { i64 } } %182, 0, 1
  store ptr %184, ptr %alloc
  %185 = extractvalue { { ptr, ptr }, { i64 } } %182, 1, 0
  store i64 %185, ptr %3
  br label %L220
L220:                                                ; preds = %L218
  %186 = load i64, ptr %3
  store i64 %186, ptr %51
  %187 = load i64, ptr %51
  store i64 %187, ptr %52
  store ptr @camlTailcall, ptr %53
  %188 = load i64, ptr %53
  store i64 %188, ptr %54
  %189 = load i64, ptr %54
  store i64 %189, ptr %7
  store i64 1, ptr %55
  %190 = load i64, ptr %55
  store i64 %190, ptr %3
  %191 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %192 = load ptr, ptr %ds
  %193 = insertvalue { { ptr, ptr }, { i64 } } %191, ptr %192, 0, 0
  %194 = load ptr, ptr %alloc
  %195 = insertvalue { { ptr, ptr }, { i64 } } %193, ptr %194, 0, 1
  %196 = load i64, ptr %3
  %197 = insertvalue { { ptr, ptr }, { i64 } } %195, i64 %196, 1, 0
  ret { { ptr, ptr }, { i64 } } %197
}

declare cc 104 { { ptr, ptr }, { i64 } } @camlCamlinternalFormat__make_printf_HIDE_STAMP(ptr, ptr, i64, i64, i64)
declare cc 104 { { ptr, ptr }, { i64 } } @caml_apply3(ptr, ptr, i64, i64, i64, i64)
declare i64 @llvm.read_register.i64(metadata)
declare void @llvm.write_register.i64(metadata, i64)

@camlStdlib__Format__fn$5b$2fworkspace_root$2fformat.ml$3a1458$2c4$2d$2d66$5d_550 = external global ptr
@camlTailcall2 = external global ptr
@caml_curry2 = external global ptr
@caml_curry3 = external global ptr

@camlTailcall__data_end = global {  } {  }, align 8
define void @camlTailcall__code_end() { ret void }
@camlTailcall__frametable = global {  } {  }, align 8
