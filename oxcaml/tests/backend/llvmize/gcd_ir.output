source_filename = "gcd.ml"

@camlGcd__data_begin = global {  } {  }, align 8
define void @camlGcd__code_begin() { ret void }

@camlGcd__gc_roots = global { i64 } { i64 0 }, align 8
@.header.camlGcd = global { i64 } { i64 1792 }, align 8
@camlGcd = global { ptr } { ptr @camlGcd__gcd_1 }, align 8
@.header.camlGcd__gcd_1 = global { i64 } { i64 3063 }, align 8
@camlGcd__gcd_1 = global { ptr, i64 } { ptr @camlGcd__gcd_HIDE_STAMP, i64 108086391056891909 }, align 8
define cc 104 { { ptr, ptr }, { i64 } } @camlGcd__gcd_HIDE_STAMP(ptr %0, ptr %1, i64 %2)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca i64
  %22 = alloca i64
  %23 = alloca i64
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca i64
  %29 = alloca i64
  %30 = alloca i64
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca i64
  %36 = alloca i64
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  br label %L1
L1:
  br label %L101
L101:                                                ; preds = %L1
  %41 = load i64, ptr %4
  store i64 %41, ptr %7
  br label %L109
L109:                                                ; preds = %L101, %L123
  store ptr @camlGcd_data, ptr %8
  %42 = load i64, ptr %8
  store i64 %42, ptr %9
  %43 = load i64, ptr %9
  %44 = add i64 %43, 8
  store i64 %44, ptr %9
  %45 = load i64, ptr %9
  %46 = add i64 %45, 0
  %47 = inttoptr i64 %46 to ptr
  %48 = load i64, ptr %47
  store i64 %48, ptr %10
  %49 = load i64, ptr %10
  store i64 %49, ptr %11
  %50 = load i64, ptr %11
  %51 = add i64 %50, 0
  %52 = inttoptr i64 %51 to ptr
  %53 = load i64, ptr %52
  store i64 %53, ptr %12
  %54 = load i64, ptr %12
  %55 = icmp slt i64 %54, 1
  br i1 %55, label %L114, label %56
56:
  %57 = load i64, ptr %12
  %58 = icmp sgt i64 %57, 1
  br i1 %58, label %L114, label %L142
L114:                                                ; preds = %L109
  %59 = load i64, ptr %11
  %60 = add i64 %59, 0
  %61 = inttoptr i64 %60 to ptr
  %62 = load i64, ptr %61
  store i64 %62, ptr %13
  %63 = load i64, ptr %13
  store i64 %63, ptr %14
  %64 = load i64, ptr %11
  %65 = add i64 %64, 0
  %66 = inttoptr i64 %65 to ptr
  %67 = load i64, ptr %66
  store i64 %67, ptr %15
  %68 = load i64, ptr %15
  store i64 %68, ptr %16
  store ptr @camlGcd_data, ptr %17
  %69 = load i64, ptr %17
  %70 = add i64 %69, 0
  %71 = inttoptr i64 %70 to ptr
  %72 = load i64, ptr %71
  store i64 %72, ptr %18
  %73 = load i64, ptr %18
  store i64 %73, ptr %19
  %74 = load i64, ptr %19
  %75 = add i64 %74, 0
  %76 = inttoptr i64 %75 to ptr
  %77 = load i64, ptr %76
  store i64 %77, ptr %20
  %78 = load i64, ptr %20
  store i64 %78, ptr %21
  %79 = load i64, ptr %16
  %80 = icmp slt i64 %79, 1
  br i1 %80, label %L123, label %81
81:
  %82 = load i64, ptr %16
  %83 = icmp sgt i64 %82, 1
  br i1 %83, label %L123, label %L135
L123:                                                ; preds = %L114
  %84 = load i64, ptr %19
  %85 = add i64 %84, 0
  %86 = inttoptr i64 %85 to ptr
  %87 = load i64, ptr %14
  store i64 %87, ptr %86
  store i64 1, ptr %22
  %88 = load i64, ptr %22
  store i64 %88, ptr %23
  %89 = load i64, ptr %16
  store i64 %89, ptr %24
  %90 = load i64, ptr %24
  %91 = ashr i64 %90, 1
  store i64 %91, ptr %24
  %92 = load i64, ptr %21
  store i64 %92, ptr %25
  %93 = load i64, ptr %25
  %94 = ashr i64 %93, 1
  store i64 %94, ptr %25
  %95 = load i64, ptr %25
  store i64 %95, ptr %4
  %96 = load i64, ptr %24
  store i64 %96, ptr %6
  %97 = load i64, ptr %4
  %98 = load i64, ptr %6
  %99 = srem i64 %97, %98
  store i64 %99, ptr %5
  %100 = load i64, ptr %5
  store i64 %100, ptr %26
  %101 = load i64, ptr %26
  store i64 %101, ptr %27
  %102 = load i64, ptr %27
  %103 = shl i64 %102, 1
  store i64 %103, ptr %27
  %104 = load i64, ptr %27
  store i64 %104, ptr %28
  %105 = load i64, ptr %28
  %106 = add i64 %105, 1
  store i64 %106, ptr %28
  %107 = load i64, ptr %11
  %108 = add i64 %107, 0
  %109 = inttoptr i64 %108 to ptr
  %110 = load i64, ptr %28
  store i64 %110, ptr %109
  store i64 1, ptr %29
  %111 = load i64, ptr %29
  store i64 %111, ptr %30
  br label %L109
L135:                                                ; preds = %L114
  store ptr @caml_exn_Division_by_zero, ptr %31
  %112 = load i64, ptr %31
  store i64 %112, ptr %4
  %113 = load i64, ptr %ds
  %114 = add i64 %113, 48
  %115 = inttoptr i64 %114 to ptr
  %116 = load i64, ptr %115
  %117 = inttoptr i64 %116 to ptr
  %118 = load i64, ptr %117
  %119 = add i64 %116, 8
  %120 = inttoptr i64 %119 to ptr
  %121 = load ptr, ptr %120
  %122 = load i64, ptr %4
  %123 = add i64 %116, 16
  store i64 %118, ptr %115
  call void @llvm.write_register.i64(metadata !{!"rsp\00"}, i64 %123)
  call void asm sideeffect "movq $0, %rax; jmpq *$1", "r,r,~{rax}"(i64 %122, ptr %121)
  unreachable
L142:                                                ; preds = %L109
  store ptr @camlGcd_data, ptr %32
  %124 = load i64, ptr %32
  store i64 %124, ptr %33
  %125 = load i64, ptr %33
  %126 = add i64 %125, 16
  store i64 %126, ptr %33
  %127 = load i64, ptr %33
  %128 = add i64 %127, 0
  %129 = inttoptr i64 %128 to ptr
  %130 = load i64, ptr %129
  store i64 %130, ptr %34
  store ptr @camlGcd_data, ptr %35
  %131 = load i64, ptr %35
  %132 = add i64 %131, 0
  %133 = inttoptr i64 %132 to ptr
  %134 = load i64, ptr %133
  store i64 %134, ptr %36
  %135 = load i64, ptr %36
  %136 = add i64 %135, 0
  %137 = inttoptr i64 %136 to ptr
  %138 = load i64, ptr %137
  store i64 %138, ptr %37
  %139 = load i64, ptr %34
  %140 = add i64 %139, 0
  %141 = inttoptr i64 %140 to ptr
  %142 = load i64, ptr %37
  store i64 %142, ptr %141
  store i64 1, ptr %38
  %143 = load i64, ptr %38
  store i64 %143, ptr %39
  store i64 1, ptr %40
  %144 = load i64, ptr %40
  store i64 %144, ptr %4
  %145 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %146 = load ptr, ptr %ds
  %147 = insertvalue { { ptr, ptr }, { i64 } } %145, ptr %146, 0, 0
  %148 = load ptr, ptr %alloc
  %149 = insertvalue { { ptr, ptr }, { i64 } } %147, ptr %148, 0, 1
  %150 = load i64, ptr %4
  %151 = insertvalue { { ptr, ptr }, { i64 } } %149, i64 %150, 1, 0
  ret { { ptr, ptr }, { i64 } } %151
}

define cc 104 { { ptr, ptr }, { i64 } } @camlGcd__entry(ptr %0, ptr %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %3 = alloca i64
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  br label %L1
L1:
  br label %L154
L154:                                                ; preds = %L1
  store ptr @camlGcd, ptr %5
  %8 = load i64, ptr %5
  store i64 %8, ptr %6
  %9 = load i64, ptr %6
  store i64 %9, ptr %4
  store i64 1, ptr %7
  %10 = load i64, ptr %7
  store i64 %10, ptr %3
  %11 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %12 = load ptr, ptr %ds
  %13 = insertvalue { { ptr, ptr }, { i64 } } %11, ptr %12, 0, 0
  %14 = load ptr, ptr %alloc
  %15 = insertvalue { { ptr, ptr }, { i64 } } %13, ptr %14, 0, 1
  %16 = load i64, ptr %3
  %17 = insertvalue { { ptr, ptr }, { i64 } } %15, i64 %16, 1, 0
  ret { { ptr, ptr }, { i64 } } %17
}

declare i64 @llvm.read_register.i64(metadata)
declare void @llvm.write_register.i64(metadata, i64)

@camlGcd_data = external global ptr
@caml_exn_Division_by_zero = external global ptr

@camlGcd__data_end = global {  } {  }, align 8
define void @camlGcd__code_end() { ret void }
@camlGcd__frametable = global {  } {  }, align 8
