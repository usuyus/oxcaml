source_filename = "gcd.ml"

@camlGcd__data_begin = global {  } {  }, align 8
define void @camlGcd__code_begin() { ret void }

@camlGcd__gc_roots = global { i64 } { i64 0 }, align 8
@.header.camlGcd = global { i64 } { i64 1792 }, align 8
@camlGcd = global { ptr } { ptr @camlGcd__gcd_1 }, align 8
@.header.camlGcd__gcd_1 = global { i64 } { i64 3063 }, align 8
@camlGcd__gcd_1 = global { ptr, i64 } { ptr @camlGcd__gcd_HIDE_STAMP, i64 108086391056891909 }, align 8
define cc 104 { { ptr }, { i64 } } @camlGcd__gcd_HIDE_STAMP(ptr %0, i64 %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %3 = alloca i64
  store i64 %1, ptr %3
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca i64
  %22 = alloca i64
  %23 = alloca i64
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca i64
  %29 = alloca i64
  %30 = alloca i64
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca i64
  %36 = alloca i64
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  br label %L1
L1:
  br label %L101
L101:                                                ; preds = %L1
  %40 = load i64, ptr %3
  store i64 %40, ptr %6
  br label %L109
L109:                                                ; preds = %L101, %L123
  store ptr @camlGcd_data, ptr %7
  %41 = load i64, ptr %7
  store i64 %41, ptr %8
  %42 = load i64, ptr %8
  %43 = add i64 %42, 8
  store i64 %43, ptr %8
  %44 = load i64, ptr %8
  %45 = add i64 %44, 0
  %46 = inttoptr i64 %45 to ptr
  %47 = load i64, ptr %46
  store i64 %47, ptr %9
  %48 = load i64, ptr %9
  store i64 %48, ptr %10
  %49 = load i64, ptr %10
  %50 = add i64 %49, 0
  %51 = inttoptr i64 %50 to ptr
  %52 = load i64, ptr %51
  store i64 %52, ptr %11
  %53 = load i64, ptr %11
  %54 = icmp slt i64 %53, 1
  br i1 %54, label %L114, label %55
55:
  %56 = load i64, ptr %11
  %57 = icmp sgt i64 %56, 1
  br i1 %57, label %L114, label %L142
L114:                                                ; preds = %L109
  %58 = load i64, ptr %10
  %59 = add i64 %58, 0
  %60 = inttoptr i64 %59 to ptr
  %61 = load i64, ptr %60
  store i64 %61, ptr %12
  %62 = load i64, ptr %12
  store i64 %62, ptr %13
  %63 = load i64, ptr %10
  %64 = add i64 %63, 0
  %65 = inttoptr i64 %64 to ptr
  %66 = load i64, ptr %65
  store i64 %66, ptr %14
  %67 = load i64, ptr %14
  store i64 %67, ptr %15
  store ptr @camlGcd_data, ptr %16
  %68 = load i64, ptr %16
  %69 = add i64 %68, 0
  %70 = inttoptr i64 %69 to ptr
  %71 = load i64, ptr %70
  store i64 %71, ptr %17
  %72 = load i64, ptr %17
  store i64 %72, ptr %18
  %73 = load i64, ptr %18
  %74 = add i64 %73, 0
  %75 = inttoptr i64 %74 to ptr
  %76 = load i64, ptr %75
  store i64 %76, ptr %19
  %77 = load i64, ptr %19
  store i64 %77, ptr %20
  %78 = load i64, ptr %15
  %79 = icmp slt i64 %78, 1
  br i1 %79, label %L123, label %80
80:
  %81 = load i64, ptr %15
  %82 = icmp sgt i64 %81, 1
  br i1 %82, label %L123, label %L135
L123:                                                ; preds = %L114
  %83 = load i64, ptr %18
  %84 = add i64 %83, 0
  %85 = inttoptr i64 %84 to ptr
  %86 = load i64, ptr %13
  store i64 %86, ptr %85
  store i64 1, ptr %21
  %87 = load i64, ptr %21
  store i64 %87, ptr %22
  %88 = load i64, ptr %15
  store i64 %88, ptr %23
  %89 = load i64, ptr %23
  %90 = ashr i64 %89, 1
  store i64 %90, ptr %23
  %91 = load i64, ptr %20
  store i64 %91, ptr %24
  %92 = load i64, ptr %24
  %93 = ashr i64 %92, 1
  store i64 %93, ptr %24
  %94 = load i64, ptr %24
  store i64 %94, ptr %3
  %95 = load i64, ptr %23
  store i64 %95, ptr %5
  %96 = load i64, ptr %3
  %97 = load i64, ptr %5
  %98 = srem i64 %96, %97
  store i64 %98, ptr %4
  %99 = load i64, ptr %4
  store i64 %99, ptr %25
  %100 = load i64, ptr %25
  store i64 %100, ptr %26
  %101 = load i64, ptr %26
  %102 = shl i64 %101, 1
  store i64 %102, ptr %26
  %103 = load i64, ptr %26
  store i64 %103, ptr %27
  %104 = load i64, ptr %27
  %105 = add i64 %104, 1
  store i64 %105, ptr %27
  %106 = load i64, ptr %10
  %107 = add i64 %106, 0
  %108 = inttoptr i64 %107 to ptr
  %109 = load i64, ptr %27
  store i64 %109, ptr %108
  store i64 1, ptr %28
  %110 = load i64, ptr %28
  store i64 %110, ptr %29
  br label %L109
L135:                                                ; preds = %L114
  store ptr @caml_exn_Division_by_zero, ptr %30
  %111 = load i64, ptr %30
  store i64 %111, ptr %3
  %112 = load i64, ptr %ds
  %113 = add i64 %112, 48
  %114 = inttoptr i64 %113 to ptr
  %115 = load i64, ptr %114
  %116 = inttoptr i64 %115 to ptr
  %117 = load i64, ptr %116
  %118 = add i64 %115, 8
  %119 = inttoptr i64 %118 to ptr
  %120 = load ptr, ptr %119
  %121 = load i64, ptr %3
  %122 = add i64 %115, 16
  store i64 %117, ptr %114
  call void @llvm.write_register.i64(metadata !{!"rsp\00"}, i64 %122)
  call void asm sideeffect "movq $0, %rax; jmpq *$1", "r,r,~{rax}"(i64 %121, ptr %120)
  unreachable
L142:                                                ; preds = %L109
  store ptr @camlGcd_data, ptr %31
  %123 = load i64, ptr %31
  store i64 %123, ptr %32
  %124 = load i64, ptr %32
  %125 = add i64 %124, 16
  store i64 %125, ptr %32
  %126 = load i64, ptr %32
  %127 = add i64 %126, 0
  %128 = inttoptr i64 %127 to ptr
  %129 = load i64, ptr %128
  store i64 %129, ptr %33
  store ptr @camlGcd_data, ptr %34
  %130 = load i64, ptr %34
  %131 = add i64 %130, 0
  %132 = inttoptr i64 %131 to ptr
  %133 = load i64, ptr %132
  store i64 %133, ptr %35
  %134 = load i64, ptr %35
  %135 = add i64 %134, 0
  %136 = inttoptr i64 %135 to ptr
  %137 = load i64, ptr %136
  store i64 %137, ptr %36
  %138 = load i64, ptr %33
  %139 = add i64 %138, 0
  %140 = inttoptr i64 %139 to ptr
  %141 = load i64, ptr %36
  store i64 %141, ptr %140
  store i64 1, ptr %37
  %142 = load i64, ptr %37
  store i64 %142, ptr %38
  store i64 1, ptr %39
  %143 = load i64, ptr %39
  store i64 %143, ptr %3
  %144 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %145 = load ptr, ptr %ds
  %146 = insertvalue { { ptr }, { i64 } } %144, ptr %145, 0, 0
  %147 = load i64, ptr %3
  %148 = insertvalue { { ptr }, { i64 } } %146, i64 %147, 1, 0
  ret { { ptr }, { i64 } } %148
}

define cc 104 { { ptr }, { i64 } } @camlGcd__entry(ptr %0)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %2 = alloca i64
  %3 = alloca i64
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  br label %L1
L1:
  br label %L154
L154:                                                ; preds = %L1
  store ptr @camlGcd, ptr %4
  %7 = load i64, ptr %4
  store i64 %7, ptr %5
  %8 = load i64, ptr %5
  store i64 %8, ptr %3
  store i64 1, ptr %6
  %9 = load i64, ptr %6
  store i64 %9, ptr %2
  %10 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %11 = load ptr, ptr %ds
  %12 = insertvalue { { ptr }, { i64 } } %10, ptr %11, 0, 0
  %13 = load i64, ptr %2
  %14 = insertvalue { { ptr }, { i64 } } %12, i64 %13, 1, 0
  ret { { ptr }, { i64 } } %14
}

declare i64 @llvm.read_register.i64(metadata)
declare void @llvm.write_register.i64(metadata, i64)
declare i32 @llvm.eh.ocaml.try() returns_twice
declare void @llvm.eh.ocaml.touch(ptr)

@camlGcd_data = external global ptr
@caml_exn_Division_by_zero = external global ptr

@camlGcd__data_end = global {  } {  }, align 8
define void @camlGcd__code_end() { ret void }
@camlGcd__frametable = global {  } {  }, align 8
