source_filename = "const_val.ml"

@camlConst_val__data_begin = global {  } {  }, align 8
define void @camlConst_val__code_begin() { ret void }

@camlConst_val__gc_roots = global { i64 } { i64 0 }, align 8
@.header.camlConst_val = global { i64 } { i64 1792 }, align 8
@camlConst_val = global { i64 } { i64 75 }, align 8
define cc 104 { { ptr }, { i64 } } @camlConst_val__entry(ptr %0)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %2 = alloca i64
  %3 = alloca i64
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  br label %L1
L1:
  br label %L104
L104:                                                ; preds = %L1
  store ptr @camlConst_val, ptr %4
  %7 = load i64, ptr %4
  store i64 %7, ptr %5
  %8 = load i64, ptr %5
  store i64 %8, ptr %3
  store i64 1, ptr %6
  %9 = load i64, ptr %6
  store i64 %9, ptr %2
  %10 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %11 = load ptr, ptr %ds
  %12 = insertvalue { { ptr }, { i64 } } %10, ptr %11, 0, 0
  %13 = load i64, ptr %2
  %14 = insertvalue { { ptr }, { i64 } } %12, i64 %13, 1, 0
  ret { { ptr }, { i64 } } %14
}

declare i64 @llvm.read_register.i64(metadata)
declare void @llvm.write_register.i64(metadata, i64)
declare i32 @llvm.eh.ocaml.try()
define private cc 104 {ptr, i32} @wrap_try(ptr %r14) returns_twice noinline {
  %1 = call i32 @llvm.eh.ocaml.try()
  %t1 = extractvalue {{ptr, i32}} poison, 0
  %t2 = insertvalue {ptr, i32} %t1, ptr %r14, 0
  %t3 = insertvalue {ptr, i32} %t2, i32 %1, 1
  ret {ptr, i32} %t3
}


@camlConst_val__data_end = global {  } {  }, align 8
define void @camlConst_val__code_end() { ret void }
@camlConst_val__frametable = global {  } {  }, align 8
