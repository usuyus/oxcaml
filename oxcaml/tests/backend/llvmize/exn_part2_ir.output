source_filename = "exn_part2.ml"

@camlExn_part2__data_begin = global {  } {  }, align 8
define void @camlExn_part2__code_begin() { ret void }

@camlExn_part2__gc_roots = global { ptr, i64 } { ptr @camlExn_part2__Exn3169, i64 0 }, align 8
@.header.camlExn_part2 = global { i64 } { i64 8960 }, align 8
@camlExn_part2 = global { ptr, ptr, ptr, ptr, ptr, ptr, ptr, ptr } { ptr @camlExn_part2__Exn3169, ptr @camlExn_part2__catch_exn1_from_llvm_7, ptr @camlExn_part2__raise_exn1_catch_exn2_from_llvm_8, ptr @camlExn_part2__catch_exn1_nested_from_llvm_9, ptr @camlExn_part2__raise_1_10, ptr @camlExn_part2__raise_2_11, ptr @camlExn_part2__raise_HIDE_STAMP, ptr @camlExn_part2__complicated_13 }, align 8
@.header.camlExn_part2__complicated_13 = global { i64 } { i64 3063 }, align 8
@camlExn_part2__complicated_13 = global { ptr, i64 } { ptr @camlExn_part2__complicated_HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlExn_part2__raise_HIDE_STAMP = global { i64 } { i64 3063 }, align 8
@camlExn_part2__raise_3_12 = global { ptr, i64 } { ptr @camlExn_part2__raise_3_HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlExn_part2__raise_HIDE_STAMP = global { i64 } { i64 3063 }, align 8
@camlExn_part2__raise_2_11 = global { ptr, i64 } { ptr @camlExn_part2__raise_2_HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlExn_part2__raise_HIDE_STAMP = global { i64 } { i64 4087 }, align 8
@camlExn_part2__raise_1_10 = global { ptr, i64, ptr } { ptr @caml_curry2, i64 180143985094819847, ptr @camlExn_part2__raise_1_HIDE_STAMP }, align 8
@.header.camlExn_part2__catch_exn1_nested_from_llvm_9 = global { i64 } { i64 3063 }, align 8
@camlExn_part2__catch_exn1_nested_from_llvm_9 = global { ptr, i64 } { ptr @camlExn_part2__catch_exn1_nested_from_llvm_HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlExn_part2__raise_exn1_catch_exn2_from_llvm_8 = global { i64 } { i64 3063 }, align 8
@camlExn_part2__raise_exn1_catch_exn2_from_llvm_8 = global { ptr, i64 } { ptr @camlExn_part2__raise_exn1_catch_exn2_from_llvm_HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlExn_part2__catch_exn1_from_llvm_7 = global { i64 } { i64 3063 }, align 8
@camlExn_part2__catch_exn1_from_llvm_7 = global { ptr, i64 } { ptr @camlExn_part2__catch_exn1_from_llvm_HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlExn_part2__Exn3169 = global { i64 } { i64 3064 }, align 8
@camlExn_part2__Exn3169 = global { ptr, i64 } { ptr @camlExn_part2__immstring6, i64 1 }, align 8
@.header.camlExn_part2__immstring6 = global { i64 } { i64 3068 }, align 8
@camlExn_part2__immstring6 = global { [ 14 x i8 ], [ 1 x i8 ], i8 } { [ 14 x i8 ] c"\45\78\6e\5f\70\61\72\74\32\2e\45\78\6e\33", [ 1 x i8 ] zeroinitializer, i8 1 }, align 8
define cc 104 { { ptr }, { i64 } } @camlExn_part2__catch_exn1_from_llvm_HIDE_STAMP(ptr %0, i64 %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %3 = alloca i64
  store i64 %1, ptr %3
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca i64
  %22 = alloca i64
  %23 = alloca i64
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca i64
  %29 = alloca i64
  %30 = alloca i64
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca i64
  %36 = alloca i64
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca i64
  %42 = alloca i64
  %43 = alloca i64
  %44 = alloca i64
  br label %L1
L1:
  br label %L101
L101:                                                ; preds = %L1
  %45 = load i64, ptr %3
  store i64 %45, ptr %5
  store ptr @camlExn_part1, ptr %6
  %46 = load i64, ptr %6
  store i64 %46, ptr %7
  %47 = load i64, ptr %7
  %48 = add i64 %47, 16
  store i64 %48, ptr %7
  %49 = load i64, ptr %7
  %50 = add i64 %49, 0
  %51 = inttoptr i64 %50 to ptr
  %52 = load i64, ptr %51
  store i64 %52, ptr %8
  %53 = load i64, ptr %8
  store i64 %53, ptr %9
  %54 = load i64, ptr %ds
  %55 = add i64 %54, 64
  %56 = inttoptr i64 %55 to ptr
  %57 = load i64, ptr %56
  store i64 %57, ptr %10
  %58 = load i64, ptr %10
  store i64 %58, ptr %11
  call void asm sideeffect "", "~{rax},~{rbx},~{rcx},~{rdx},~{rsi},~{rdi},~{r8},~{r9},~{r10},~{r11},~{r12},~{r13},~{r14},~{r15}"()
  %59 = call  i32 @llvm.eh.ocaml.try() returns_twice
  %60 = trunc i32 %59 to i1
  br i1 %60, label %L106, label %61
61:
  %62 = call  ptr @llvm.stacksave()
  %63 = alloca { i64, i64, i64, i64 }
  %64 = load i64, ptr %ds
  %65 = add i64 %64, 48
  %66 = inttoptr i64 %65 to ptr
  %67 = load i64, ptr %66
  %68 = ptrtoint ptr %63 to i64
  %69 = add i64 %68, 16
  %70 = inttoptr i64 %69 to ptr
  %71 = ptrtoint ptr %63 to i64
  %72 = add i64 %71, 8
  %73 = inttoptr i64 %72 to ptr
  %74 = ptrtoint ptr %63 to i64
  %75 = add i64 %74, 0
  %76 = inttoptr i64 %75 to ptr
  call void asm sideeffect "mov %rbp, ($0)", "r"(ptr %70)
  store ptr blockaddress(@camlExn_part2__catch_exn1_from_llvm_HIDE_STAMP, %L106), ptr %73
  store i64 %67, ptr %76
  store ptr %63, ptr %66
  store i64 5, ptr %13
  %77 = load i64, ptr %9
  %78 = add i64 %77, 0
  %79 = inttoptr i64 %78 to ptr
  %80 = load i64, ptr %13
  store i64 %80, ptr %79
  store i64 1, ptr %14
  %81 = load i64, ptr %14
  store i64 %81, ptr %15
  store ptr @camlExn_part1, ptr %16
  %82 = load i64, ptr %16
  store i64 %82, ptr %17
  %83 = load i64, ptr %17
  %84 = add i64 %83, 40
  store i64 %84, ptr %17
  %85 = load i64, ptr %17
  %86 = add i64 %85, 0
  %87 = inttoptr i64 %86 to ptr
  %88 = load i64, ptr %87
  store i64 %88, ptr %18
  %89 = load i64, ptr %18
  store i64 %89, ptr %19
  store i64 1, ptr %20
  %90 = load i64, ptr %19
  %91 = add i64 %90, 0
  %92 = inttoptr i64 %91 to ptr
  %93 = load i64, ptr %92
  store i64 %93, ptr %21
  %94 = load i64, ptr %20
  store i64 %94, ptr %3
  %95 = load i64, ptr %19
  store i64 %95, ptr %4
  %96 = load i64, ptr %3
  %97 = load i64, ptr %4
  %98 = load ptr, ptr %ds
  %99 = load i64, ptr %21
  %100 = inttoptr i64 %99 to ptr
  call void asm sideeffect "push %rbp", "~{rsp}"()
  %101 = call cc 104 { { ptr }, { i64 } } %100(ptr %98, i64 %96, i64 %97)
  call void asm sideeffect "pop %rbp", "~{rsp}"()
  %102 = extractvalue { { ptr }, { i64 } } %101, 0, 0
  store ptr %102, ptr %ds
  %103 = extractvalue { { ptr }, { i64 } } %101, 1, 0
  store i64 %103, ptr %3
  br label %L117
L117:                                                ; preds = %L101
  %104 = load i64, ptr %3
  store i64 %104, ptr %22
  %105 = load i64, ptr %22
  store i64 %105, ptr %23
  %106 = load i64, ptr %ds
  %107 = add i64 %106, 48
  %108 = inttoptr i64 %107 to ptr
  %109 = load i64, ptr %63
  store i64 %109, ptr %108
  call  void @llvm.stackrestore(ptr %62)
  %110 = load i64, ptr %23
  store i64 %110, ptr %3
  %111 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %112 = load ptr, ptr %ds
  %113 = insertvalue { { ptr }, { i64 } } %111, ptr %112, 0, 0
  %114 = load i64, ptr %3
  %115 = insertvalue { { ptr }, { i64 } } %113, i64 %114, 1, 0
  ret { { ptr }, { i64 } } %115
L106:                                                ; preds = %L101
  call void asm sideeffect "pop %rbp; addq $$8, %rsp", ""()
  call  void @llvm.eh.ocaml.touch(ptr %9)
  call  void @llvm.eh.ocaml.touch(ptr %11)
  %116 = call i64 asm sideeffect "movq %rax, $0", "=r,~{rax}"()
  store i64 %116, ptr %3
  %117 = load i64, ptr %3
  store i64 %117, ptr %12
  %118 = load i64, ptr %11
  %119 = load i64, ptr %ds
  %120 = add i64 %119, 64
  %121 = inttoptr i64 %120 to ptr
  store i64 %118, ptr %121
  store i64 1, ptr %24
  %122 = load i64, ptr %24
  store i64 %122, ptr %25
  store ptr @camlExn_part1, ptr %26
  %123 = load i64, ptr %26
  %124 = add i64 %123, 0
  %125 = inttoptr i64 %124 to ptr
  %126 = load i64, ptr %125
  store i64 %126, ptr %27
  %127 = load i64, ptr %12
  %128 = add i64 %127, 0
  %129 = inttoptr i64 %128 to ptr
  %130 = load i64, ptr %129
  store i64 %130, ptr %28
  %131 = load i64, ptr %28
  %132 = load i64, ptr %27
  %133 = icmp slt i64 %131, %132
  br i1 %133, label %L138, label %134
134:
  %135 = load i64, ptr %28
  %136 = load i64, ptr %27
  %137 = icmp sgt i64 %135, %136
  br i1 %137, label %L138, label %L125
L125:                                                ; preds = %L106
  store ptr @camlExn_part1, ptr %29
  %138 = load i64, ptr %29
  store i64 %138, ptr %30
  %139 = load i64, ptr %30
  %140 = add i64 %139, 56
  store i64 %140, ptr %30
  %141 = load i64, ptr %30
  %142 = add i64 %141, 0
  %143 = inttoptr i64 %142 to ptr
  %144 = load i64, ptr %143
  store i64 %144, ptr %31
  %145 = load i64, ptr %31
  store i64 %145, ptr %32
  %146 = load i64, ptr %9
  %147 = add i64 %146, 0
  %148 = inttoptr i64 %147 to ptr
  %149 = load i64, ptr %148
  store i64 %149, ptr %33
  %150 = load i64, ptr %32
  %151 = add i64 %150, 0
  %152 = inttoptr i64 %151 to ptr
  %153 = load i64, ptr %152
  store i64 %153, ptr %34
  %154 = load i64, ptr %33
  store i64 %154, ptr %3
  %155 = load i64, ptr %32
  store i64 %155, ptr %4
  %156 = load i64, ptr %3
  %157 = load i64, ptr %4
  %158 = load ptr, ptr %ds
  %159 = load i64, ptr %34
  %160 = inttoptr i64 %159 to ptr
  call void asm sideeffect "push %rbp", "~{rsp}"()
  %161 = call cc 104 { { ptr }, { i64 } } %160(ptr %158, i64 %156, i64 %157)
  call void asm sideeffect "pop %rbp", "~{rsp}"()
  %162 = extractvalue { { ptr }, { i64 } } %161, 0, 0
  store ptr %162, ptr %ds
  %163 = extractvalue { { ptr }, { i64 } } %161, 1, 0
  store i64 %163, ptr %3
  br label %L129
L129:                                                ; preds = %L125
  %164 = load i64, ptr %3
  store i64 %164, ptr %35
  %165 = load i64, ptr %35
  store i64 %165, ptr %36
  store ptr @camlExn_part1, ptr %37
  %166 = load i64, ptr %37
  store i64 %166, ptr %38
  %167 = load i64, ptr %38
  %168 = add i64 %167, 56
  store i64 %168, ptr %38
  %169 = load i64, ptr %38
  %170 = add i64 %169, 0
  %171 = inttoptr i64 %170 to ptr
  %172 = load i64, ptr %171
  store i64 %172, ptr %39
  %173 = load i64, ptr %39
  store i64 %173, ptr %40
  %174 = load i64, ptr %12
  store i64 %174, ptr %41
  %175 = load i64, ptr %41
  %176 = add i64 %175, 8
  store i64 %176, ptr %41
  %177 = load i64, ptr %41
  %178 = add i64 %177, 0
  %179 = inttoptr i64 %178 to ptr
  %180 = load i64, ptr %179
  store i64 %180, ptr %42
  %181 = load i64, ptr %40
  %182 = add i64 %181, 0
  %183 = inttoptr i64 %182 to ptr
  %184 = load i64, ptr %183
  store i64 %184, ptr %43
  %185 = load i64, ptr %42
  store i64 %185, ptr %3
  %186 = load i64, ptr %40
  store i64 %186, ptr %4
  %187 = load i64, ptr %3
  %188 = load i64, ptr %4
  %189 = load ptr, ptr %ds
  %190 = load i64, ptr %43
  %191 = inttoptr i64 %190 to ptr
  call void asm sideeffect "push %rbp", "~{rsp}"()
  %192 = call cc 104 { { ptr }, { i64 } } %191(ptr %189, i64 %187, i64 %188)
  call void asm sideeffect "pop %rbp", "~{rsp}"()
  %193 = extractvalue { { ptr }, { i64 } } %192, 0, 0
  store ptr %193, ptr %ds
  %194 = extractvalue { { ptr }, { i64 } } %192, 1, 0
  store i64 %194, ptr %3
  br label %L134
L134:                                                ; preds = %L129
  %195 = load i64, ptr %3
  store i64 %195, ptr %44
  %196 = load i64, ptr %44
  store i64 %196, ptr %3
  %197 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %198 = load ptr, ptr %ds
  %199 = insertvalue { { ptr }, { i64 } } %197, ptr %198, 0, 0
  %200 = load i64, ptr %3
  %201 = insertvalue { { ptr }, { i64 } } %199, i64 %200, 1, 0
  ret { { ptr }, { i64 } } %201
L138:                                                ; preds = %L106
  %202 = load i64, ptr %12
  store i64 %202, ptr %3
  %203 = load i64, ptr %ds
  %204 = add i64 %203, 48
  %205 = inttoptr i64 %204 to ptr
  %206 = load i64, ptr %205
  %207 = inttoptr i64 %206 to ptr
  %208 = load i64, ptr %207
  %209 = add i64 %206, 8
  %210 = inttoptr i64 %209 to ptr
  %211 = load ptr, ptr %210
  %212 = load i64, ptr %3
  %213 = add i64 %206, 16
  store i64 %208, ptr %205
  call void @llvm.write_register.i64(metadata !{!"rsp\00"}, i64 %213)
  call void asm sideeffect "movq $0, %rax; jmpq *$1", "r,r,~{rax}"(i64 %212, ptr %211)
  unreachable
}

define cc 104 { { ptr }, { i64 } } @camlExn_part2__raise_exn1_catch_exn2_from_llvm_HIDE_STAMP(ptr %0, i64 %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %3 = alloca i64
  store i64 %1, ptr %3
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca i64
  %22 = alloca i64
  %23 = alloca i64
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca i64
  br label %L1
L1:
  br label %L143
L143:                                                ; preds = %L1
  %29 = load i64, ptr %3
  store i64 %29, ptr %5
  store ptr @camlExn_part1, ptr %6
  %30 = load i64, ptr %6
  store i64 %30, ptr %7
  %31 = load i64, ptr %7
  %32 = add i64 %31, 16
  store i64 %32, ptr %7
  %33 = load i64, ptr %7
  %34 = add i64 %33, 0
  %35 = inttoptr i64 %34 to ptr
  %36 = load i64, ptr %35
  store i64 %36, ptr %8
  store i64 7, ptr %9
  %37 = load i64, ptr %8
  %38 = add i64 %37, 0
  %39 = inttoptr i64 %38 to ptr
  %40 = load i64, ptr %9
  store i64 %40, ptr %39
  store i64 1, ptr %10
  %41 = load i64, ptr %10
  store i64 %41, ptr %11
  %42 = load i64, ptr %ds
  %43 = add i64 %42, 64
  %44 = inttoptr i64 %43 to ptr
  %45 = load i64, ptr %44
  store i64 %45, ptr %12
  %46 = load i64, ptr %12
  store i64 %46, ptr %13
  call void asm sideeffect "", "~{rax},~{rbx},~{rcx},~{rdx},~{rsi},~{rdi},~{r8},~{r9},~{r10},~{r11},~{r12},~{r13},~{r14},~{r15}"()
  %47 = call  i32 @llvm.eh.ocaml.try() returns_twice
  %48 = trunc i32 %47 to i1
  br i1 %48, label %L149, label %49
49:
  %50 = call  ptr @llvm.stacksave()
  %51 = alloca { i64, i64, i64, i64 }
  %52 = load i64, ptr %ds
  %53 = add i64 %52, 48
  %54 = inttoptr i64 %53 to ptr
  %55 = load i64, ptr %54
  %56 = ptrtoint ptr %51 to i64
  %57 = add i64 %56, 16
  %58 = inttoptr i64 %57 to ptr
  %59 = ptrtoint ptr %51 to i64
  %60 = add i64 %59, 8
  %61 = inttoptr i64 %60 to ptr
  %62 = ptrtoint ptr %51 to i64
  %63 = add i64 %62, 0
  %64 = inttoptr i64 %63 to ptr
  call void asm sideeffect "mov %rbp, ($0)", "r"(ptr %58)
  store ptr blockaddress(@camlExn_part2__raise_exn1_catch_exn2_from_llvm_HIDE_STAMP, %L149), ptr %61
  store i64 %55, ptr %64
  store ptr %51, ptr %54
  store ptr @camlExn_part1, ptr %15
  %65 = load i64, ptr %15
  store i64 %65, ptr %16
  %66 = load i64, ptr %16
  %67 = add i64 %66, 32
  store i64 %67, ptr %16
  %68 = load i64, ptr %16
  %69 = add i64 %68, 0
  %70 = inttoptr i64 %69 to ptr
  %71 = load i64, ptr %70
  store i64 %71, ptr %17
  %72 = load i64, ptr %17
  store i64 %72, ptr %18
  store i64 61, ptr %19
  %73 = load i64, ptr %18
  %74 = add i64 %73, 0
  %75 = inttoptr i64 %74 to ptr
  %76 = load i64, ptr %75
  store i64 %76, ptr %20
  %77 = load i64, ptr %19
  store i64 %77, ptr %3
  %78 = load i64, ptr %18
  store i64 %78, ptr %4
  %79 = load i64, ptr %3
  %80 = load i64, ptr %4
  %81 = load ptr, ptr %ds
  %82 = load i64, ptr %20
  %83 = inttoptr i64 %82 to ptr
  call void asm sideeffect "push %rbp", "~{rsp}"()
  %84 = call cc 104 { { ptr }, { i64 } } %83(ptr %81, i64 %79, i64 %80)
  call void asm sideeffect "pop %rbp", "~{rsp}"()
  %85 = extractvalue { { ptr }, { i64 } } %84, 0, 0
  store ptr %85, ptr %ds
  %86 = extractvalue { { ptr }, { i64 } } %84, 1, 0
  store i64 %86, ptr %3
  br label %L159
L159:                                                ; preds = %L143
  %87 = load i64, ptr %3
  store i64 %87, ptr %21
  %88 = load i64, ptr %21
  store i64 %88, ptr %22
  %89 = load i64, ptr %ds
  %90 = add i64 %89, 48
  %91 = inttoptr i64 %90 to ptr
  %92 = load i64, ptr %51
  store i64 %92, ptr %91
  call  void @llvm.stackrestore(ptr %50)
  %93 = load i64, ptr %22
  store i64 %93, ptr %3
  %94 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %95 = load ptr, ptr %ds
  %96 = insertvalue { { ptr }, { i64 } } %94, ptr %95, 0, 0
  %97 = load i64, ptr %3
  %98 = insertvalue { { ptr }, { i64 } } %96, i64 %97, 1, 0
  ret { { ptr }, { i64 } } %98
L149:                                                ; preds = %L143
  call void asm sideeffect "pop %rbp; addq $$8, %rsp", ""()
  call  void @llvm.eh.ocaml.touch(ptr %13)
  %99 = call i64 asm sideeffect "movq %rax, $0", "=r,~{rax}"()
  store i64 %99, ptr %3
  %100 = load i64, ptr %3
  store i64 %100, ptr %14
  %101 = load i64, ptr %13
  %102 = load i64, ptr %ds
  %103 = add i64 %102, 64
  %104 = inttoptr i64 %103 to ptr
  store i64 %101, ptr %104
  store i64 1, ptr %23
  %105 = load i64, ptr %23
  store i64 %105, ptr %24
  store ptr @camlExn_part1, ptr %25
  %106 = load i64, ptr %25
  store i64 %106, ptr %26
  %107 = load i64, ptr %26
  %108 = add i64 %107, 8
  store i64 %108, ptr %26
  %109 = load i64, ptr %26
  %110 = add i64 %109, 0
  %111 = inttoptr i64 %110 to ptr
  %112 = load i64, ptr %111
  store i64 %112, ptr %27
  %113 = load i64, ptr %14
  %114 = load i64, ptr %27
  %115 = icmp slt i64 %113, %114
  br i1 %115, label %L169, label %116
116:
  %117 = load i64, ptr %14
  %118 = load i64, ptr %27
  %119 = icmp sgt i64 %117, %118
  br i1 %119, label %L169, label %L167
L167:                                                ; preds = %L149
  store i64 1, ptr %28
  %120 = load i64, ptr %28
  store i64 %120, ptr %3
  %121 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %122 = load ptr, ptr %ds
  %123 = insertvalue { { ptr }, { i64 } } %121, ptr %122, 0, 0
  %124 = load i64, ptr %3
  %125 = insertvalue { { ptr }, { i64 } } %123, i64 %124, 1, 0
  ret { { ptr }, { i64 } } %125
L169:                                                ; preds = %L149
  %126 = load i64, ptr %14
  store i64 %126, ptr %3
  %127 = load i64, ptr %ds
  %128 = add i64 %127, 48
  %129 = inttoptr i64 %128 to ptr
  %130 = load i64, ptr %129
  %131 = inttoptr i64 %130 to ptr
  %132 = load i64, ptr %131
  %133 = add i64 %130, 8
  %134 = inttoptr i64 %133 to ptr
  %135 = load ptr, ptr %134
  %136 = load i64, ptr %3
  %137 = add i64 %130, 16
  store i64 %132, ptr %129
  call void @llvm.write_register.i64(metadata !{!"rsp\00"}, i64 %137)
  call void asm sideeffect "movq $0, %rax; jmpq *$1", "r,r,~{rax}"(i64 %136, ptr %135)
  unreachable
}

define cc 104 { { ptr }, { i64 } } @camlExn_part2__catch_exn1_nested_from_llvm_HIDE_STAMP(ptr %0, i64 %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %3 = alloca i64
  store i64 %1, ptr %3
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca i64
  %22 = alloca i64
  %23 = alloca i64
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca i64
  %29 = alloca i64
  %30 = alloca i64
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca i64
  %36 = alloca i64
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  br label %L1
L1:
  br label %L174
L174:                                                ; preds = %L1
  %40 = load i64, ptr %3
  store i64 %40, ptr %5
  store ptr @camlExn_part1, ptr %6
  %41 = load i64, ptr %6
  store i64 %41, ptr %7
  %42 = load i64, ptr %7
  %43 = add i64 %42, 16
  store i64 %43, ptr %7
  %44 = load i64, ptr %7
  %45 = add i64 %44, 0
  %46 = inttoptr i64 %45 to ptr
  %47 = load i64, ptr %46
  store i64 %47, ptr %8
  %48 = load i64, ptr %8
  store i64 %48, ptr %9
  %49 = load i64, ptr %ds
  %50 = add i64 %49, 64
  %51 = inttoptr i64 %50 to ptr
  %52 = load i64, ptr %51
  store i64 %52, ptr %10
  %53 = load i64, ptr %10
  store i64 %53, ptr %11
  call void asm sideeffect "", "~{rax},~{rbx},~{rcx},~{rdx},~{rsi},~{rdi},~{r8},~{r9},~{r10},~{r11},~{r12},~{r13},~{r14},~{r15}"()
  %54 = call  i32 @llvm.eh.ocaml.try() returns_twice
  %55 = trunc i32 %54 to i1
  br i1 %55, label %L179, label %56
56:
  %57 = call  ptr @llvm.stacksave()
  %58 = alloca { i64, i64, i64, i64 }
  %59 = load i64, ptr %ds
  %60 = add i64 %59, 48
  %61 = inttoptr i64 %60 to ptr
  %62 = load i64, ptr %61
  %63 = ptrtoint ptr %58 to i64
  %64 = add i64 %63, 16
  %65 = inttoptr i64 %64 to ptr
  %66 = ptrtoint ptr %58 to i64
  %67 = add i64 %66, 8
  %68 = inttoptr i64 %67 to ptr
  %69 = ptrtoint ptr %58 to i64
  %70 = add i64 %69, 0
  %71 = inttoptr i64 %70 to ptr
  call void asm sideeffect "mov %rbp, ($0)", "r"(ptr %65)
  store ptr blockaddress(@camlExn_part2__catch_exn1_nested_from_llvm_HIDE_STAMP, %L179), ptr %68
  store i64 %62, ptr %71
  store ptr %58, ptr %61
  store i64 9, ptr %13
  %72 = load i64, ptr %9
  %73 = add i64 %72, 0
  %74 = inttoptr i64 %73 to ptr
  %75 = load i64, ptr %13
  store i64 %75, ptr %74
  store i64 1, ptr %14
  %76 = load i64, ptr %14
  store i64 %76, ptr %15
  store i64 1, ptr %16
  %77 = load i64, ptr %16
  store i64 %77, ptr %3
  %78 = load i64, ptr %3
  %79 = load ptr, ptr %ds
  call void asm sideeffect "push %rbp", "~{rsp}"()
  %80 = call cc 104 { { ptr }, { i64 } } @camlExn_part2__raise_exn1_catch_exn2_from_llvm_HIDE_STAMP(ptr %79, i64 %78)
  call void asm sideeffect "pop %rbp", "~{rsp}"()
  %81 = extractvalue { { ptr }, { i64 } } %80, 0, 0
  store ptr %81, ptr %ds
  %82 = extractvalue { { ptr }, { i64 } } %80, 1, 0
  store i64 %82, ptr %3
  br label %L188
L188:                                                ; preds = %L174
  %83 = load i64, ptr %3
  store i64 %83, ptr %17
  %84 = load i64, ptr %17
  store i64 %84, ptr %18
  %85 = load i64, ptr %ds
  %86 = add i64 %85, 48
  %87 = inttoptr i64 %86 to ptr
  %88 = load i64, ptr %58
  store i64 %88, ptr %87
  call  void @llvm.stackrestore(ptr %57)
  %89 = load i64, ptr %18
  store i64 %89, ptr %3
  %90 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %91 = load ptr, ptr %ds
  %92 = insertvalue { { ptr }, { i64 } } %90, ptr %91, 0, 0
  %93 = load i64, ptr %3
  %94 = insertvalue { { ptr }, { i64 } } %92, i64 %93, 1, 0
  ret { { ptr }, { i64 } } %94
L179:                                                ; preds = %L174
  call void asm sideeffect "pop %rbp; addq $$8, %rsp", ""()
  call  void @llvm.eh.ocaml.touch(ptr %9)
  call  void @llvm.eh.ocaml.touch(ptr %11)
  %95 = call i64 asm sideeffect "movq %rax, $0", "=r,~{rax}"()
  store i64 %95, ptr %3
  %96 = load i64, ptr %3
  store i64 %96, ptr %12
  %97 = load i64, ptr %11
  %98 = load i64, ptr %ds
  %99 = add i64 %98, 64
  %100 = inttoptr i64 %99 to ptr
  store i64 %97, ptr %100
  store i64 1, ptr %19
  %101 = load i64, ptr %19
  store i64 %101, ptr %20
  store ptr @camlExn_part1, ptr %21
  %102 = load i64, ptr %21
  %103 = add i64 %102, 0
  %104 = inttoptr i64 %103 to ptr
  %105 = load i64, ptr %104
  store i64 %105, ptr %22
  %106 = load i64, ptr %12
  %107 = add i64 %106, 0
  %108 = inttoptr i64 %107 to ptr
  %109 = load i64, ptr %108
  store i64 %109, ptr %23
  %110 = load i64, ptr %23
  %111 = load i64, ptr %22
  %112 = icmp slt i64 %110, %111
  br i1 %112, label %L208, label %113
113:
  %114 = load i64, ptr %23
  %115 = load i64, ptr %22
  %116 = icmp sgt i64 %114, %115
  br i1 %116, label %L208, label %L195
L195:                                                ; preds = %L179
  store ptr @camlExn_part1, ptr %24
  %117 = load i64, ptr %24
  store i64 %117, ptr %25
  %118 = load i64, ptr %25
  %119 = add i64 %118, 56
  store i64 %119, ptr %25
  %120 = load i64, ptr %25
  %121 = add i64 %120, 0
  %122 = inttoptr i64 %121 to ptr
  %123 = load i64, ptr %122
  store i64 %123, ptr %26
  %124 = load i64, ptr %26
  store i64 %124, ptr %27
  %125 = load i64, ptr %9
  %126 = add i64 %125, 0
  %127 = inttoptr i64 %126 to ptr
  %128 = load i64, ptr %127
  store i64 %128, ptr %28
  %129 = load i64, ptr %27
  %130 = add i64 %129, 0
  %131 = inttoptr i64 %130 to ptr
  %132 = load i64, ptr %131
  store i64 %132, ptr %29
  %133 = load i64, ptr %28
  store i64 %133, ptr %3
  %134 = load i64, ptr %27
  store i64 %134, ptr %4
  %135 = load i64, ptr %3
  %136 = load i64, ptr %4
  %137 = load ptr, ptr %ds
  %138 = load i64, ptr %29
  %139 = inttoptr i64 %138 to ptr
  call void asm sideeffect "push %rbp", "~{rsp}"()
  %140 = call cc 104 { { ptr }, { i64 } } %139(ptr %137, i64 %135, i64 %136)
  call void asm sideeffect "pop %rbp", "~{rsp}"()
  %141 = extractvalue { { ptr }, { i64 } } %140, 0, 0
  store ptr %141, ptr %ds
  %142 = extractvalue { { ptr }, { i64 } } %140, 1, 0
  store i64 %142, ptr %3
  br label %L199
L199:                                                ; preds = %L195
  %143 = load i64, ptr %3
  store i64 %143, ptr %30
  %144 = load i64, ptr %30
  store i64 %144, ptr %31
  store ptr @camlExn_part1, ptr %32
  %145 = load i64, ptr %32
  store i64 %145, ptr %33
  %146 = load i64, ptr %33
  %147 = add i64 %146, 56
  store i64 %147, ptr %33
  %148 = load i64, ptr %33
  %149 = add i64 %148, 0
  %150 = inttoptr i64 %149 to ptr
  %151 = load i64, ptr %150
  store i64 %151, ptr %34
  %152 = load i64, ptr %34
  store i64 %152, ptr %35
  %153 = load i64, ptr %12
  store i64 %153, ptr %36
  %154 = load i64, ptr %36
  %155 = add i64 %154, 8
  store i64 %155, ptr %36
  %156 = load i64, ptr %36
  %157 = add i64 %156, 0
  %158 = inttoptr i64 %157 to ptr
  %159 = load i64, ptr %158
  store i64 %159, ptr %37
  %160 = load i64, ptr %35
  %161 = add i64 %160, 0
  %162 = inttoptr i64 %161 to ptr
  %163 = load i64, ptr %162
  store i64 %163, ptr %38
  %164 = load i64, ptr %37
  store i64 %164, ptr %3
  %165 = load i64, ptr %35
  store i64 %165, ptr %4
  %166 = load i64, ptr %3
  %167 = load i64, ptr %4
  %168 = load ptr, ptr %ds
  %169 = load i64, ptr %38
  %170 = inttoptr i64 %169 to ptr
  call void asm sideeffect "push %rbp", "~{rsp}"()
  %171 = call cc 104 { { ptr }, { i64 } } %170(ptr %168, i64 %166, i64 %167)
  call void asm sideeffect "pop %rbp", "~{rsp}"()
  %172 = extractvalue { { ptr }, { i64 } } %171, 0, 0
  store ptr %172, ptr %ds
  %173 = extractvalue { { ptr }, { i64 } } %171, 1, 0
  store i64 %173, ptr %3
  br label %L204
L204:                                                ; preds = %L199
  %174 = load i64, ptr %3
  store i64 %174, ptr %39
  %175 = load i64, ptr %39
  store i64 %175, ptr %3
  %176 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %177 = load ptr, ptr %ds
  %178 = insertvalue { { ptr }, { i64 } } %176, ptr %177, 0, 0
  %179 = load i64, ptr %3
  %180 = insertvalue { { ptr }, { i64 } } %178, i64 %179, 1, 0
  ret { { ptr }, { i64 } } %180
L208:                                                ; preds = %L179
  %181 = load i64, ptr %12
  store i64 %181, ptr %3
  %182 = load i64, ptr %ds
  %183 = add i64 %182, 48
  %184 = inttoptr i64 %183 to ptr
  %185 = load i64, ptr %184
  %186 = inttoptr i64 %185 to ptr
  %187 = load i64, ptr %186
  %188 = add i64 %185, 8
  %189 = inttoptr i64 %188 to ptr
  %190 = load ptr, ptr %189
  %191 = load i64, ptr %3
  %192 = add i64 %185, 16
  store i64 %187, ptr %184
  call void @llvm.write_register.i64(metadata !{!"rsp\00"}, i64 %192)
  call void asm sideeffect "movq $0, %rax; jmpq *$1", "r,r,~{rax}"(i64 %191, ptr %190)
  unreachable
}

define cc 104 { { ptr }, { i64 } } @camlExn_part2__raise_1_HIDE_STAMP(ptr %0, i64 %1, i64 %2)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %4 = alloca i64
  store i64 %1, ptr %4
  %5 = alloca i64
  store i64 %2, ptr %5
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  br label %L1
L1:
  br label %L213
L213:                                                ; preds = %L1
  %14 = load i64, ptr %4
  store i64 %14, ptr %6
  %15 = load i64, ptr %5
  store i64 %15, ptr %7
  store ptr @camlExn_part1, ptr %8
  %16 = load i64, ptr %8
  store i64 %16, ptr %9
  %17 = load i64, ptr %9
  %18 = add i64 %17, 32
  store i64 %18, ptr %9
  %19 = load i64, ptr %9
  %20 = add i64 %19, 0
  %21 = inttoptr i64 %20 to ptr
  %22 = load i64, ptr %21
  store i64 %22, ptr %10
  %23 = load i64, ptr %10
  store i64 %23, ptr %11
  %24 = load i64, ptr %11
  %25 = add i64 %24, 0
  %26 = inttoptr i64 %25 to ptr
  %27 = load i64, ptr %26
  store i64 %27, ptr %12
  %28 = load i64, ptr %6
  store i64 %28, ptr %4
  %29 = load i64, ptr %11
  store i64 %29, ptr %5
  %30 = load i64, ptr %4
  %31 = load i64, ptr %5
  %32 = load ptr, ptr %ds
  %33 = load i64, ptr %12
  %34 = inttoptr i64 %33 to ptr
  %35 = call cc 104 { { ptr }, { i64 } } %34(ptr %32, i64 %30, i64 %31)
  %36 = extractvalue { { ptr }, { i64 } } %35, 0, 0
  store ptr %36, ptr %ds
  %37 = extractvalue { { ptr }, { i64 } } %35, 1, 0
  store i64 %37, ptr %4
  br label %L217
L217:                                                ; preds = %L213
  %38 = load i64, ptr %4
  store i64 %38, ptr %13
  %39 = load i64, ptr %13
  store i64 %39, ptr %4
  %40 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %41 = load ptr, ptr %ds
  %42 = insertvalue { { ptr }, { i64 } } %40, ptr %41, 0, 0
  %43 = load i64, ptr %4
  %44 = insertvalue { { ptr }, { i64 } } %42, i64 %43, 1, 0
  ret { { ptr }, { i64 } } %44
}

define cc 104 { { ptr }, { i64 } } @camlExn_part2__raise_2_HIDE_STAMP(ptr %0, i64 %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %3 = alloca i64
  store i64 %1, ptr %3
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  br label %L1
L1:
  br label %L220
L220:                                                ; preds = %L1
  %8 = load i64, ptr %3
  store i64 %8, ptr %4
  store ptr @camlExn_part1, ptr %5
  %9 = load i64, ptr %5
  store i64 %9, ptr %6
  %10 = load i64, ptr %6
  %11 = add i64 %10, 8
  store i64 %11, ptr %6
  %12 = load i64, ptr %6
  %13 = add i64 %12, 0
  %14 = inttoptr i64 %13 to ptr
  %15 = load i64, ptr %14
  store i64 %15, ptr %7
  %16 = load i64, ptr %7
  store i64 %16, ptr %3
  %17 = load i64, ptr %ds
  %18 = add i64 %17, 48
  %19 = inttoptr i64 %18 to ptr
  %20 = load i64, ptr %19
  %21 = inttoptr i64 %20 to ptr
  %22 = load i64, ptr %21
  %23 = add i64 %20, 8
  %24 = inttoptr i64 %23 to ptr
  %25 = load ptr, ptr %24
  %26 = load i64, ptr %3
  %27 = add i64 %20, 16
  store i64 %22, ptr %19
  call void @llvm.write_register.i64(metadata !{!"rsp\00"}, i64 %27)
  call void asm sideeffect "movq $0, %rax; jmpq *$1", "r,r,~{rax}"(i64 %26, ptr %25)
  unreachable
}

define cc 104 { { ptr }, { i64 } } @camlExn_part2__raise_3_HIDE_STAMP(ptr %0, i64 %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %3 = alloca i64
  store i64 %1, ptr %3
  %4 = alloca i64
  %5 = alloca i64
  br label %L1
L1:
  br label %L225
L225:                                                ; preds = %L1
  %6 = load i64, ptr %3
  store i64 %6, ptr %4
  store ptr @camlExn_part2__Exn3169, ptr %5
  %7 = load i64, ptr %5
  store i64 %7, ptr %3
  %8 = load i64, ptr %ds
  %9 = add i64 %8, 48
  %10 = inttoptr i64 %9 to ptr
  %11 = load i64, ptr %10
  %12 = inttoptr i64 %11 to ptr
  %13 = load i64, ptr %12
  %14 = add i64 %11, 8
  %15 = inttoptr i64 %14 to ptr
  %16 = load ptr, ptr %15
  %17 = load i64, ptr %3
  %18 = add i64 %11, 16
  store i64 %13, ptr %10
  call void @llvm.write_register.i64(metadata !{!"rsp\00"}, i64 %18)
  call void asm sideeffect "movq $0, %rax; jmpq *$1", "r,r,~{rax}"(i64 %17, ptr %16)
  unreachable
}

define cc 104 { { ptr }, { i64 } } @camlExn_part2__complicated_HIDE_STAMP(ptr %0, i64 %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %3 = alloca i64
  store i64 %1, ptr %3
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca i64
  %22 = alloca i64
  %23 = alloca i64
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca i64
  %29 = alloca i64
  %30 = alloca i64
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca i64
  %36 = alloca i64
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca i64
  %42 = alloca i64
  %43 = alloca i64
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca i64
  %47 = alloca i64
  %48 = alloca i64
  %49 = alloca i64
  %50 = alloca i64
  %51 = alloca i64
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca i64
  %57 = alloca i64
  %58 = alloca i64
  %59 = alloca i64
  %60 = alloca i64
  %61 = alloca i64
  %62 = alloca i64
  %63 = alloca i64
  %64 = alloca i64
  %65 = alloca i64
  %66 = alloca i64
  %67 = alloca i64
  %68 = alloca i64
  br label %L1
L1:
  br label %L228
L228:                                                ; preds = %L1
  %69 = load i64, ptr %3
  store i64 %69, ptr %5
  store ptr @camlExn_part1, ptr %6
  %70 = load i64, ptr %6
  store i64 %70, ptr %7
  %71 = load i64, ptr %7
  %72 = add i64 %71, 48
  store i64 %72, ptr %7
  %73 = load i64, ptr %7
  %74 = add i64 %73, 0
  %75 = inttoptr i64 %74 to ptr
  %76 = load i64, ptr %75
  store i64 %76, ptr %8
  %77 = load i64, ptr %8
  store i64 %77, ptr %9
  store i64 41, ptr %10
  %78 = load i64, ptr %9
  %79 = add i64 %78, 0
  %80 = inttoptr i64 %79 to ptr
  %81 = load i64, ptr %80
  store i64 %81, ptr %11
  %82 = load i64, ptr %10
  store i64 %82, ptr %3
  %83 = load i64, ptr %9
  store i64 %83, ptr %4
  %84 = load i64, ptr %3
  %85 = load i64, ptr %4
  %86 = load ptr, ptr %ds
  %87 = load i64, ptr %11
  %88 = inttoptr i64 %87 to ptr
  call void asm sideeffect "push %rbp", "~{rsp}"()
  %89 = call cc 104 { { ptr }, { i64 } } %88(ptr %86, i64 %84, i64 %85)
  call void asm sideeffect "pop %rbp", "~{rsp}"()
  %90 = extractvalue { { ptr }, { i64 } } %89, 0, 0
  store ptr %90, ptr %ds
  %91 = extractvalue { { ptr }, { i64 } } %89, 1, 0
  store i64 %91, ptr %3
  br label %L232
L232:                                                ; preds = %L228
  %92 = load i64, ptr %3
  store i64 %92, ptr %12
  %93 = load i64, ptr %12
  store i64 %93, ptr %13
  %94 = load i64, ptr %ds
  %95 = add i64 %94, 64
  %96 = inttoptr i64 %95 to ptr
  %97 = load i64, ptr %96
  store i64 %97, ptr %14
  %98 = load i64, ptr %14
  store i64 %98, ptr %15
  call void asm sideeffect "", "~{rax},~{rbx},~{rcx},~{rdx},~{rsi},~{rdi},~{r8},~{r9},~{r10},~{r11},~{r12},~{r13},~{r14},~{r15}"()
  %99 = call  i32 @llvm.eh.ocaml.try() returns_twice
  %100 = trunc i32 %99 to i1
  br i1 %100, label %L235, label %101
101:
  %102 = call  ptr @llvm.stacksave()
  %103 = alloca { i64, i64, i64, i64 }
  %104 = load i64, ptr %ds
  %105 = add i64 %104, 48
  %106 = inttoptr i64 %105 to ptr
  %107 = load i64, ptr %106
  %108 = ptrtoint ptr %103 to i64
  %109 = add i64 %108, 16
  %110 = inttoptr i64 %109 to ptr
  %111 = ptrtoint ptr %103 to i64
  %112 = add i64 %111, 8
  %113 = inttoptr i64 %112 to ptr
  %114 = ptrtoint ptr %103 to i64
  %115 = add i64 %114, 0
  %116 = inttoptr i64 %115 to ptr
  call void asm sideeffect "mov %rbp, ($0)", "r"(ptr %110)
  store ptr blockaddress(@camlExn_part2__complicated_HIDE_STAMP, %L235), ptr %113
  store i64 %107, ptr %116
  store ptr %103, ptr %106
  store ptr @camlExn_part1, ptr %18
  %117 = load i64, ptr %18
  store i64 %117, ptr %19
  %118 = load i64, ptr %19
  %119 = add i64 %118, 48
  store i64 %119, ptr %19
  %120 = load i64, ptr %19
  %121 = add i64 %120, 0
  %122 = inttoptr i64 %121 to ptr
  %123 = load i64, ptr %122
  store i64 %123, ptr %20
  %124 = load i64, ptr %20
  store i64 %124, ptr %21
  store i64 61, ptr %22
  %125 = load i64, ptr %21
  %126 = add i64 %125, 0
  %127 = inttoptr i64 %126 to ptr
  %128 = load i64, ptr %127
  store i64 %128, ptr %23
  %129 = load i64, ptr %22
  store i64 %129, ptr %3
  %130 = load i64, ptr %21
  store i64 %130, ptr %4
  %131 = load i64, ptr %3
  %132 = load i64, ptr %4
  %133 = load ptr, ptr %ds
  %134 = load i64, ptr %23
  %135 = inttoptr i64 %134 to ptr
  call void asm sideeffect "push %rbp", "~{rsp}"()
  %136 = call cc 104 { { ptr }, { i64 } } %135(ptr %133, i64 %131, i64 %132)
  call void asm sideeffect "pop %rbp", "~{rsp}"()
  %137 = extractvalue { { ptr }, { i64 } } %136, 0, 0
  store ptr %137, ptr %ds
  %138 = extractvalue { { ptr }, { i64 } } %136, 1, 0
  store i64 %138, ptr %3
  br label %L248
L248:                                                ; preds = %L232
  %139 = load i64, ptr %3
  store i64 %139, ptr %24
  %140 = load i64, ptr %24
  store i64 %140, ptr %25
  %141 = load i64, ptr %ds
  %142 = add i64 %141, 64
  %143 = inttoptr i64 %142 to ptr
  %144 = load i64, ptr %143
  store i64 %144, ptr %26
  %145 = load i64, ptr %26
  store i64 %145, ptr %27
  call void asm sideeffect "", "~{rax},~{rbx},~{rcx},~{rdx},~{rsi},~{rdi},~{r8},~{r9},~{r10},~{r11},~{r12},~{r13},~{r14},~{r15}"()
  %146 = call  i32 @llvm.eh.ocaml.try() returns_twice
  %147 = trunc i32 %146 to i1
  br i1 %147, label %L251, label %148
148:
  %149 = call  ptr @llvm.stacksave()
  %150 = alloca { i64, i64, i64, i64 }
  %151 = load i64, ptr %ds
  %152 = add i64 %151, 48
  %153 = inttoptr i64 %152 to ptr
  %154 = load i64, ptr %153
  %155 = ptrtoint ptr %150 to i64
  %156 = add i64 %155, 16
  %157 = inttoptr i64 %156 to ptr
  %158 = ptrtoint ptr %150 to i64
  %159 = add i64 %158, 8
  %160 = inttoptr i64 %159 to ptr
  %161 = ptrtoint ptr %150 to i64
  %162 = add i64 %161, 0
  %163 = inttoptr i64 %162 to ptr
  call void asm sideeffect "mov %rbp, ($0)", "r"(ptr %157)
  store ptr blockaddress(@camlExn_part2__complicated_HIDE_STAMP, %L251), ptr %160
  store i64 %154, ptr %163
  store ptr %150, ptr %153
  store ptr @camlExn_part1, ptr %30
  %164 = load i64, ptr %30
  store i64 %164, ptr %31
  %165 = load i64, ptr %31
  %166 = add i64 %165, 48
  store i64 %166, ptr %31
  %167 = load i64, ptr %31
  %168 = add i64 %167, 0
  %169 = inttoptr i64 %168 to ptr
  %170 = load i64, ptr %169
  store i64 %170, ptr %32
  %171 = load i64, ptr %32
  store i64 %171, ptr %33
  store i64 81, ptr %34
  %172 = load i64, ptr %33
  %173 = add i64 %172, 0
  %174 = inttoptr i64 %173 to ptr
  %175 = load i64, ptr %174
  store i64 %175, ptr %35
  %176 = load i64, ptr %34
  store i64 %176, ptr %3
  %177 = load i64, ptr %33
  store i64 %177, ptr %4
  %178 = load i64, ptr %3
  %179 = load i64, ptr %4
  %180 = load ptr, ptr %ds
  %181 = load i64, ptr %35
  %182 = inttoptr i64 %181 to ptr
  call void asm sideeffect "push %rbp", "~{rsp}"()
  %183 = call cc 104 { { ptr }, { i64 } } %182(ptr %180, i64 %178, i64 %179)
  call void asm sideeffect "pop %rbp", "~{rsp}"()
  %184 = extractvalue { { ptr }, { i64 } } %183, 0, 0
  store ptr %184, ptr %ds
  %185 = extractvalue { { ptr }, { i64 } } %183, 1, 0
  store i64 %185, ptr %3
  br label %L264
L264:                                                ; preds = %L248
  %186 = load i64, ptr %3
  store i64 %186, ptr %36
  %187 = load i64, ptr %36
  store i64 %187, ptr %37
  %188 = load i64, ptr %ds
  %189 = add i64 %188, 64
  %190 = inttoptr i64 %189 to ptr
  %191 = load i64, ptr %190
  store i64 %191, ptr %38
  %192 = load i64, ptr %38
  store i64 %192, ptr %39
  call void asm sideeffect "", "~{rax},~{rbx},~{rcx},~{rdx},~{rsi},~{rdi},~{r8},~{r9},~{r10},~{r11},~{r12},~{r13},~{r14},~{r15}"()
  %193 = call  i32 @llvm.eh.ocaml.try() returns_twice
  %194 = trunc i32 %193 to i1
  br i1 %194, label %L267, label %195
195:
  %196 = call  ptr @llvm.stacksave()
  %197 = alloca { i64, i64, i64, i64 }
  %198 = load i64, ptr %ds
  %199 = add i64 %198, 48
  %200 = inttoptr i64 %199 to ptr
  %201 = load i64, ptr %200
  %202 = ptrtoint ptr %197 to i64
  %203 = add i64 %202, 16
  %204 = inttoptr i64 %203 to ptr
  %205 = ptrtoint ptr %197 to i64
  %206 = add i64 %205, 8
  %207 = inttoptr i64 %206 to ptr
  %208 = ptrtoint ptr %197 to i64
  %209 = add i64 %208, 0
  %210 = inttoptr i64 %209 to ptr
  call void asm sideeffect "mov %rbp, ($0)", "r"(ptr %204)
  store ptr blockaddress(@camlExn_part2__complicated_HIDE_STAMP, %L267), ptr %207
  store i64 %201, ptr %210
  store ptr %197, ptr %200
  store i64 1, ptr %41
  %211 = load i64, ptr %5
  %212 = add i64 %211, 0
  %213 = inttoptr i64 %212 to ptr
  %214 = load i64, ptr %213
  store i64 %214, ptr %42
  %215 = load i64, ptr %41
  store i64 %215, ptr %3
  %216 = load i64, ptr %5
  store i64 %216, ptr %4
  %217 = load i64, ptr %3
  %218 = load i64, ptr %4
  %219 = load ptr, ptr %ds
  %220 = load i64, ptr %42
  %221 = inttoptr i64 %220 to ptr
  call void asm sideeffect "push %rbp", "~{rsp}"()
  %222 = call cc 104 { { ptr }, { i64 } } %221(ptr %219, i64 %217, i64 %218)
  call void asm sideeffect "pop %rbp", "~{rsp}"()
  %223 = extractvalue { { ptr }, { i64 } } %222, 0, 0
  store ptr %223, ptr %ds
  %224 = extractvalue { { ptr }, { i64 } } %222, 1, 0
  store i64 %224, ptr %3
  br label %L275
L275:                                                ; preds = %L264
  %225 = load i64, ptr %3
  store i64 %225, ptr %43
  %226 = load i64, ptr %43
  store i64 %226, ptr %44
  store i64 246247, ptr %45
  %227 = load i64, ptr %45
  store i64 %227, ptr %46
  %228 = load i64, ptr %46
  store i64 %228, ptr %29
  %229 = load i64, ptr %ds
  %230 = add i64 %229, 48
  %231 = inttoptr i64 %230 to ptr
  %232 = load i64, ptr %197
  store i64 %232, ptr %231
  call  void @llvm.stackrestore(ptr %196)
  br label %L292
L267:                                                ; preds = %L264
  call void asm sideeffect "pop %rbp; addq $$8, %rsp", ""()
  call  void @llvm.eh.ocaml.touch(ptr %13)
  call  void @llvm.eh.ocaml.touch(ptr %15)
  call  void @llvm.eh.ocaml.touch(ptr %25)
  call  void @llvm.eh.ocaml.touch(ptr %27)
  call  void @llvm.eh.ocaml.touch(ptr %37)
  call  void @llvm.eh.ocaml.touch(ptr %39)
  %233 = call i64 asm sideeffect "movq %rax, $0", "=r,~{rax}"()
  store i64 %233, ptr %3
  %234 = load i64, ptr %3
  store i64 %234, ptr %40
  %235 = load i64, ptr %39
  %236 = load i64, ptr %ds
  %237 = add i64 %236, 64
  %238 = inttoptr i64 %237 to ptr
  store i64 %235, ptr %238
  store i64 1, ptr %47
  %239 = load i64, ptr %47
  store i64 %239, ptr %48
  store ptr @camlExn_part1, ptr %49
  %240 = load i64, ptr %49
  store i64 %240, ptr %50
  %241 = load i64, ptr %50
  %242 = add i64 %241, 8
  store i64 %242, ptr %50
  %243 = load i64, ptr %50
  %244 = add i64 %243, 0
  %245 = inttoptr i64 %244 to ptr
  %246 = load i64, ptr %245
  store i64 %246, ptr %51
  %247 = load i64, ptr %40
  %248 = load i64, ptr %51
  %249 = icmp slt i64 %247, %248
  br i1 %249, label %L287, label %250
250:
  %251 = load i64, ptr %40
  %252 = load i64, ptr %51
  %253 = icmp sgt i64 %251, %252
  br i1 %253, label %L287, label %L283
L283:                                                ; preds = %L267
  %254 = load i64, ptr %25
  store i64 %254, ptr %52
  %255 = load i64, ptr %52
  %256 = load i64, ptr %37
  %257 = add i64 %255, %256
  store i64 %257, ptr %52
  %258 = load i64, ptr %52
  store i64 %258, ptr %53
  %259 = load i64, ptr %53
  %260 = add i64 %259, -1
  store i64 %260, ptr %53
  %261 = load i64, ptr %53
  store i64 %261, ptr %54
  %262 = load i64, ptr %54
  store i64 %262, ptr %29
  br label %L292
L287:                                                ; preds = %L267
  %263 = load i64, ptr %40
  store i64 %263, ptr %3
  %264 = load i64, ptr %ds
  %265 = add i64 %264, 48
  %266 = inttoptr i64 %265 to ptr
  %267 = load i64, ptr %266
  %268 = inttoptr i64 %267 to ptr
  %269 = load i64, ptr %268
  %270 = add i64 %267, 8
  %271 = inttoptr i64 %270 to ptr
  %272 = load ptr, ptr %271
  %273 = load i64, ptr %3
  %274 = add i64 %267, 16
  store i64 %269, ptr %266
  call void @llvm.write_register.i64(metadata !{!"rsp\00"}, i64 %274)
  call void asm sideeffect "movq $0, %rax; jmpq *$1", "r,r,~{rax}"(i64 %273, ptr %272)
  unreachable
L292:                                                ; preds = %L275, %L283
  %275 = load i64, ptr %29
  store i64 %275, ptr %55
  %276 = load i64, ptr %55
  store i64 %276, ptr %17
  %277 = load i64, ptr %ds
  %278 = add i64 %277, 48
  %279 = inttoptr i64 %278 to ptr
  %280 = load i64, ptr %150
  store i64 %280, ptr %279
  call  void @llvm.stackrestore(ptr %149)
  br label %L311
L251:                                                ; preds = %L248, %L287
  call void asm sideeffect "pop %rbp; addq $$8, %rsp", ""()
  call  void @llvm.eh.ocaml.touch(ptr %13)
  call  void @llvm.eh.ocaml.touch(ptr %15)
  call  void @llvm.eh.ocaml.touch(ptr %25)
  call  void @llvm.eh.ocaml.touch(ptr %27)
  %281 = call i64 asm sideeffect "movq %rax, $0", "=r,~{rax}"()
  store i64 %281, ptr %3
  %282 = load i64, ptr %3
  store i64 %282, ptr %28
  %283 = load i64, ptr %27
  %284 = load i64, ptr %ds
  %285 = add i64 %284, 64
  %286 = inttoptr i64 %285 to ptr
  store i64 %283, ptr %286
  store i64 1, ptr %56
  %287 = load i64, ptr %56
  store i64 %287, ptr %57
  store ptr @camlExn_part1, ptr %58
  %288 = load i64, ptr %58
  %289 = add i64 %288, 0
  %290 = inttoptr i64 %289 to ptr
  %291 = load i64, ptr %290
  store i64 %291, ptr %59
  %292 = load i64, ptr %28
  %293 = add i64 %292, 0
  %294 = inttoptr i64 %293 to ptr
  %295 = load i64, ptr %294
  store i64 %295, ptr %60
  %296 = load i64, ptr %60
  %297 = load i64, ptr %59
  %298 = icmp slt i64 %296, %297
  br i1 %298, label %L306, label %299
299:
  %300 = load i64, ptr %60
  %301 = load i64, ptr %59
  %302 = icmp sgt i64 %300, %301
  br i1 %302, label %L306, label %L300
L300:                                                ; preds = %L251
  %303 = load i64, ptr %28
  store i64 %303, ptr %61
  %304 = load i64, ptr %61
  %305 = add i64 %304, 8
  store i64 %305, ptr %61
  %306 = load i64, ptr %61
  %307 = add i64 %306, 0
  %308 = inttoptr i64 %307 to ptr
  %309 = load i64, ptr %308
  store i64 %309, ptr %62
  %310 = load i64, ptr %62
  store i64 %310, ptr %63
  %311 = load i64, ptr %63
  %312 = load i64, ptr %25
  %313 = add i64 %311, %312
  store i64 %313, ptr %63
  %314 = load i64, ptr %63
  store i64 %314, ptr %64
  %315 = load i64, ptr %64
  %316 = add i64 %315, -1
  store i64 %316, ptr %64
  %317 = load i64, ptr %64
  store i64 %317, ptr %65
  %318 = load i64, ptr %65
  store i64 %318, ptr %17
  br label %L311
L306:                                                ; preds = %L251
  %319 = load i64, ptr %28
  store i64 %319, ptr %3
  %320 = load i64, ptr %ds
  %321 = add i64 %320, 48
  %322 = inttoptr i64 %321 to ptr
  %323 = load i64, ptr %322
  %324 = inttoptr i64 %323 to ptr
  %325 = load i64, ptr %324
  %326 = add i64 %323, 8
  %327 = inttoptr i64 %326 to ptr
  %328 = load ptr, ptr %327
  %329 = load i64, ptr %3
  %330 = add i64 %323, 16
  store i64 %325, ptr %322
  call void @llvm.write_register.i64(metadata !{!"rsp\00"}, i64 %330)
  call void asm sideeffect "movq $0, %rax; jmpq *$1", "r,r,~{rax}"(i64 %329, ptr %328)
  unreachable
L311:                                                ; preds = %L292, %L300
  %331 = load i64, ptr %ds
  %332 = add i64 %331, 48
  %333 = inttoptr i64 %332 to ptr
  %334 = load i64, ptr %103
  store i64 %334, ptr %333
  call  void @llvm.stackrestore(ptr %102)
  %335 = load i64, ptr %17
  store i64 %335, ptr %3
  %336 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %337 = load ptr, ptr %ds
  %338 = insertvalue { { ptr }, { i64 } } %336, ptr %337, 0, 0
  %339 = load i64, ptr %3
  %340 = insertvalue { { ptr }, { i64 } } %338, i64 %339, 1, 0
  ret { { ptr }, { i64 } } %340
L235:                                                ; preds = %L232, %L306
  call void asm sideeffect "pop %rbp; addq $$8, %rsp", ""()
  call  void @llvm.eh.ocaml.touch(ptr %13)
  call  void @llvm.eh.ocaml.touch(ptr %15)
  %341 = call i64 asm sideeffect "movq %rax, $0", "=r,~{rax}"()
  store i64 %341, ptr %3
  %342 = load i64, ptr %3
  store i64 %342, ptr %16
  %343 = load i64, ptr %15
  %344 = load i64, ptr %ds
  %345 = add i64 %344, 64
  %346 = inttoptr i64 %345 to ptr
  store i64 %343, ptr %346
  store i64 1, ptr %66
  %347 = load i64, ptr %66
  store i64 %347, ptr %67
  store ptr @camlExn_part2__Exn3169, ptr %68
  %348 = load i64, ptr %16
  %349 = load i64, ptr %68
  %350 = icmp slt i64 %348, %349
  br i1 %350, label %L319, label %351
351:
  %352 = load i64, ptr %16
  %353 = load i64, ptr %68
  %354 = icmp sgt i64 %352, %353
  br i1 %354, label %L319, label %L317
L317:                                                ; preds = %L235
  %355 = load i64, ptr %13
  store i64 %355, ptr %3
  %356 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %357 = load ptr, ptr %ds
  %358 = insertvalue { { ptr }, { i64 } } %356, ptr %357, 0, 0
  %359 = load i64, ptr %3
  %360 = insertvalue { { ptr }, { i64 } } %358, i64 %359, 1, 0
  ret { { ptr }, { i64 } } %360
L319:                                                ; preds = %L235
  %361 = load i64, ptr %16
  store i64 %361, ptr %3
  %362 = load i64, ptr %ds
  %363 = add i64 %362, 48
  %364 = inttoptr i64 %363 to ptr
  %365 = load i64, ptr %364
  %366 = inttoptr i64 %365 to ptr
  %367 = load i64, ptr %366
  %368 = add i64 %365, 8
  %369 = inttoptr i64 %368 to ptr
  %370 = load ptr, ptr %369
  %371 = load i64, ptr %3
  %372 = add i64 %365, 16
  store i64 %367, ptr %364
  call void @llvm.write_register.i64(metadata !{!"rsp\00"}, i64 %372)
  call void asm sideeffect "movq $0, %rax; jmpq *$1", "r,r,~{rax}"(i64 %371, ptr %370)
  unreachable
}

define cc 104 { { ptr }, { i64 } } @camlExn_part2__entry(ptr %0)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %2 = alloca i64
  %3 = alloca i64
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  br label %L1
L1:
  br label %L327
L327:                                                ; preds = %L1
  store i64 1, ptr %6
  %15 = load i64, ptr %6
  store i64 %15, ptr %3
  %16 = load i64, ptr %3
  %17 = load i64, ptr %ds
  %18 = add i64 %17, 104
  %19 = inttoptr i64 %18 to ptr
  %20 = load i64, ptr %19
  %21 = call i64 @llvm.read_register.i64(metadata !{!"rsp\00"})
  call void @llvm.write_register.i64(metadata !{!"rsp\00"}, i64 %20)
  %22 = call  { i64 } @caml_fresh_oo_id(i64 %16)
  call void @llvm.write_register.i64(metadata !{!"rsp\00"}, i64 %21)
  %23 = extractvalue { i64 } %22, 0
  store i64 %23, ptr %2
  br label %L329
L329:                                                ; preds = %L327
  %24 = load i64, ptr %2
  store i64 %24, ptr %7
  %25 = load i64, ptr %7
  store i64 %25, ptr %8
  store ptr @camlExn_part2__Exn3169, ptr %9
  %26 = load i64, ptr %9
  store i64 %26, ptr %10
  %27 = load i64, ptr %10
  %28 = add i64 %27, 8
  store i64 %28, ptr %10
  %29 = load i64, ptr %10
  store i64 %29, ptr %3
  %30 = load i64, ptr %8
  store i64 %30, ptr %4
  %31 = load i64, ptr %3
  %32 = load i64, ptr %4
  %33 = load i64, ptr %ds
  %34 = add i64 %33, 104
  %35 = inttoptr i64 %34 to ptr
  %36 = load i64, ptr %35
  %37 = call i64 @llvm.read_register.i64(metadata !{!"rsp\00"})
  call void @llvm.write_register.i64(metadata !{!"rsp\00"}, i64 %36)
  %38 = call  {  } @caml_initialize(i64 %31, i64 %32)
  call void @llvm.write_register.i64(metadata !{!"rsp\00"}, i64 %37)
  br label %L330
L330:                                                ; preds = %L329
  store i64 1, ptr %11
  store ptr @camlExn_part2, ptr %12
  %39 = load i64, ptr %12
  store i64 %39, ptr %13
  %40 = load i64, ptr %13
  store i64 %40, ptr %5
  store i64 1, ptr %14
  %41 = load i64, ptr %14
  store i64 %41, ptr %2
  %42 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %43 = load ptr, ptr %ds
  %44 = insertvalue { { ptr }, { i64 } } %42, ptr %43, 0, 0
  %45 = load i64, ptr %2
  %46 = insertvalue { { ptr }, { i64 } } %44, i64 %45, 1, 0
  ret { { ptr }, { i64 } } %46
}

declare  { i64 } @caml_fresh_oo_id(i64)
declare  {  } @caml_initialize(i64, i64)
declare  void @llvm.stackrestore(ptr)
declare  ptr @llvm.stacksave()
declare i64 @llvm.read_register.i64(metadata)
declare void @llvm.write_register.i64(metadata, i64)
declare i32 @llvm.eh.ocaml.try() returns_twice
declare void @llvm.eh.ocaml.touch(ptr)

@camlExn_part1 = external global ptr
@caml_curry2 = external global ptr

@camlExn_part2__data_end = global {  } {  }, align 8
define void @camlExn_part2__code_end() { ret void }
@camlExn_part2__frametable = global {  } {  }, align 8
