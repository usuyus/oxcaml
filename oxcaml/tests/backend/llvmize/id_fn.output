source_filename = "id_fn.ml"

@camlId_fn__data_begin = global {  } {  }, align 8
define void @camlId_fn__code_begin() { ret void }

@camlId_fn__gc_roots = global { i64 } { i64 0 }, align 8
@.header.camlId_fn = global { i64 } { i64 1792 }, align 8
@camlId_fn = global { ptr } { ptr @camlId_fn__f_1 }, align 8
@.header.camlId_fn__f_1 = global { i64 } { i64 3063 }, align 8
@camlId_fn__f_1 = global { ptr, i64 } { ptr @camlId_fn__f_HIDE_STAMP, i64 108086391056891909 }, align 8
define cc 104 { { ptr, ptr }, { i64 } } @camlId_fn__f_HIDE_STAMP(ptr %0, ptr %1, i64 %2)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  br label %L1
L1:
  br label %L101
L101:                                                ; preds = %L1
  %6 = load i64, ptr %4
  store i64 %6, ptr %5
  %7 = load i64, ptr %5
  store i64 %7, ptr %4
  %8 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %9 = load ptr, ptr %ds
  %10 = insertvalue { { ptr, ptr }, { i64 } } %8, ptr %9, 0, 0
  %11 = load ptr, ptr %alloc
  %12 = insertvalue { { ptr, ptr }, { i64 } } %10, ptr %11, 0, 1
  %13 = load i64, ptr %4
  %14 = insertvalue { { ptr, ptr }, { i64 } } %12, i64 %13, 1, 0
  ret { { ptr, ptr }, { i64 } } %14
}

define cc 104 { { ptr, ptr }, { i64 } } @camlId_fn__entry(ptr %0, ptr %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %3 = alloca i64
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  br label %L1
L1:
  br label %L107
L107:                                                ; preds = %L1
  store ptr @camlId_fn, ptr %5
  %8 = load i64, ptr %5
  store i64 %8, ptr %6
  %9 = load i64, ptr %6
  store i64 %9, ptr %4
  store i64 1, ptr %7
  %10 = load i64, ptr %7
  store i64 %10, ptr %3
  %11 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %12 = load ptr, ptr %ds
  %13 = insertvalue { { ptr, ptr }, { i64 } } %11, ptr %12, 0, 0
  %14 = load ptr, ptr %alloc
  %15 = insertvalue { { ptr, ptr }, { i64 } } %13, ptr %14, 0, 1
  %16 = load i64, ptr %3
  %17 = insertvalue { { ptr, ptr }, { i64 } } %15, i64 %16, 1, 0
  ret { { ptr, ptr }, { i64 } } %17
}

declare i64 @llvm.read_register.i64(metadata)
declare void @llvm.write_register.i64(metadata, i64)


@camlId_fn__data_end = global {  } {  }, align 8
define void @camlId_fn__code_end() { ret void }
@camlId_fn__frametable = global {  } {  }, align 8
