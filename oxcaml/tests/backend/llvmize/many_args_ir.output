source_filename = "many_args.ml"

@camlMany_args__data_begin = global {  } {  }, align 8
define void @camlMany_args__code_begin() { ret void }

@camlMany_args__gc_roots = global { i64 } { i64 0 }, align 8
@.header.camlMany_args = global { i64 } { i64 1792 }, align 8
@camlMany_args = global { ptr } { ptr @camlMany_args__call_with_1 }, align 8
@.header.camlMany_args__call_with_1 = global { i64 } { i64 3063 }, align 8
@camlMany_args__call_with_1 = global { ptr, i64 } { ptr @camlMany_args__call_with_HIDE_STAMP, i64 108086391056891909 }, align 8
define cc 104 { { ptr, ptr }, { i64 } } @camlMany_args__call_with_HIDE_STAMP(ptr %0, ptr %1, i64 %2)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = load i64, ptr %ds
  %21 = add i64 %20, 576
  %22 = inttoptr i64 %21 to ptr
  %23 = load i64, ptr %ds
  %24 = add i64 %23, 584
  %25 = inttoptr i64 %24 to ptr
  %26 = load i64, ptr %ds
  %27 = add i64 %26, 592
  %28 = inttoptr i64 %27 to ptr
  %29 = load i64, ptr %ds
  %30 = add i64 %29, 600
  %31 = inttoptr i64 %30 to ptr
  %32 = alloca i64
  %33 = alloca i64
  br label %L1
L1:
  br label %L101
L101:                                                ; preds = %L1
  %34 = load i64, ptr %4
  store i64 %34, ptr %14
  store ptr @camlMany_args_defn, ptr %15
  %35 = load i64, ptr %15
  %36 = add i64 %35, 0
  %37 = inttoptr i64 %36 to ptr
  %38 = load i64, ptr %37
  store i64 %38, ptr %16
  %39 = load i64, ptr %14
  store i64 %39, ptr %17
  %40 = load i64, ptr %17
  %41 = add i64 %40, 60
  store i64 %41, ptr %17
  store i64 7, ptr %18
  %42 = load i64, ptr %14
  store i64 %42, ptr %4
  %43 = load i64, ptr %14
  store i64 %43, ptr %5
  %44 = load i64, ptr %18
  store i64 %44, ptr %6
  %45 = load i64, ptr %14
  store i64 %45, ptr %7
  %46 = load i64, ptr %14
  store i64 %46, ptr %8
  %47 = load i64, ptr %14
  store i64 %47, ptr %9
  %48 = load i64, ptr %14
  store i64 %48, ptr %10
  %49 = load i64, ptr %14
  store i64 %49, ptr %11
  %50 = load i64, ptr %14
  store i64 %50, ptr %12
  %51 = load i64, ptr %14
  store i64 %51, ptr %13
  %52 = load i64, ptr %14
  store i64 %52, ptr %22
  %53 = load i64, ptr %14
  store i64 %53, ptr %25
  %54 = load i64, ptr %17
  store i64 %54, ptr %28
  %55 = load i64, ptr %16
  store i64 %55, ptr %31
  %56 = load i64, ptr %4
  %57 = load i64, ptr %5
  %58 = load i64, ptr %6
  %59 = load i64, ptr %7
  %60 = load i64, ptr %8
  %61 = load i64, ptr %9
  %62 = load i64, ptr %10
  %63 = load i64, ptr %11
  %64 = load i64, ptr %12
  %65 = load i64, ptr %13
  %66 = load ptr, ptr %ds
  %67 = load ptr, ptr %alloc
  %68 = call cc 104 { { ptr, ptr }, { i64 } } @caml_apply13(ptr %66, ptr %67, i64 %56, i64 %57, i64 %58, i64 %59, i64 %60, i64 %61, i64 %62, i64 %63, i64 %64, i64 %65)
  %69 = extractvalue { { ptr, ptr }, { i64 } } %68, 0, 0
  store ptr %69, ptr %ds
  %70 = extractvalue { { ptr, ptr }, { i64 } } %68, 0, 1
  store ptr %70, ptr %alloc
  %71 = extractvalue { { ptr, ptr }, { i64 } } %68, 1, 0
  store i64 %71, ptr %4
  br label %L103
L103:                                                ; preds = %L101
  %72 = load i64, ptr %4
  store i64 %72, ptr %19
  %73 = load i64, ptr %19
  store i64 %73, ptr %32
  %74 = load i64, ptr %32
  store i64 %74, ptr %33
  %75 = load i64, ptr %33
  %76 = add i64 %75, 2
  store i64 %76, ptr %33
  %77 = load i64, ptr %33
  store i64 %77, ptr %4
  %78 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %79 = load ptr, ptr %ds
  %80 = insertvalue { { ptr, ptr }, { i64 } } %78, ptr %79, 0, 0
  %81 = load ptr, ptr %alloc
  %82 = insertvalue { { ptr, ptr }, { i64 } } %80, ptr %81, 0, 1
  %83 = load i64, ptr %4
  %84 = insertvalue { { ptr, ptr }, { i64 } } %82, i64 %83, 1, 0
  ret { { ptr, ptr }, { i64 } } %84
}

define cc 104 { { ptr, ptr }, { i64 } } @camlMany_args__entry(ptr %0, ptr %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %3 = alloca i64
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  br label %L1
L1:
  br label %L111
L111:                                                ; preds = %L1
  store ptr @camlMany_args, ptr %5
  %8 = load i64, ptr %5
  store i64 %8, ptr %6
  %9 = load i64, ptr %6
  store i64 %9, ptr %4
  store i64 1, ptr %7
  %10 = load i64, ptr %7
  store i64 %10, ptr %3
  %11 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %12 = load ptr, ptr %ds
  %13 = insertvalue { { ptr, ptr }, { i64 } } %11, ptr %12, 0, 0
  %14 = load ptr, ptr %alloc
  %15 = insertvalue { { ptr, ptr }, { i64 } } %13, ptr %14, 0, 1
  %16 = load i64, ptr %3
  %17 = insertvalue { { ptr, ptr }, { i64 } } %15, i64 %16, 1, 0
  ret { { ptr, ptr }, { i64 } } %17
}

declare cc 104 { { ptr, ptr }, { i64 } } @caml_apply13(ptr, ptr, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64)
declare i64 @llvm.read_register.i64(metadata)
declare void @llvm.write_register.i64(metadata, i64)

@camlMany_args_defn = external global ptr

@camlMany_args__data_end = global {  } {  }, align 8
define void @camlMany_args__code_end() { ret void }
@camlMany_args__frametable = global {  } {  }, align 8
