source_filename = "array_rev.ml"

@camlArray_rev__data_begin = global {  } {  }, align 8
define void @camlArray_rev__code_begin() { ret void }

@camlArray_rev__gc_roots = global { i64 } { i64 0 }, align 8
@.header.camlArray_rev = global { i64 } { i64 1792 }, align 8
@camlArray_rev = global { ptr } { ptr @camlArray_rev__rev_1 }, align 8
@.header.camlArray_rev__rev_1 = global { i64 } { i64 3063 }, align 8
@camlArray_rev__rev_1 = global { ptr, i64 } { ptr @camlArray_rev__rev_HIDE_STAMP, i64 108086391056891909 }, align 8
define cc 104 { { ptr }, { i64 } } @camlArray_rev__rev_HIDE_STAMP(ptr %0, i64 %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %3 = alloca i64
  store i64 %1, ptr %3
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca i64
  %22 = alloca i64
  %23 = alloca i64
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca i64
  %29 = alloca i64
  %30 = alloca i64
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca i64
  %36 = alloca i64
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca i64
  %42 = alloca i64
  %43 = alloca i64
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca i64
  %47 = alloca i64
  %48 = alloca i64
  br label %L1
L1:
  br label %L101
L101:                                                ; preds = %L1
  %49 = load i64, ptr %3
  store i64 %49, ptr %4
  store ptr @camlArray_rev_data, ptr %5
  %50 = load i64, ptr %5
  store i64 %50, ptr %6
  %51 = load i64, ptr %6
  %52 = add i64 %51, 8
  store i64 %52, ptr %6
  %53 = load i64, ptr %6
  %54 = add i64 %53, 0
  %55 = inttoptr i64 %54 to ptr
  %56 = load i64, ptr %55
  store i64 %56, ptr %7
  %57 = load i64, ptr %7
  store i64 %57, ptr %8
  %58 = load i64, ptr %8
  store i64 %58, ptr %9
  %59 = load i64, ptr %9
  %60 = ashr i64 %59, 1
  store i64 %60, ptr %9
  %61 = load i64, ptr %9
  store i64 %61, ptr %10
  %62 = load i64, ptr %10
  store i64 %62, ptr %11
  %63 = load i64, ptr %11
  %64 = lshr i64 %63, 63
  store i64 %64, ptr %11
  %65 = load i64, ptr %10
  store i64 %65, ptr %12
  %66 = load i64, ptr %12
  %67 = load i64, ptr %11
  %68 = add i64 %66, %67
  store i64 %68, ptr %12
  %69 = load i64, ptr %12
  store i64 %69, ptr %13
  %70 = load i64, ptr %13
  %71 = ashr i64 %70, 1
  store i64 %71, ptr %13
  %72 = load i64, ptr %13
  store i64 %72, ptr %14
  %73 = load i64, ptr %14
  %74 = shl i64 %73, 1
  store i64 %74, ptr %14
  %75 = load i64, ptr %14
  store i64 %75, ptr %15
  %76 = load i64, ptr %15
  %77 = add i64 %76, -1
  store i64 %77, ptr %15
  %78 = load i64, ptr %15
  store i64 %78, ptr %16
  %79 = load i64, ptr %16
  %80 = icmp slt i64 %79, 1
  br i1 %80, label %L144, label %81
81:
  %82 = load i64, ptr %16
  %83 = icmp sgt i64 %82, 1
  br i1 %83, label %L114, label %L114
L114:                                                ; preds = %L101
  store i64 1, ptr %18
  %84 = load i64, ptr %18
  store i64 %84, ptr %19
  %85 = load i64, ptr %19
  store i64 %85, ptr %17
  br label %L116
L116:                                                ; preds = %L114, %L137
  store ptr @camlArray_rev_data, ptr %20
  %86 = load i64, ptr %20
  %87 = add i64 %86, 0
  %88 = inttoptr i64 %87 to ptr
  %89 = load i64, ptr %88
  store i64 %89, ptr %21
  %90 = load i64, ptr %21
  store i64 %90, ptr %22
  %91 = load i64, ptr %17
  store i64 %91, ptr %23
  %92 = load i64, ptr %23
  %93 = shl i64 %92, 2
  store i64 %93, ptr %23
  %94 = load i64, ptr %22
  store i64 %94, ptr %24
  %95 = load i64, ptr %24
  %96 = load i64, ptr %23
  %97 = add i64 %95, %96
  store i64 %97, ptr %24
  %98 = load i64, ptr %24
  store i64 %98, ptr %25
  %99 = load i64, ptr %25
  %100 = add i64 %99, -4
  store i64 %100, ptr %25
  %101 = load i64, ptr %25
  %102 = add i64 %101, 0
  %103 = inttoptr i64 %102 to ptr
  %104 = load i64, ptr %103
  store i64 %104, ptr %26
  %105 = load i64, ptr %26
  store i64 %105, ptr %27
  %106 = load i64, ptr %8
  store i64 %106, ptr %28
  %107 = load i64, ptr %28
  %108 = load i64, ptr %17
  %109 = sub i64 %107, %108
  store i64 %109, ptr %28
  %110 = load i64, ptr %28
  store i64 %110, ptr %29
  %111 = load i64, ptr %29
  %112 = add i64 %111, -1
  store i64 %112, ptr %29
  %113 = load i64, ptr %29
  store i64 %113, ptr %30
  %114 = load i64, ptr %17
  store i64 %114, ptr %31
  %115 = load i64, ptr %31
  %116 = shl i64 %115, 2
  store i64 %116, ptr %31
  %117 = load i64, ptr %22
  store i64 %117, ptr %32
  %118 = load i64, ptr %32
  %119 = load i64, ptr %31
  %120 = add i64 %118, %119
  store i64 %120, ptr %32
  %121 = load i64, ptr %32
  store i64 %121, ptr %33
  %122 = load i64, ptr %33
  %123 = add i64 %122, -4
  store i64 %123, ptr %33
  %124 = load i64, ptr %30
  store i64 %124, ptr %34
  %125 = load i64, ptr %34
  %126 = shl i64 %125, 2
  store i64 %126, ptr %34
  %127 = load i64, ptr %22
  store i64 %127, ptr %35
  %128 = load i64, ptr %35
  %129 = load i64, ptr %34
  %130 = add i64 %128, %129
  store i64 %130, ptr %35
  %131 = load i64, ptr %35
  store i64 %131, ptr %36
  %132 = load i64, ptr %36
  %133 = add i64 %132, -4
  store i64 %133, ptr %36
  %134 = load i64, ptr %36
  %135 = add i64 %134, 0
  %136 = inttoptr i64 %135 to ptr
  %137 = load i64, ptr %136
  store i64 %137, ptr %37
  %138 = load i64, ptr %33
  %139 = add i64 %138, 0
  %140 = inttoptr i64 %139 to ptr
  %141 = load i64, ptr %37
  store i64 %141, ptr %140
  store i64 1, ptr %38
  %142 = load i64, ptr %38
  store i64 %142, ptr %39
  %143 = load i64, ptr %30
  store i64 %143, ptr %40
  %144 = load i64, ptr %40
  %145 = shl i64 %144, 2
  store i64 %145, ptr %40
  %146 = load i64, ptr %22
  store i64 %146, ptr %41
  %147 = load i64, ptr %41
  %148 = load i64, ptr %40
  %149 = add i64 %147, %148
  store i64 %149, ptr %41
  %150 = load i64, ptr %41
  store i64 %150, ptr %42
  %151 = load i64, ptr %42
  %152 = add i64 %151, -4
  store i64 %152, ptr %42
  %153 = load i64, ptr %42
  %154 = add i64 %153, 0
  %155 = inttoptr i64 %154 to ptr
  %156 = load i64, ptr %27
  store i64 %156, ptr %155
  store i64 1, ptr %43
  %157 = load i64, ptr %43
  store i64 %157, ptr %44
  %158 = load i64, ptr %17
  %159 = load i64, ptr %16
  %160 = icmp slt i64 %158, %159
  br i1 %160, label %L137, label %161
161:
  %162 = load i64, ptr %17
  %163 = load i64, ptr %16
  %164 = icmp sgt i64 %162, %163
  br i1 %164, label %L137, label %L140
L137:                                                ; preds = %L116
  %165 = load i64, ptr %17
  store i64 %165, ptr %45
  %166 = load i64, ptr %45
  %167 = add i64 %166, 2
  store i64 %167, ptr %45
  %168 = load i64, ptr %45
  store i64 %168, ptr %46
  %169 = load i64, ptr %46
  store i64 %169, ptr %17
  br label %L116
L140:                                                ; preds = %L116
  store i64 1, ptr %47
  %170 = load i64, ptr %47
  store i64 %170, ptr %3
  %171 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %172 = load ptr, ptr %ds
  %173 = insertvalue { { ptr }, { i64 } } %171, ptr %172, 0, 0
  %174 = load i64, ptr %3
  %175 = insertvalue { { ptr }, { i64 } } %173, i64 %174, 1, 0
  ret { { ptr }, { i64 } } %175
L144:                                                ; preds = %L101
  store i64 1, ptr %48
  %176 = load i64, ptr %48
  store i64 %176, ptr %3
  %177 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %178 = load ptr, ptr %ds
  %179 = insertvalue { { ptr }, { i64 } } %177, ptr %178, 0, 0
  %180 = load i64, ptr %3
  %181 = insertvalue { { ptr }, { i64 } } %179, i64 %180, 1, 0
  ret { { ptr }, { i64 } } %181
}

define cc 104 { { ptr }, { i64 } } @camlArray_rev__entry(ptr %0)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %2 = alloca i64
  %3 = alloca i64
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  br label %L1
L1:
  br label %L151
L151:                                                ; preds = %L1
  store ptr @camlArray_rev, ptr %4
  %7 = load i64, ptr %4
  store i64 %7, ptr %5
  %8 = load i64, ptr %5
  store i64 %8, ptr %3
  store i64 1, ptr %6
  %9 = load i64, ptr %6
  store i64 %9, ptr %2
  %10 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %11 = load ptr, ptr %ds
  %12 = insertvalue { { ptr }, { i64 } } %10, ptr %11, 0, 0
  %13 = load i64, ptr %2
  %14 = insertvalue { { ptr }, { i64 } } %12, i64 %13, 1, 0
  ret { { ptr }, { i64 } } %14
}

declare i64 @llvm.read_register.i64(metadata)
declare void @llvm.write_register.i64(metadata, i64)

@camlArray_rev_data = external global ptr

@camlArray_rev__data_end = global {  } {  }, align 8
define void @camlArray_rev__code_end() { ret void }
@camlArray_rev__frametable = global {  } {  }, align 8
