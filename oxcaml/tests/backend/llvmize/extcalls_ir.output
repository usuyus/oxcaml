source_filename = "extcalls.ml"

@camlExtcalls__data_begin = global {  } {  }, align 8
define void @camlExtcalls__code_begin() { ret void }

@camlExtcalls__gc_roots = global { i64 } { i64 0 }, align 8
@.header.camlExtcalls = global { i64 } { i64 2816 }, align 8
@camlExtcalls = global { ptr, ptr } { ptr @camlExtcalls__call_too_many_2, ptr @camlExtcalls__call_print_and_add_3 }, align 8
@.header.camlExtcalls__call_print_and_add_3 = global { i64 } { i64 3063 }, align 8
@camlExtcalls__call_print_and_add_3 = global { ptr, i64 } { ptr @camlExtcalls__call_print_and_add_HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlExtcalls__call_too_many_2 = global { i64 } { i64 3063 }, align 8
@camlExtcalls__call_too_many_2 = global { ptr, i64 } { ptr @camlExtcalls__call_too_many_HIDE_STAMP, i64 108086391056891909 }, align 8
define cc 104 { { ptr }, { i64 } } @camlExtcalls__call_too_many_HIDE_STAMP(ptr %0, i64 %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %3 = alloca i64
  store i64 %1, ptr %3
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca i64
  %22 = alloca i64
  %23 = alloca i64
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca i64
  %29 = alloca i64
  br label %L1
L1:
  br label %L101
L101:                                                ; preds = %L1
  %30 = load i64, ptr %3
  store i64 %30, ptr %10
  store i64 25, ptr %11
  store i64 23, ptr %12
  store i64 21, ptr %13
  store i64 19, ptr %14
  store i64 17, ptr %15
  store i64 15, ptr %16
  store i64 13, ptr %17
  store i64 11, ptr %18
  store i64 9, ptr %19
  store i64 7, ptr %20
  store i64 5, ptr %21
  store i64 3, ptr %22
  %31 = load i64, ptr %22
  store i64 %31, ptr %4
  %32 = load i64, ptr %21
  store i64 %32, ptr %5
  %33 = load i64, ptr %20
  store i64 %33, ptr %6
  %34 = load i64, ptr %19
  store i64 %34, ptr %7
  %35 = load i64, ptr %18
  store i64 %35, ptr %8
  %36 = load i64, ptr %17
  store i64 %36, ptr %9
  %37 = load i64, ptr %16
  store i64 %37, ptr %23
  %38 = load i64, ptr %15
  store i64 %38, ptr %24
  %39 = load i64, ptr %14
  store i64 %39, ptr %25
  %40 = load i64, ptr %13
  store i64 %40, ptr %26
  %41 = load i64, ptr %12
  store i64 %41, ptr %27
  %42 = load i64, ptr %11
  store i64 %42, ptr %28
  %43 = load i64, ptr %4
  %44 = load i64, ptr %5
  %45 = load i64, ptr %6
  %46 = load i64, ptr %7
  %47 = load i64, ptr %8
  %48 = load i64, ptr %9
  %49 = load i64, ptr %23
  %50 = load i64, ptr %24
  %51 = load i64, ptr %25
  %52 = load i64, ptr %26
  %53 = load i64, ptr %27
  %54 = load i64, ptr %28
  %55 = call cc 105 { i64 } @caml_c_call_stack_args_llvm_backend(ptr @too_many, i64 48, i64 %43, i64 %44, i64 %45, i64 %46, i64 %47, i64 %48, i64 %49, i64 %50, i64 %51, i64 %52, i64 %53, i64 %54)
  %56 = extractvalue { i64 } %55, 0
  store i64 %56, ptr %3
  br label %L103
L103:                                                ; preds = %L101
  %57 = load i64, ptr %3
  store i64 %57, ptr %29
  %58 = load i64, ptr %29
  store i64 %58, ptr %3
  %59 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %60 = load ptr, ptr %ds
  %61 = insertvalue { { ptr }, { i64 } } %59, ptr %60, 0, 0
  %62 = load i64, ptr %3
  %63 = insertvalue { { ptr }, { i64 } } %61, i64 %62, 1, 0
  ret { { ptr }, { i64 } } %63
}

define cc 104 { { ptr }, { i64 } } @camlExtcalls__call_print_and_add_HIDE_STAMP(ptr %0, i64 %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %3 = alloca i64
  store i64 %1, ptr %3
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  br label %L1
L1:
  br label %L105
L105:                                                ; preds = %L1
  %10 = load i64, ptr %3
  store i64 %10, ptr %6
  store i64 21, ptr %7
  store i64 19, ptr %8
  %11 = load i64, ptr %8
  store i64 %11, ptr %4
  %12 = load i64, ptr %7
  store i64 %12, ptr %5
  %13 = load i64, ptr %4
  %14 = load i64, ptr %5
  %15 = call cc 105 { i64 } @caml_c_call(ptr @print_and_add, i64 poison, i64 %13, i64 %14)
  %16 = extractvalue { i64 } %15, 0
  store i64 %16, ptr %3
  br label %L107
L107:                                                ; preds = %L105
  %17 = load i64, ptr %3
  store i64 %17, ptr %9
  %18 = load i64, ptr %9
  store i64 %18, ptr %3
  %19 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %20 = load ptr, ptr %ds
  %21 = insertvalue { { ptr }, { i64 } } %19, ptr %20, 0, 0
  %22 = load i64, ptr %3
  %23 = insertvalue { { ptr }, { i64 } } %21, i64 %22, 1, 0
  ret { { ptr }, { i64 } } %23
}

define cc 104 { { ptr }, { i64 } } @camlExtcalls__entry(ptr %0)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %2 = alloca i64
  %3 = alloca i64
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  br label %L1
L1:
  br label %L112
L112:                                                ; preds = %L1
  store ptr @camlExtcalls, ptr %4
  %7 = load i64, ptr %4
  store i64 %7, ptr %5
  %8 = load i64, ptr %5
  store i64 %8, ptr %3
  store i64 1, ptr %6
  %9 = load i64, ptr %6
  store i64 %9, ptr %2
  %10 = extractvalue { { { ptr }, { i64 } } } poison, 0
  %11 = load ptr, ptr %ds
  %12 = insertvalue { { ptr }, { i64 } } %10, ptr %11, 0, 0
  %13 = load i64, ptr %2
  %14 = insertvalue { { ptr }, { i64 } } %12, i64 %13, 1, 0
  ret { { ptr }, { i64 } } %14
}

@.temp.Extcalls.0 = global { ptr, ptr, ptr } { ptr @int_and_float, ptr @too_many, ptr @print_and_add }, align 8
declare i64 @llvm.read_register.i64(metadata)
declare void @llvm.write_register.i64(metadata, i64)
declare i32 @llvm.eh.ocaml.try()
define private cc 104 {ptr, i32} @wrap_try(ptr %r14) returns_twice noinline {
  %1 = call i32 @llvm.eh.ocaml.try()
  %t1 = extractvalue {{ptr, i32}} poison, 0
  %t2 = insertvalue {ptr, i32} %t1, ptr %r14, 0
  %t3 = insertvalue {ptr, i32} %t2, i32 %1, 1
  ret {ptr, i32} %t3
}

@caml_c_call = external global ptr
@caml_c_call_stack_args_llvm_backend = external global ptr
@int_and_float = external global ptr
@print_and_add = external global ptr
@too_many = external global ptr

@camlExtcalls__data_end = global {  } {  }, align 8
define void @camlExtcalls__code_end() { ret void }
@camlExtcalls__frametable = global {  } {  }, align 8
