source_filename = "alloc.ml"

@camlAlloc__data_begin = global {  } {  }, align 8
define void @camlAlloc__code_begin() { ret void }

@camlAlloc__gc_roots = global { i64 } { i64 0 }, align 8
@.header.camlAlloc = global { i64 } { i64 7936 }, align 8
@camlAlloc = global { ptr, ptr, ptr, ptr, ptr, ptr, ptr } { ptr @camlAlloc__my_fold_9, ptr @camlAlloc__local_iota_10, ptr @camlAlloc__big_local_alloc_11, ptr @camlAlloc__heap_iota_13, ptr @camlAlloc__big_heap_alloc_14, ptr @camlAlloc__make_ref_16, ptr @camlAlloc__heap_ref_incr_17 }, align 8
@.header.camlAlloc__heap_ref_incr_17 = global { i64 } { i64 3063 }, align 8
@camlAlloc__heap_ref_incr_17 = global { ptr, i64 } { ptr @camlAlloc__heap_ref_incr_HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlAlloc__make_ref_16 = global { i64 } { i64 3063 }, align 8
@camlAlloc__make_ref_16 = global { ptr, i64 } { ptr @camlAlloc__make_ref_HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlAlloc__big_heap_alloc_14 = global { i64 } { i64 3063 }, align 8
@camlAlloc__big_heap_alloc_14 = global { ptr, i64 } { ptr @camlAlloc__big_heap_alloc_HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlAlloc__heap_iota_13 = global { i64 } { i64 4087 }, align 8
@camlAlloc__heap_iota_13 = global { ptr, i64, ptr } { ptr @caml_curry2, i64 180143985094819847, ptr @camlAlloc__heap_iota_HIDE_STAMP }, align 8
@.header.camlAlloc__big_local_alloc_11 = global { i64 } { i64 3063 }, align 8
@camlAlloc__big_local_alloc_11 = global { ptr, i64 } { ptr @camlAlloc__big_local_alloc_HIDE_STAMP, i64 108086391056891909 }, align 8
@.header.camlAlloc__fn$5balloc.ml$3a12$2c13$2d$2d16$5d_12 = global { i64 } { i64 4087 }, align 8
@camlAlloc__fn$5balloc.ml$3a12$2c13$2d$2d16$5d_12 = global { ptr, i64, ptr } { ptr @caml_curry2L2, i64 180143985094819847, ptr @camlAlloc__fn$5balloc.ml$3a12$2c13$2d$2d16$5d_HIDE_STAMP }, align 8
@.header.camlAlloc__local_iota_10 = global { i64 } { i64 4087 }, align 8
@camlAlloc__local_iota_10 = global { ptr, i64, ptr } { ptr @caml_curry2L1, i64 180143985094819847, ptr @camlAlloc__local_iota_HIDE_STAMP }, align 8
@.header.camlAlloc__my_fold_9 = global { i64 } { i64 4087 }, align 8
@camlAlloc__my_fold_9 = global { ptr, i64, ptr } { ptr @caml_curry3L1, i64 252201579132747783, ptr @camlAlloc__my_fold_HIDE_STAMP }, align 8
@.header.camlAlloc__const_block138 = global { i64 } { i64 2827 }, align 8
@camlAlloc__const_block138 = global { ptr, ptr } { ptr @camlAlloc__immstring136, ptr @camlAlloc__const_block113 }, align 8
@.header.camlAlloc__immstring136 = global { i64 } { i64 3068 }, align 8
@camlAlloc__immstring136 = global { [ 15 x i8 ], [ 0 x i8 ], i8 } { [ 15 x i8 ] c"\68\65\61\70\5f\72\65\66\5f\69\6e\63\72\3a\20", [ 0 x i8 ] zeroinitializer, i8 0 }, align 8
@.header.camlAlloc__const_block127 = global { i64 } { i64 2827 }, align 8
@camlAlloc__const_block127 = global { ptr, ptr } { ptr @camlAlloc__immstring125, ptr @camlAlloc__const_block113 }, align 8
@.header.camlAlloc__immstring125 = global { i64 } { i64 4092 }, align 8
@camlAlloc__immstring125 = global { [ 16 x i8 ], [ 7 x i8 ], i8 } { [ 16 x i8 ] c"\62\69\67\5f\68\65\61\70\5f\61\6c\6c\6f\63\3a\20", [ 7 x i8 ] zeroinitializer, i8 7 }, align 8
@.header.camlAlloc__const_block115 = global { i64 } { i64 2827 }, align 8
@camlAlloc__const_block115 = global { ptr, ptr } { ptr @camlAlloc__immstring109, ptr @camlAlloc__const_block113 }, align 8
@.header.camlAlloc__const_block113 = global { i64 } { i64 4868 }, align 8
@camlAlloc__const_block113 = global { i64, i64, i64, ptr } { i64 1, i64 1, i64 1, ptr @camlAlloc__const_block111 }, align 8
@.header.camlAlloc__const_block111 = global { i64 } { i64 2828 }, align 8
@camlAlloc__const_block111 = global { i64, i64 } { i64 21, i64 1 }, align 8
@.header.camlAlloc__immstring109 = global { i64 } { i64 4092 }, align 8
@camlAlloc__immstring109 = global { [ 17 x i8 ], [ 6 x i8 ], i8 } { [ 17 x i8 ] c"\62\69\67\5f\6c\6f\63\61\6c\5f\61\6c\6c\6f\63\3a\20", [ 6 x i8 ] zeroinitializer, i8 6 }, align 8
define cc 104 { { ptr, ptr }, { i64 } } @camlAlloc__my_fold_HIDE_STAMP(ptr %0, ptr %1, i64 %2, i64 %3, i64 %4)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %6 = alloca i64
  store i64 %2, ptr %6
  %7 = alloca i64
  store i64 %3, ptr %7
  %8 = alloca i64
  store i64 %4, ptr %8
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  br label %L1
L1:
  br label %L101
L101:                                                ; preds = %L1
  %18 = load i64, ptr %6
  store i64 %18, ptr %9
  %19 = load i64, ptr %7
  store i64 %19, ptr %10
  %20 = load i64, ptr %8
  store i64 %20, ptr %11
  %21 = load i64, ptr %11
  %22 = trunc i64 %21 to i1
  br i1 %22, label %L103, label %L105
L103:                                                ; preds = %L101
  %23 = load i64, ptr %10
  store i64 %23, ptr %6
  %24 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %25 = load ptr, ptr %ds
  %26 = insertvalue { { ptr, ptr }, { i64 } } %24, ptr %25, 0, 0
  %27 = load ptr, ptr %alloc
  %28 = insertvalue { { ptr, ptr }, { i64 } } %26, ptr %27, 0, 1
  %29 = load i64, ptr %6
  %30 = insertvalue { { ptr, ptr }, { i64 } } %28, i64 %29, 1, 0
  ret { { ptr, ptr }, { i64 } } %30
L105:                                                ; preds = %L101
  %31 = load i64, ptr %11
  store i64 %31, ptr %12
  %32 = load i64, ptr %12
  %33 = add i64 %32, 8
  store i64 %33, ptr %12
  %34 = load i64, ptr %12
  %35 = add i64 %34, 0
  %36 = inttoptr i64 %35 to ptr
  %37 = load i64, ptr %36
  store i64 %37, ptr %13
  %38 = load i64, ptr %9
  store i64 %38, ptr %6
  %39 = load i64, ptr %10
  store i64 %39, ptr %7
  %40 = load i64, ptr %13
  store i64 %40, ptr %8
  %41 = load i64, ptr %6
  %42 = load i64, ptr %7
  %43 = load i64, ptr %8
  %44 = load ptr, ptr %ds
  %45 = load ptr, ptr %alloc
  %46 =  call cc 104 { { ptr, ptr }, { i64 } } @camlAlloc__my_fold_HIDE_STAMP(ptr %44, ptr %45, i64 %41, i64 %42, i64 %43)
  %47 = extractvalue { { ptr, ptr }, { i64 } } %46, 0, 0
  store ptr %47, ptr %ds
  %48 = extractvalue { { ptr, ptr }, { i64 } } %46, 0, 1
  store ptr %48, ptr %alloc
  %49 = extractvalue { { ptr, ptr }, { i64 } } %46, 1, 0
  store i64 %49, ptr %6
  br label %L107
L107:                                                ; preds = %L105
  %50 = load i64, ptr %6
  store i64 %50, ptr %14
  %51 = load i64, ptr %14
  store i64 %51, ptr %15
  %52 = load i64, ptr %11
  %53 = add i64 %52, 0
  %54 = inttoptr i64 %53 to ptr
  %55 = load i64, ptr %54
  store i64 %55, ptr %16
  %56 = load i64, ptr %16
  store i64 %56, ptr %6
  %57 = load i64, ptr %15
  store i64 %57, ptr %7
  %58 = load i64, ptr %9
  store i64 %58, ptr %8
  %59 = load i64, ptr %6
  %60 = load i64, ptr %7
  %61 = load i64, ptr %8
  %62 = load ptr, ptr %ds
  %63 = load ptr, ptr %alloc
  %64 =  call cc 104 { { ptr, ptr }, { i64 } } @caml_apply2(ptr %62, ptr %63, i64 %59, i64 %60, i64 %61)
  %65 = extractvalue { { ptr, ptr }, { i64 } } %64, 0, 0
  store ptr %65, ptr %ds
  %66 = extractvalue { { ptr, ptr }, { i64 } } %64, 0, 1
  store ptr %66, ptr %alloc
  %67 = extractvalue { { ptr, ptr }, { i64 } } %64, 1, 0
  store i64 %67, ptr %6
  br label %L110
L110:                                                ; preds = %L107
  %68 = load i64, ptr %6
  store i64 %68, ptr %17
  %69 = load i64, ptr %17
  store i64 %69, ptr %6
  %70 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %71 = load ptr, ptr %ds
  %72 = insertvalue { { ptr, ptr }, { i64 } } %70, ptr %71, 0, 0
  %73 = load ptr, ptr %alloc
  %74 = insertvalue { { ptr, ptr }, { i64 } } %72, ptr %73, 0, 1
  %75 = load i64, ptr %6
  %76 = insertvalue { { ptr, ptr }, { i64 } } %74, i64 %75, 1, 0
  ret { { ptr, ptr }, { i64 } } %76
}

define cc 104 { { ptr, ptr }, { i64 } } @camlAlloc__local_iota_HIDE_STAMP(ptr %0, ptr %1, i64 %2, i64 %3)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %5 = alloca i64
  store i64 %2, ptr %5
  %6 = alloca i64
  store i64 %3, ptr %6
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  br label %L1
L1:
  br label %L114
L114:                                                ; preds = %L1
  %16 = load i64, ptr %5
  store i64 %16, ptr %7
  %17 = load i64, ptr %6
  store i64 %17, ptr %8
  %18 = load i64, ptr %8
  %19 = icmp slt i64 %18, 1
  br i1 %19, label %L116, label %20
20:
  %21 = load i64, ptr %8
  %22 = icmp sgt i64 %21, 1
  br i1 %22, label %L118, label %L116
L116:                                                ; preds = %L114
  store i64 1, ptr %9
  %23 = load i64, ptr %9
  store i64 %23, ptr %5
  %24 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %25 = load ptr, ptr %ds
  %26 = insertvalue { { ptr, ptr }, { i64 } } %24, ptr %25, 0, 0
  %27 = load ptr, ptr %alloc
  %28 = insertvalue { { ptr, ptr }, { i64 } } %26, ptr %27, 0, 1
  %29 = load i64, ptr %5
  %30 = insertvalue { { ptr, ptr }, { i64 } } %28, i64 %29, 1, 0
  ret { { ptr, ptr }, { i64 } } %30
L118:                                                ; preds = %L114
  %31 = load i64, ptr %8
  store i64 %31, ptr %10
  %32 = load i64, ptr %10
  %33 = add i64 %32, -2
  store i64 %33, ptr %10
  %34 = load i64, ptr %7
  store i64 %34, ptr %11
  %35 = load i64, ptr %11
  %36 = add i64 %35, 2
  store i64 %36, ptr %11
  %37 = load i64, ptr %11
  store i64 %37, ptr %5
  %38 = load i64, ptr %10
  store i64 %38, ptr %6
  %39 = load i64, ptr %5
  %40 = load i64, ptr %6
  %41 = load ptr, ptr %ds
  %42 = load ptr, ptr %alloc
  %43 =  call cc 104 { { ptr, ptr }, { i64 } } @camlAlloc__local_iota_HIDE_STAMP(ptr %41, ptr %42, i64 %39, i64 %40)
  %44 = extractvalue { { ptr, ptr }, { i64 } } %43, 0, 0
  store ptr %44, ptr %ds
  %45 = extractvalue { { ptr, ptr }, { i64 } } %43, 0, 1
  store ptr %45, ptr %alloc
  %46 = extractvalue { { ptr, ptr }, { i64 } } %43, 1, 0
  store i64 %46, ptr %5
  br label %L120
L120:                                                ; preds = %L118
  %47 = load i64, ptr %5
  store i64 %47, ptr %12
  %48 = load i64, ptr %12
  store i64 %48, ptr %13
  %49 = load i64, ptr %ds
  %50 = add i64 %49, 64
  %51 = inttoptr i64 %50 to ptr
  %52 = load i64, ptr %51
  %53 = sub i64 %52, 24
  store i64 %53, ptr %51
  %54 = load i64, ptr %ds
  %55 = add i64 %54, 80
  %56 = inttoptr i64 %55 to ptr
  %57 = load i64, ptr %56
  %58 = icmp slt i64 %57, %53
  br i1 %58, label %60, label %59
59:
   call  void @caml_call_local_realloc() cold
  br label %60
60:
  %61 = load i64, ptr %ds
  %62 = add i64 %61, 72
  %63 = inttoptr i64 %62 to ptr
  %64 = load i64, ptr %63
  %65 = add i64 %53, %64
  %66 = add i64 %65, 8
  store i64 %66, ptr %14
  store i64 2816, ptr %15
  %67 = load i64, ptr %14
  %68 = add i64 %67, -8
  %69 = inttoptr i64 %68 to ptr
  %70 = load i64, ptr %15
  store i64 %70, ptr %69
  %71 = load i64, ptr %14
  %72 = add i64 %71, 0
  %73 = inttoptr i64 %72 to ptr
  %74 = load i64, ptr %7
  store i64 %74, ptr %73
  %75 = load i64, ptr %14
  %76 = add i64 %75, 8
  %77 = inttoptr i64 %76 to ptr
  %78 = load i64, ptr %13
  store i64 %78, ptr %77
  %79 = load i64, ptr %14
  store i64 %79, ptr %5
  %80 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %81 = load ptr, ptr %ds
  %82 = insertvalue { { ptr, ptr }, { i64 } } %80, ptr %81, 0, 0
  %83 = load ptr, ptr %alloc
  %84 = insertvalue { { ptr, ptr }, { i64 } } %82, ptr %83, 0, 1
  %85 = load i64, ptr %5
  %86 = insertvalue { { ptr, ptr }, { i64 } } %84, i64 %85, 1, 0
  ret { { ptr, ptr }, { i64 } } %86
}

define cc 104 { { ptr, ptr }, { i64 } } @camlAlloc__big_local_alloc_HIDE_STAMP(ptr %0, ptr %1, i64 %2)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  br label %L1
L1:
  br label %L126
L126:                                                ; preds = %L1
  %20 = load i64, ptr %4
  store i64 %20, ptr %7
  %21 = load i64, ptr %ds
  %22 = add i64 %21, 64
  %23 = inttoptr i64 %22 to ptr
  %24 = load i64, ptr %23
  store i64 %24, ptr %8
  %25 = load i64, ptr %8
  store i64 %25, ptr %9
  store i64 20001, ptr %10
  store i64 1, ptr %11
  %26 = load i64, ptr %11
  store i64 %26, ptr %4
  %27 = load i64, ptr %10
  store i64 %27, ptr %5
  %28 = load i64, ptr %4
  %29 = load i64, ptr %5
  %30 = load ptr, ptr %ds
  %31 = load ptr, ptr %alloc
  %32 =  call cc 104 { { ptr, ptr }, { i64 } } @camlAlloc__local_iota_HIDE_STAMP(ptr %30, ptr %31, i64 %28, i64 %29)
  %33 = extractvalue { { ptr, ptr }, { i64 } } %32, 0, 0
  store ptr %33, ptr %ds
  %34 = extractvalue { { ptr, ptr }, { i64 } } %32, 0, 1
  store ptr %34, ptr %alloc
  %35 = extractvalue { { ptr, ptr }, { i64 } } %32, 1, 0
  store i64 %35, ptr %4
  br label %L129
L129:                                                ; preds = %L126
  %36 = load i64, ptr %4
  store i64 %36, ptr %12
  %37 = load i64, ptr %12
  store i64 %37, ptr %13
  store i64 1, ptr %14
  store ptr @camlAlloc__fn$5balloc.ml$3a12$2c13$2d$2d16$5d_12, ptr %15
  %38 = load i64, ptr %15
  store i64 %38, ptr %4
  %39 = load i64, ptr %14
  store i64 %39, ptr %5
  %40 = load i64, ptr %13
  store i64 %40, ptr %6
  %41 = load i64, ptr %4
  %42 = load i64, ptr %5
  %43 = load i64, ptr %6
  %44 = load ptr, ptr %ds
  %45 = load ptr, ptr %alloc
  %46 =  call cc 104 { { ptr, ptr }, { i64 } } @camlAlloc__my_fold_HIDE_STAMP(ptr %44, ptr %45, i64 %41, i64 %42, i64 %43)
  %47 = extractvalue { { ptr, ptr }, { i64 } } %46, 0, 0
  store ptr %47, ptr %ds
  %48 = extractvalue { { ptr, ptr }, { i64 } } %46, 0, 1
  store ptr %48, ptr %alloc
  %49 = extractvalue { { ptr, ptr }, { i64 } } %46, 1, 0
  store i64 %49, ptr %4
  br label %L130
L130:                                                ; preds = %L129
  %50 = load i64, ptr %4
  store i64 %50, ptr %16
  %51 = load i64, ptr %16
  store i64 %51, ptr %17
  %52 = load i64, ptr %9
  %53 = load i64, ptr %ds
  %54 = add i64 %53, 64
  %55 = inttoptr i64 %54 to ptr
  store i64 %52, ptr %55
  store i64 1, ptr %18
  %56 = load i64, ptr %18
  store i64 %56, ptr %19
  %57 = load i64, ptr %17
  store i64 %57, ptr %4
  %58 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %59 = load ptr, ptr %ds
  %60 = insertvalue { { ptr, ptr }, { i64 } } %58, ptr %59, 0, 0
  %61 = load ptr, ptr %alloc
  %62 = insertvalue { { ptr, ptr }, { i64 } } %60, ptr %61, 0, 1
  %63 = load i64, ptr %4
  %64 = insertvalue { { ptr, ptr }, { i64 } } %62, i64 %63, 1, 0
  ret { { ptr, ptr }, { i64 } } %64
}

define cc 104 { { ptr, ptr }, { i64 } } @camlAlloc__fn$5balloc.ml$3a12$2c13$2d$2d16$5d_HIDE_STAMP(ptr %0, ptr %1, i64 %2, i64 %3)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %5 = alloca i64
  store i64 %2, ptr %5
  %6 = alloca i64
  store i64 %3, ptr %6
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  br label %L1
L1:
  br label %L133
L133:                                                ; preds = %L1
  %11 = load i64, ptr %5
  store i64 %11, ptr %7
  %12 = load i64, ptr %6
  store i64 %12, ptr %8
  %13 = load i64, ptr %7
  store i64 %13, ptr %9
  %14 = load i64, ptr %9
  %15 = load i64, ptr %8
  %16 = add i64 %14, %15
  store i64 %16, ptr %9
  %17 = load i64, ptr %9
  store i64 %17, ptr %10
  %18 = load i64, ptr %10
  %19 = add i64 %18, -1
  store i64 %19, ptr %10
  %20 = load i64, ptr %10
  store i64 %20, ptr %5
  %21 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %22 = load ptr, ptr %ds
  %23 = insertvalue { { ptr, ptr }, { i64 } } %21, ptr %22, 0, 0
  %24 = load ptr, ptr %alloc
  %25 = insertvalue { { ptr, ptr }, { i64 } } %23, ptr %24, 0, 1
  %26 = load i64, ptr %5
  %27 = insertvalue { { ptr, ptr }, { i64 } } %25, i64 %26, 1, 0
  ret { { ptr, ptr }, { i64 } } %27
}

define cc 104 { { ptr, ptr }, { i64 } } @camlAlloc__heap_iota_HIDE_STAMP(ptr %0, ptr %1, i64 %2, i64 %3)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %5 = alloca i64
  store i64 %2, ptr %5
  %6 = alloca i64
  store i64 %3, ptr %6
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  br label %L1
L1:
  br label %L138
L138:                                                ; preds = %L1
  %16 = load i64, ptr %5
  store i64 %16, ptr %7
  %17 = load i64, ptr %6
  store i64 %17, ptr %8
  %18 = load i64, ptr %8
  %19 = icmp slt i64 %18, 1
  br i1 %19, label %L140, label %20
20:
  %21 = load i64, ptr %8
  %22 = icmp sgt i64 %21, 1
  br i1 %22, label %L142, label %L140
L140:                                                ; preds = %L138
  store i64 1, ptr %9
  %23 = load i64, ptr %9
  store i64 %23, ptr %5
  %24 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %25 = load ptr, ptr %ds
  %26 = insertvalue { { ptr, ptr }, { i64 } } %24, ptr %25, 0, 0
  %27 = load ptr, ptr %alloc
  %28 = insertvalue { { ptr, ptr }, { i64 } } %26, ptr %27, 0, 1
  %29 = load i64, ptr %5
  %30 = insertvalue { { ptr, ptr }, { i64 } } %28, i64 %29, 1, 0
  ret { { ptr, ptr }, { i64 } } %30
L142:                                                ; preds = %L138
  %31 = load i64, ptr %8
  store i64 %31, ptr %10
  %32 = load i64, ptr %10
  %33 = add i64 %32, -2
  store i64 %33, ptr %10
  %34 = load i64, ptr %7
  store i64 %34, ptr %11
  %35 = load i64, ptr %11
  %36 = add i64 %35, 2
  store i64 %36, ptr %11
  %37 = load i64, ptr %11
  store i64 %37, ptr %5
  %38 = load i64, ptr %10
  store i64 %38, ptr %6
  %39 = load i64, ptr %5
  %40 = load i64, ptr %6
  %41 = load ptr, ptr %ds
  %42 = load ptr, ptr %alloc
  %43 =  call cc 104 { { ptr, ptr }, { i64 } } @camlAlloc__heap_iota_HIDE_STAMP(ptr %41, ptr %42, i64 %39, i64 %40)
  %44 = extractvalue { { ptr, ptr }, { i64 } } %43, 0, 0
  store ptr %44, ptr %ds
  %45 = extractvalue { { ptr, ptr }, { i64 } } %43, 0, 1
  store ptr %45, ptr %alloc
  %46 = extractvalue { { ptr, ptr }, { i64 } } %43, 1, 0
  store i64 %46, ptr %5
  br label %L144
L144:                                                ; preds = %L142
  %47 = load i64, ptr %5
  store i64 %47, ptr %12
  %48 = load i64, ptr %12
  store i64 %48, ptr %13
  %49 = load i64, ptr %alloc
  %50 = sub i64 %49, 24
  store i64 %50, ptr %alloc
  %51 = load i64, ptr %ds
  %52 = add i64 %51, 0
  %53 = inttoptr i64 %52 to ptr
  %54 = load i64, ptr %53
  %55 = icmp ult i64 %54, %50
  br i1 %55, label %after.56, label %56
56:
  %57 = load ptr, ptr %ds
  %58 = load ptr, ptr %alloc
  %59 =  call cc 104 { { ptr, ptr }, {  } } @caml_call_gc(ptr %57, ptr %58)
  %60 = extractvalue { { ptr, ptr }, {  } } %59, 0, 0
  store ptr %60, ptr %ds
  %61 = extractvalue { { ptr, ptr }, {  } } %59, 0, 1
  store ptr %61, ptr %alloc
  br label %after.56
after.56:
  %62 = load i64, ptr %alloc
  %63 = add i64 %62, 8
  store i64 %63, ptr %14
  store i64 2048, ptr %15
  %64 = load i64, ptr %14
  %65 = add i64 %64, -8
  %66 = inttoptr i64 %65 to ptr
  %67 = load i64, ptr %15
  store i64 %67, ptr %66
  %68 = load i64, ptr %14
  %69 = add i64 %68, 0
  %70 = inttoptr i64 %69 to ptr
  %71 = load i64, ptr %7
  store i64 %71, ptr %70
  %72 = load i64, ptr %14
  %73 = add i64 %72, 8
  %74 = inttoptr i64 %73 to ptr
  %75 = load i64, ptr %13
  store i64 %75, ptr %74
  %76 = load i64, ptr %14
  store i64 %76, ptr %5
  %77 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %78 = load ptr, ptr %ds
  %79 = insertvalue { { ptr, ptr }, { i64 } } %77, ptr %78, 0, 0
  %80 = load ptr, ptr %alloc
  %81 = insertvalue { { ptr, ptr }, { i64 } } %79, ptr %80, 0, 1
  %82 = load i64, ptr %5
  %83 = insertvalue { { ptr, ptr }, { i64 } } %81, i64 %82, 1, 0
  ret { { ptr, ptr }, { i64 } } %83
}

define cc 104 { { ptr, ptr }, { i64 } } @camlAlloc__big_heap_alloc_HIDE_STAMP(ptr %0, ptr %1, i64 %2)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca i64
  %22 = alloca i64
  br label %L1
L1:
  br label %L150
L150:                                                ; preds = %L1
  %23 = load i64, ptr %4
  store i64 %23, ptr %6
  store i64 40001, ptr %7
  store i64 1, ptr %8
  %24 = load i64, ptr %8
  store i64 %24, ptr %4
  %25 = load i64, ptr %7
  store i64 %25, ptr %5
  %26 = load i64, ptr %4
  %27 = load i64, ptr %5
  %28 = load ptr, ptr %ds
  %29 = load ptr, ptr %alloc
  %30 =  call cc 104 { { ptr, ptr }, { i64 } } @camlAlloc__heap_iota_HIDE_STAMP(ptr %28, ptr %29, i64 %26, i64 %27)
  %31 = extractvalue { { ptr, ptr }, { i64 } } %30, 0, 0
  store ptr %31, ptr %ds
  %32 = extractvalue { { ptr, ptr }, { i64 } } %30, 0, 1
  store ptr %32, ptr %alloc
  %33 = extractvalue { { ptr, ptr }, { i64 } } %30, 1, 0
  store i64 %33, ptr %4
  br label %L152
L152:                                                ; preds = %L150
  %34 = load i64, ptr %4
  store i64 %34, ptr %9
  %35 = load i64, ptr %9
  store i64 %35, ptr %10
  store i64 1, ptr %13
  %36 = load i64, ptr %13
  store i64 %36, ptr %14
  %37 = load i64, ptr %10
  store i64 %37, ptr %15
  %38 = load i64, ptr %14
  store i64 %38, ptr %11
  %39 = load i64, ptr %15
  store i64 %39, ptr %12
  br label %L156
L156:                                                ; preds = %L152, %L160
  %40 = load i64, ptr %12
  %41 = trunc i64 %40 to i1
  br i1 %41, label %L158, label %L160
L158:                                                ; preds = %L156
  %42 = load i64, ptr %11
  store i64 %42, ptr %4
  %43 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %44 = load ptr, ptr %ds
  %45 = insertvalue { { ptr, ptr }, { i64 } } %43, ptr %44, 0, 0
  %46 = load ptr, ptr %alloc
  %47 = insertvalue { { ptr, ptr }, { i64 } } %45, ptr %46, 0, 1
  %48 = load i64, ptr %4
  %49 = insertvalue { { ptr, ptr }, { i64 } } %47, i64 %48, 1, 0
  ret { { ptr, ptr }, { i64 } } %49
L160:                                                ; preds = %L156
  %50 = load i64, ptr %12
  store i64 %50, ptr %16
  %51 = load i64, ptr %16
  %52 = add i64 %51, 8
  store i64 %52, ptr %16
  %53 = load i64, ptr %16
  %54 = add i64 %53, 0
  %55 = inttoptr i64 %54 to ptr
  %56 = load i64, ptr %55
  store i64 %56, ptr %17
  %57 = load i64, ptr %12
  %58 = add i64 %57, 0
  %59 = inttoptr i64 %58 to ptr
  %60 = load i64, ptr %59
  store i64 %60, ptr %18
  %61 = load i64, ptr %11
  store i64 %61, ptr %19
  %62 = load i64, ptr %19
  %63 = load i64, ptr %18
  %64 = add i64 %62, %63
  store i64 %64, ptr %19
  %65 = load i64, ptr %19
  store i64 %65, ptr %20
  %66 = load i64, ptr %20
  %67 = add i64 %66, -1
  store i64 %67, ptr %20
  %68 = load i64, ptr %20
  store i64 %68, ptr %21
  %69 = load i64, ptr %17
  store i64 %69, ptr %22
  %70 = load i64, ptr %21
  store i64 %70, ptr %11
  %71 = load i64, ptr %22
  store i64 %71, ptr %12
  br label %L156
}

define cc 104 { { ptr, ptr }, { i64 } } @camlAlloc__make_ref_HIDE_STAMP(ptr %0, ptr %1, i64 %2)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  br label %L1
L1:
  br label %L170
L170:                                                ; preds = %L1
  %9 = load i64, ptr %4
  store i64 %9, ptr %5
  %10 = load i64, ptr %alloc
  %11 = sub i64 %10, 16
  store i64 %11, ptr %alloc
  %12 = load i64, ptr %ds
  %13 = add i64 %12, 0
  %14 = inttoptr i64 %13 to ptr
  %15 = load i64, ptr %14
  %16 = icmp ult i64 %15, %11
  br i1 %16, label %after.17, label %17
17:
  %18 = load ptr, ptr %ds
  %19 = load ptr, ptr %alloc
  %20 =  call cc 104 { { ptr, ptr }, {  } } @caml_call_gc(ptr %18, ptr %19)
  %21 = extractvalue { { ptr, ptr }, {  } } %20, 0, 0
  store ptr %21, ptr %ds
  %22 = extractvalue { { ptr, ptr }, {  } } %20, 0, 1
  store ptr %22, ptr %alloc
  br label %after.17
after.17:
  %23 = load i64, ptr %alloc
  %24 = add i64 %23, 8
  store i64 %24, ptr %6
  store i64 1024, ptr %7
  %25 = load i64, ptr %6
  %26 = add i64 %25, -8
  %27 = inttoptr i64 %26 to ptr
  %28 = load i64, ptr %7
  store i64 %28, ptr %27
  store i64 1, ptr %8
  %29 = load i64, ptr %6
  %30 = add i64 %29, 0
  %31 = inttoptr i64 %30 to ptr
  %32 = load i64, ptr %8
  store i64 %32, ptr %31
  %33 = load i64, ptr %6
  store i64 %33, ptr %4
  %34 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %35 = load ptr, ptr %ds
  %36 = insertvalue { { ptr, ptr }, { i64 } } %34, ptr %35, 0, 0
  %37 = load ptr, ptr %alloc
  %38 = insertvalue { { ptr, ptr }, { i64 } } %36, ptr %37, 0, 1
  %39 = load i64, ptr %4
  %40 = insertvalue { { ptr, ptr }, { i64 } } %38, i64 %39, 1, 0
  ret { { ptr, ptr }, { i64 } } %40
}

define cc 104 { { ptr, ptr }, { i64 } } @camlAlloc__heap_ref_incr_HIDE_STAMP(ptr %0, ptr %1, i64 %2)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %4 = alloca i64
  store i64 %2, ptr %4
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca i64
  br label %L1
L1:
  br label %L174
L174:                                                ; preds = %L1
  %22 = load i64, ptr %4
  store i64 %22, ptr %5
  store i64 1, ptr %6
  %23 = load i64, ptr %6
  store i64 %23, ptr %4
  %24 = load i64, ptr %4
  %25 = load ptr, ptr %ds
  %26 = load ptr, ptr %alloc
  %27 =  call cc 104 { { ptr, ptr }, { i64 } } @camlAlloc__make_ref_HIDE_STAMP(ptr %25, ptr %26, i64 %24)
  %28 = extractvalue { { ptr, ptr }, { i64 } } %27, 0, 0
  store ptr %28, ptr %ds
  %29 = extractvalue { { ptr, ptr }, { i64 } } %27, 0, 1
  store ptr %29, ptr %alloc
  %30 = extractvalue { { ptr, ptr }, { i64 } } %27, 1, 0
  store i64 %30, ptr %4
  br label %L176
L176:                                                ; preds = %L174
  %31 = load i64, ptr %4
  store i64 %31, ptr %7
  %32 = load i64, ptr %7
  store i64 %32, ptr %8
  %33 = load i64, ptr %8
  %34 = add i64 %33, 0
  %35 = inttoptr i64 %34 to ptr
  %36 = load i64, ptr %35
  store i64 %36, ptr %9
  %37 = load i64, ptr %9
  store i64 %37, ptr %10
  %38 = load i64, ptr %10
  %39 = add i64 %38, 2
  store i64 %39, ptr %10
  %40 = load i64, ptr %8
  %41 = add i64 %40, 0
  %42 = inttoptr i64 %41 to ptr
  %43 = load i64, ptr %10
  store i64 %43, ptr %42
  store i64 1, ptr %11
  %44 = load i64, ptr %11
  store i64 %44, ptr %12
  %45 = load i64, ptr %8
  %46 = add i64 %45, 0
  %47 = inttoptr i64 %46 to ptr
  %48 = load i64, ptr %47
  store i64 %48, ptr %13
  %49 = load i64, ptr %13
  store i64 %49, ptr %14
  %50 = load i64, ptr %14
  %51 = add i64 %50, 2
  store i64 %51, ptr %14
  %52 = load i64, ptr %8
  %53 = add i64 %52, 0
  %54 = inttoptr i64 %53 to ptr
  %55 = load i64, ptr %14
  store i64 %55, ptr %54
  store i64 1, ptr %15
  %56 = load i64, ptr %15
  store i64 %56, ptr %16
  %57 = load i64, ptr %8
  %58 = add i64 %57, 0
  %59 = inttoptr i64 %58 to ptr
  %60 = load i64, ptr %59
  store i64 %60, ptr %17
  %61 = load i64, ptr %17
  store i64 %61, ptr %18
  %62 = load i64, ptr %18
  %63 = add i64 %62, 2
  store i64 %63, ptr %18
  %64 = load i64, ptr %8
  %65 = add i64 %64, 0
  %66 = inttoptr i64 %65 to ptr
  %67 = load i64, ptr %18
  store i64 %67, ptr %66
  store i64 1, ptr %19
  %68 = load i64, ptr %19
  store i64 %68, ptr %20
  %69 = load i64, ptr %8
  %70 = add i64 %69, 0
  %71 = inttoptr i64 %70 to ptr
  %72 = load i64, ptr %71
  store i64 %72, ptr %21
  %73 = load i64, ptr %21
  store i64 %73, ptr %4
  %74 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %75 = load ptr, ptr %ds
  %76 = insertvalue { { ptr, ptr }, { i64 } } %74, ptr %75, 0, 0
  %77 = load ptr, ptr %alloc
  %78 = insertvalue { { ptr, ptr }, { i64 } } %76, ptr %77, 0, 1
  %79 = load i64, ptr %4
  %80 = insertvalue { { ptr, ptr }, { i64 } } %78, i64 %79, 1, 0
  ret { { ptr, ptr }, { i64 } } %80
}

define cc 104 { { ptr, ptr }, { i64 } } @camlAlloc__entry(ptr %0, ptr %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %3 = alloca i64
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  %8 = alloca i64
  %9 = alloca i64
  %10 = alloca i64
  %11 = alloca i64
  %12 = alloca i64
  %13 = alloca i64
  %14 = alloca i64
  %15 = alloca i64
  %16 = alloca i64
  %17 = alloca i64
  %18 = alloca i64
  %19 = alloca i64
  %20 = alloca i64
  %21 = alloca i64
  %22 = alloca i64
  %23 = alloca i64
  %24 = alloca i64
  %25 = alloca i64
  %26 = alloca i64
  %27 = alloca i64
  %28 = alloca i64
  %29 = alloca i64
  %30 = alloca i64
  %31 = alloca i64
  %32 = alloca i64
  %33 = alloca i64
  %34 = alloca i64
  %35 = alloca i64
  %36 = alloca i64
  %37 = alloca i64
  %38 = alloca i64
  %39 = alloca i64
  %40 = alloca i64
  %41 = alloca i64
  %42 = alloca i64
  %43 = alloca i64
  %44 = alloca i64
  %45 = alloca i64
  %46 = alloca i64
  %47 = alloca i64
  %48 = alloca i64
  %49 = alloca i64
  %50 = alloca i64
  %51 = alloca i64
  %52 = alloca i64
  %53 = alloca i64
  %54 = alloca i64
  %55 = alloca i64
  %56 = alloca i64
  br label %L1
L1:
  br label %L191
L191:                                                ; preds = %L1
  store i64 1, ptr %7
  %57 = load i64, ptr %7
  store i64 %57, ptr %3
  %58 = load i64, ptr %3
  %59 = load ptr, ptr %ds
  %60 = load ptr, ptr %alloc
  %61 =  call cc 104 { { ptr, ptr }, { i64 } } @camlAlloc__big_local_alloc_HIDE_STAMP(ptr %59, ptr %60, i64 %58)
  %62 = extractvalue { { ptr, ptr }, { i64 } } %61, 0, 0
  store ptr %62, ptr %ds
  %63 = extractvalue { { ptr, ptr }, { i64 } } %61, 0, 1
  store ptr %63, ptr %alloc
  %64 = extractvalue { { ptr, ptr }, { i64 } } %61, 1, 0
  store i64 %64, ptr %3
  br label %L193
L193:                                                ; preds = %L191
  %65 = load i64, ptr %3
  store i64 %65, ptr %8
  %66 = load i64, ptr %8
  store i64 %66, ptr %9
  store ptr @camlAlloc__const_block115, ptr %10
  store i64 1, ptr %11
  store ptr @camlStdlib__Format__fn$5b$2fworkspace_root$2fformat.ml$3a1458$2c4$2d$2d66$5d_550, ptr %12
  %67 = load i64, ptr %12
  store i64 %67, ptr %3
  %68 = load i64, ptr %11
  store i64 %68, ptr %4
  %69 = load i64, ptr %10
  store i64 %69, ptr %5
  %70 = load i64, ptr %3
  %71 = load i64, ptr %4
  %72 = load i64, ptr %5
  %73 = load ptr, ptr %ds
  %74 = load ptr, ptr %alloc
  %75 =  call cc 104 { { ptr, ptr }, { i64 } } @camlCamlinternalFormat__make_printf_HIDE_STAMP(ptr %73, ptr %74, i64 %70, i64 %71, i64 %72)
  %76 = extractvalue { { ptr, ptr }, { i64 } } %75, 0, 0
  store ptr %76, ptr %ds
  %77 = extractvalue { { ptr, ptr }, { i64 } } %75, 0, 1
  store ptr %77, ptr %alloc
  %78 = extractvalue { { ptr, ptr }, { i64 } } %75, 1, 0
  store i64 %78, ptr %3
  br label %L194
L194:                                                ; preds = %L193
  %79 = load i64, ptr %3
  store i64 %79, ptr %13
  %80 = load i64, ptr %13
  store i64 %80, ptr %14
  %81 = load i64, ptr %14
  %82 = add i64 %81, 0
  %83 = inttoptr i64 %82 to ptr
  %84 = load i64, ptr %83
  store i64 %84, ptr %15
  %85 = load i64, ptr %9
  store i64 %85, ptr %3
  %86 = load i64, ptr %14
  store i64 %86, ptr %4
  %87 = load i64, ptr %3
  %88 = load i64, ptr %4
  %89 = load ptr, ptr %ds
  %90 = load ptr, ptr %alloc
  %91 = load i64, ptr %15
  %92 = inttoptr i64 %91 to ptr
  %93 =  call cc 104 { { ptr, ptr }, { i64 } } %92(ptr %89, ptr %90, i64 %87, i64 %88)
  %94 = extractvalue { { ptr, ptr }, { i64 } } %93, 0, 0
  store ptr %94, ptr %ds
  %95 = extractvalue { { ptr, ptr }, { i64 } } %93, 0, 1
  store ptr %95, ptr %alloc
  %96 = extractvalue { { ptr, ptr }, { i64 } } %93, 1, 0
  store i64 %96, ptr %3
  br label %L195
L195:                                                ; preds = %L194
  %97 = load i64, ptr %3
  store i64 %97, ptr %16
  %98 = load i64, ptr %16
  store i64 %98, ptr %17
  store i64 1, ptr %18
  %99 = load i64, ptr %18
  store i64 %99, ptr %3
  %100 = load i64, ptr %3
  %101 = load ptr, ptr %ds
  %102 = load ptr, ptr %alloc
  %103 =  call cc 104 { { ptr, ptr }, { i64 } } @camlAlloc__big_heap_alloc_HIDE_STAMP(ptr %101, ptr %102, i64 %100)
  %104 = extractvalue { { ptr, ptr }, { i64 } } %103, 0, 0
  store ptr %104, ptr %ds
  %105 = extractvalue { { ptr, ptr }, { i64 } } %103, 0, 1
  store ptr %105, ptr %alloc
  %106 = extractvalue { { ptr, ptr }, { i64 } } %103, 1, 0
  store i64 %106, ptr %3
  br label %L197
L197:                                                ; preds = %L195
  %107 = load i64, ptr %3
  store i64 %107, ptr %19
  %108 = load i64, ptr %19
  store i64 %108, ptr %20
  store ptr @camlAlloc__const_block127, ptr %21
  store i64 1, ptr %22
  store ptr @camlStdlib__Format__fn$5b$2fworkspace_root$2fformat.ml$3a1458$2c4$2d$2d66$5d_550, ptr %23
  %109 = load i64, ptr %23
  store i64 %109, ptr %3
  %110 = load i64, ptr %22
  store i64 %110, ptr %4
  %111 = load i64, ptr %21
  store i64 %111, ptr %5
  %112 = load i64, ptr %3
  %113 = load i64, ptr %4
  %114 = load i64, ptr %5
  %115 = load ptr, ptr %ds
  %116 = load ptr, ptr %alloc
  %117 =  call cc 104 { { ptr, ptr }, { i64 } } @camlCamlinternalFormat__make_printf_HIDE_STAMP(ptr %115, ptr %116, i64 %112, i64 %113, i64 %114)
  %118 = extractvalue { { ptr, ptr }, { i64 } } %117, 0, 0
  store ptr %118, ptr %ds
  %119 = extractvalue { { ptr, ptr }, { i64 } } %117, 0, 1
  store ptr %119, ptr %alloc
  %120 = extractvalue { { ptr, ptr }, { i64 } } %117, 1, 0
  store i64 %120, ptr %3
  br label %L198
L198:                                                ; preds = %L197
  %121 = load i64, ptr %3
  store i64 %121, ptr %24
  %122 = load i64, ptr %24
  store i64 %122, ptr %25
  %123 = load i64, ptr %25
  %124 = add i64 %123, 0
  %125 = inttoptr i64 %124 to ptr
  %126 = load i64, ptr %125
  store i64 %126, ptr %26
  %127 = load i64, ptr %20
  store i64 %127, ptr %3
  %128 = load i64, ptr %25
  store i64 %128, ptr %4
  %129 = load i64, ptr %3
  %130 = load i64, ptr %4
  %131 = load ptr, ptr %ds
  %132 = load ptr, ptr %alloc
  %133 = load i64, ptr %26
  %134 = inttoptr i64 %133 to ptr
  %135 =  call cc 104 { { ptr, ptr }, { i64 } } %134(ptr %131, ptr %132, i64 %129, i64 %130)
  %136 = extractvalue { { ptr, ptr }, { i64 } } %135, 0, 0
  store ptr %136, ptr %ds
  %137 = extractvalue { { ptr, ptr }, { i64 } } %135, 0, 1
  store ptr %137, ptr %alloc
  %138 = extractvalue { { ptr, ptr }, { i64 } } %135, 1, 0
  store i64 %138, ptr %3
  br label %L199
L199:                                                ; preds = %L198
  %139 = load i64, ptr %3
  store i64 %139, ptr %27
  %140 = load i64, ptr %27
  store i64 %140, ptr %28
  store i64 1, ptr %29
  %141 = load i64, ptr %29
  store i64 %141, ptr %3
  %142 = load i64, ptr %3
  %143 = load ptr, ptr %ds
  %144 = load ptr, ptr %alloc
  %145 =  call cc 104 { { ptr, ptr }, { i64 } } @camlAlloc__make_ref_HIDE_STAMP(ptr %143, ptr %144, i64 %142)
  %146 = extractvalue { { ptr, ptr }, { i64 } } %145, 0, 0
  store ptr %146, ptr %ds
  %147 = extractvalue { { ptr, ptr }, { i64 } } %145, 0, 1
  store ptr %147, ptr %alloc
  %148 = extractvalue { { ptr, ptr }, { i64 } } %145, 1, 0
  store i64 %148, ptr %3
  br label %L201
L201:                                                ; preds = %L199
  %149 = load i64, ptr %3
  store i64 %149, ptr %30
  %150 = load i64, ptr %30
  store i64 %150, ptr %31
  %151 = load i64, ptr %31
  %152 = add i64 %151, 0
  %153 = inttoptr i64 %152 to ptr
  %154 = load i64, ptr %153
  store i64 %154, ptr %32
  %155 = load i64, ptr %32
  store i64 %155, ptr %33
  %156 = load i64, ptr %33
  %157 = add i64 %156, 2
  store i64 %157, ptr %33
  %158 = load i64, ptr %31
  %159 = add i64 %158, 0
  %160 = inttoptr i64 %159 to ptr
  %161 = load i64, ptr %33
  store i64 %161, ptr %160
  store i64 1, ptr %34
  %162 = load i64, ptr %34
  store i64 %162, ptr %35
  %163 = load i64, ptr %31
  %164 = add i64 %163, 0
  %165 = inttoptr i64 %164 to ptr
  %166 = load i64, ptr %165
  store i64 %166, ptr %36
  %167 = load i64, ptr %36
  store i64 %167, ptr %37
  %168 = load i64, ptr %37
  %169 = add i64 %168, 2
  store i64 %169, ptr %37
  %170 = load i64, ptr %31
  %171 = add i64 %170, 0
  %172 = inttoptr i64 %171 to ptr
  %173 = load i64, ptr %37
  store i64 %173, ptr %172
  store i64 1, ptr %38
  %174 = load i64, ptr %38
  store i64 %174, ptr %39
  %175 = load i64, ptr %31
  %176 = add i64 %175, 0
  %177 = inttoptr i64 %176 to ptr
  %178 = load i64, ptr %177
  store i64 %178, ptr %40
  %179 = load i64, ptr %40
  store i64 %179, ptr %41
  %180 = load i64, ptr %41
  %181 = add i64 %180, 2
  store i64 %181, ptr %41
  %182 = load i64, ptr %31
  %183 = add i64 %182, 0
  %184 = inttoptr i64 %183 to ptr
  %185 = load i64, ptr %41
  store i64 %185, ptr %184
  store i64 1, ptr %42
  %186 = load i64, ptr %42
  store i64 %186, ptr %43
  %187 = load i64, ptr %31
  %188 = add i64 %187, 0
  %189 = inttoptr i64 %188 to ptr
  %190 = load i64, ptr %189
  store i64 %190, ptr %44
  %191 = load i64, ptr %44
  store i64 %191, ptr %45
  store ptr @camlAlloc__const_block138, ptr %46
  store i64 1, ptr %47
  store ptr @camlStdlib__Format__fn$5b$2fworkspace_root$2fformat.ml$3a1458$2c4$2d$2d66$5d_550, ptr %48
  %192 = load i64, ptr %48
  store i64 %192, ptr %3
  %193 = load i64, ptr %47
  store i64 %193, ptr %4
  %194 = load i64, ptr %46
  store i64 %194, ptr %5
  %195 = load i64, ptr %3
  %196 = load i64, ptr %4
  %197 = load i64, ptr %5
  %198 = load ptr, ptr %ds
  %199 = load ptr, ptr %alloc
  %200 =  call cc 104 { { ptr, ptr }, { i64 } } @camlCamlinternalFormat__make_printf_HIDE_STAMP(ptr %198, ptr %199, i64 %195, i64 %196, i64 %197)
  %201 = extractvalue { { ptr, ptr }, { i64 } } %200, 0, 0
  store ptr %201, ptr %ds
  %202 = extractvalue { { ptr, ptr }, { i64 } } %200, 0, 1
  store ptr %202, ptr %alloc
  %203 = extractvalue { { ptr, ptr }, { i64 } } %200, 1, 0
  store i64 %203, ptr %3
  br label %L212
L212:                                                ; preds = %L201
  %204 = load i64, ptr %3
  store i64 %204, ptr %49
  %205 = load i64, ptr %49
  store i64 %205, ptr %50
  %206 = load i64, ptr %50
  %207 = add i64 %206, 0
  %208 = inttoptr i64 %207 to ptr
  %209 = load i64, ptr %208
  store i64 %209, ptr %51
  %210 = load i64, ptr %45
  store i64 %210, ptr %3
  %211 = load i64, ptr %50
  store i64 %211, ptr %4
  %212 = load i64, ptr %3
  %213 = load i64, ptr %4
  %214 = load ptr, ptr %ds
  %215 = load ptr, ptr %alloc
  %216 = load i64, ptr %51
  %217 = inttoptr i64 %216 to ptr
  %218 =  call cc 104 { { ptr, ptr }, { i64 } } %217(ptr %214, ptr %215, i64 %212, i64 %213)
  %219 = extractvalue { { ptr, ptr }, { i64 } } %218, 0, 0
  store ptr %219, ptr %ds
  %220 = extractvalue { { ptr, ptr }, { i64 } } %218, 0, 1
  store ptr %220, ptr %alloc
  %221 = extractvalue { { ptr, ptr }, { i64 } } %218, 1, 0
  store i64 %221, ptr %3
  br label %L213
L213:                                                ; preds = %L212
  %222 = load i64, ptr %3
  store i64 %222, ptr %52
  %223 = load i64, ptr %52
  store i64 %223, ptr %53
  store ptr @camlAlloc, ptr %54
  %224 = load i64, ptr %54
  store i64 %224, ptr %55
  %225 = load i64, ptr %55
  store i64 %225, ptr %6
  store i64 1, ptr %56
  %226 = load i64, ptr %56
  store i64 %226, ptr %3
  %227 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %228 = load ptr, ptr %ds
  %229 = insertvalue { { ptr, ptr }, { i64 } } %227, ptr %228, 0, 0
  %230 = load ptr, ptr %alloc
  %231 = insertvalue { { ptr, ptr }, { i64 } } %229, ptr %230, 0, 1
  %232 = load i64, ptr %3
  %233 = insertvalue { { ptr, ptr }, { i64 } } %231, i64 %232, 1, 0
  ret { { ptr, ptr }, { i64 } } %233
}

declare cc 104 { { ptr, ptr }, { i64 } } @camlCamlinternalFormat__make_printf_HIDE_STAMP(ptr, ptr, i64, i64, i64)
declare cc 104 { { ptr, ptr }, { i64 } } @caml_apply2(ptr, ptr, i64, i64, i64)
declare cc 104 { { ptr, ptr }, {  } } @caml_call_gc(ptr, ptr)
declare  void @caml_call_local_realloc()
declare i64 @llvm.read_register.i64(metadata)
declare void @llvm.write_register.i64(metadata, i64)

@camlStdlib__Format__fn$5b$2fworkspace_root$2fformat.ml$3a1458$2c4$2d$2d66$5d_550 = external global ptr
@caml_curry2 = external global ptr
@caml_curry2L1 = external global ptr
@caml_curry2L2 = external global ptr
@caml_curry3L1 = external global ptr

@camlAlloc__data_end = global {  } {  }, align 8
define void @camlAlloc__code_end() { ret void }
@camlAlloc__frametable = global {  } {  }, align 8
