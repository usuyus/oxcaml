source_filename = "multi_ret.ml"

@camlMulti_ret__data_begin = global {  } {  }, align 8
define void @camlMulti_ret__code_begin() { ret void }

@camlMulti_ret__gc_roots = global { i64 } { i64 0 }, align 8
@.header.camlMulti_ret = global { i64 } { i64 2816 }, align 8
@camlMulti_ret = global { ptr, ptr } { ptr @camlMulti_ret__empty_block4, ptr @camlMulti_ret__permute_1 }, align 8
@.header.camlMulti_ret__permute_1 = global { i64 } { i64 4087 }, align 8
@camlMulti_ret__permute_1 = global { ptr, i64, ptr } { ptr @caml_curryF_F_F_F_RFFFF, i64 324259173170675719, ptr @camlMulti_ret__permute_HIDE_STAMP }, align 8
@.header.camlMulti_ret__empty_block4 = global { i64 } { i64 768 }, align 8
@camlMulti_ret__empty_block4 = global {  } {  }, align 8
define cc 104 { { ptr, ptr }, { double, double, double, double } } @camlMulti_ret__permute_HIDE_STAMP(ptr %0, ptr %1, double %2, double %3, double %4, double %5)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %7 = alloca double
  store double %2, ptr %7
  %8 = alloca double
  store double %3, ptr %8
  %9 = alloca double
  store double %4, ptr %9
  %10 = alloca double
  store double %5, ptr %10
  %11 = alloca double
  %12 = alloca double
  %13 = alloca double
  %14 = alloca double
  br label %L1
L1:
  br label %L101
L101:                                                ; preds = %L1
  %15 = load double, ptr %7
  store double %15, ptr %11
  %16 = load double, ptr %8
  store double %16, ptr %12
  %17 = load double, ptr %9
  store double %17, ptr %13
  %18 = load double, ptr %10
  store double %18, ptr %14
  %19 = load double, ptr %14
  store double %19, ptr %7
  %20 = load double, ptr %13
  store double %20, ptr %8
  %21 = load double, ptr %12
  store double %21, ptr %9
  %22 = load double, ptr %11
  store double %22, ptr %10
  %23 = extractvalue { { { ptr, ptr }, { double, double, double, double } } } poison, 0
  %24 = load ptr, ptr %ds
  %25 = insertvalue { { ptr, ptr }, { double, double, double, double } } %23, ptr %24, 0, 0
  %26 = load ptr, ptr %alloc
  %27 = insertvalue { { ptr, ptr }, { double, double, double, double } } %25, ptr %26, 0, 1
  %28 = load double, ptr %7
  %29 = insertvalue { { ptr, ptr }, { double, double, double, double } } %27, double %28, 1, 0
  %30 = load double, ptr %8
  %31 = insertvalue { { ptr, ptr }, { double, double, double, double } } %29, double %30, 1, 1
  %32 = load double, ptr %9
  %33 = insertvalue { { ptr, ptr }, { double, double, double, double } } %31, double %32, 1, 2
  %34 = load double, ptr %10
  %35 = insertvalue { { ptr, ptr }, { double, double, double, double } } %33, double %34, 1, 3
  ret { { ptr, ptr }, { double, double, double, double } } %35
}

define cc 104 { { ptr, ptr }, { i64 } } @camlMulti_ret__entry(ptr %0, ptr %1)  {
  %ds = alloca ptr
  store ptr %0, ptr %ds
  %alloc = alloca ptr
  store ptr %1, ptr %alloc
  %3 = alloca i64
  %4 = alloca i64
  %5 = alloca i64
  %6 = alloca i64
  %7 = alloca i64
  br label %L1
L1:
  br label %L107
L107:                                                ; preds = %L1
  store ptr @camlMulti_ret, ptr %5
  %8 = load i64, ptr %5
  store i64 %8, ptr %6
  %9 = load i64, ptr %6
  store i64 %9, ptr %4
  store i64 1, ptr %7
  %10 = load i64, ptr %7
  store i64 %10, ptr %3
  %11 = extractvalue { { { ptr, ptr }, { i64 } } } poison, 0
  %12 = load ptr, ptr %ds
  %13 = insertvalue { { ptr, ptr }, { i64 } } %11, ptr %12, 0, 0
  %14 = load ptr, ptr %alloc
  %15 = insertvalue { { ptr, ptr }, { i64 } } %13, ptr %14, 0, 1
  %16 = load i64, ptr %3
  %17 = insertvalue { { ptr, ptr }, { i64 } } %15, i64 %16, 1, 0
  ret { { ptr, ptr }, { i64 } } %17
}

declare i64 @llvm.read_register.i64(metadata)
declare void @llvm.write_register.i64(metadata, i64)

@caml_curryF_F_F_F_RFFFF = external global ptr

@camlMulti_ret__data_end = global {  } {  }, align 8
define void @camlMulti_ret__code_end() { ret void }
@camlMulti_ret__frametable = global {  } {  }, align 8
